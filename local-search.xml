<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>🏂抢不到冰墩墩？快用canvas画一个谁也抢不走的冰墩墩吧！</title>
    <link href="/2022/02/10/%F0%9F%8F%82%E6%8A%A2%E4%B8%8D%E5%88%B0%E5%86%B0%E5%A2%A9%E5%A2%A9%EF%BC%9F%E5%BF%AB%E7%94%A8canvas%E7%94%BB%E4%B8%80%E4%B8%AA%E8%B0%81%E4%B9%9F%E6%8A%A2%E4%B8%8D%E8%B5%B0%E7%9A%84%E5%86%B0%E5%A2%A9%E5%A2%A9%E5%90%A7%EF%BC%81/"/>
    <url>/2022/02/10/%F0%9F%8F%82%E6%8A%A2%E4%B8%8D%E5%88%B0%E5%86%B0%E5%A2%A9%E5%A2%A9%EF%BC%9F%E5%BF%AB%E7%94%A8canvas%E7%94%BB%E4%B8%80%E4%B8%AA%E8%B0%81%E4%B9%9F%E6%8A%A2%E4%B8%8D%E8%B5%B0%E7%9A%84%E5%86%B0%E5%A2%A9%E5%A2%A9%E5%90%A7%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>冬奥会正在如火如荼的进行，从第一天的冰壶到👦短道速滑队惊心动魄的金牌再到前几天看到🏂谷爱凌做出第一个偏轴1620我直接激动地跳起来，今年冬奥看点十足！不得不提的就是今年冬奥的吉祥物冰墩墩也是成了新网红，网络上全是他的身影，前两天开启的购买我也是一个都没抢到…真是要气死了。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c6a7679098d041a397aa0d78d8317c22~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>于是我决定自己画一个，作为一个前端人，曾经也是学生会宣传部骨干成员，怎么说也是有点美术功底在的（自我感觉良好）。</p><p>本篇文章会通过画冰墩墩的方式帮助大家复习一下canvas基本的使用及相关方法。</p><h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/415712400e39484eb0ff1c5a68c77ffc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="绘制步骤"><a href="#绘制步骤" class="headerlink" title="绘制步骤"></a>绘制步骤</h2><h3 id="身体"><a href="#身体" class="headerlink" title="身体"></a>身体</h3><p>身体部分我们利用canvas的椭圆和canvas填充未闭合路径的特点来绘制。我们需要两个半椭圆来生成如下图所示的形状</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/825563fb70db4d889802982c7cc4460f~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">400</span>, <span class="hljs-number">400</span>, <span class="hljs-number">150</span>, <span class="hljs-number">160</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>)<br>ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">400</span>, <span class="hljs-number">310</span>, <span class="hljs-number">160</span>, <span class="hljs-number">150</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#fff&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br></code></pre></td></tr></table></figure><blockquote><p>椭圆方法：ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, anticlockwise)</p><p>对应参数：起点x.起点y,半径x,半径y,旋转的角度，起始角，结果角，顺时针或逆时针</p></blockquote><h3 id="耳朵"><a href="#耳朵" class="headerlink" title="耳朵"></a>耳朵</h3><p>耳朵很简单，这里用一个半圆和一个矩形组成：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77a5d8a69956460ca137c6bf652315bc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript">ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">300</span>, <span class="hljs-number">190</span>, <span class="hljs-number">20</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">280</span>, <span class="hljs-number">190</span>, <span class="hljs-number">40</span>, <span class="hljs-number">40</span>)<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">500</span>, <span class="hljs-number">190</span>, <span class="hljs-number">20</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">480</span>, <span class="hljs-number">190</span>, <span class="hljs-number">40</span>, <span class="hljs-number">40</span>)<br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br></code></pre></td></tr></table></figure><blockquote><p>绘圆方法：arc(x,y,r,sAngle,eAngle,counterclockwise)</p><p>对应参数：圆心x,圆心y,半径,起始角,结束角,顺时针或逆时针</p></blockquote><p><strong>耳朵要先于身体绘制，这样身体就会将耳朵多余部分覆盖</strong></p><h3 id="手与脚"><a href="#手与脚" class="headerlink" title="手与脚"></a>手与脚</h3><p>手脚为了做的生动形象，这里使用贝塞尔曲线来构造对应的形状，首先先来简单了解一下canvas中二阶、三阶贝塞尔曲线的生成方式和对应方法。</p><blockquote><p>贝塞尔曲线图片来自<a href="https://www.jianshu.com/p/afccc4642621">https://www.jianshu.com/p/afccc4642621</a></p></blockquote><ul><li>quadraticCurveTo（二阶贝塞尔曲线）</li></ul><blockquote><p> quadraticCurveTo(cpx,cpy,x,y)</p><p> 参数：控制点的x,控制点的y,结束点x,结束点y</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/29a9b60077a7451c946fc5af47cebe08~tplv-k3u1fbpfcp-watermark.image" alt="16075459-cf42c00869beb95e.gif"></p><ul><li>bezierCurveTo（三阶贝塞尔曲线）</li></ul><blockquote><p> bezierCurveTo(cp1x,cp1y,cp2x,cp2y,x,y)</p><p> 参数：控制点1的x,控制点1的y,控制点2的x,控制点2的y,结束点x,结束点y</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/82fa1fa293314069847f7f6328223c4c~tplv-k3u1fbpfcp-watermark.image" alt="16075459-c505dd7f784accfa.gif"></p><p>贝塞尔曲线原理在动图中已经体现的很明显了，控制点能够使两点之间的折线变得圆滑。接下来我们利用它画手脚，<strong>每画完一部分记得closePath()关闭当前路径。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//   脚</span><br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">300</span>, <span class="hljs-number">523</span>)<br>ctx.<span class="hljs-title function_">bezierCurveTo</span>(<span class="hljs-number">315</span>, <span class="hljs-number">523</span>, <span class="hljs-number">290</span>, <span class="hljs-number">583</span>, <span class="hljs-number">300</span>, <span class="hljs-number">603</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">325</span>, <span class="hljs-number">613</span>, <span class="hljs-number">370</span>, <span class="hljs-number">603</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">360</span>, <span class="hljs-number">584</span>, <span class="hljs-number">370</span>, <span class="hljs-number">556</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">325</span>, <span class="hljs-number">523</span>, <span class="hljs-number">300</span>, <span class="hljs-number">520</span>)<br>ctx.<span class="hljs-title function_">stroke</span>()<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">440</span>, <span class="hljs-number">554</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">445</span>, <span class="hljs-number">575</span>, <span class="hljs-number">438</span>, <span class="hljs-number">600</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">465</span>, <span class="hljs-number">610</span>, <span class="hljs-number">510</span>, <span class="hljs-number">600</span>)<br>ctx.<span class="hljs-title function_">bezierCurveTo</span>(<span class="hljs-number">495</span>, <span class="hljs-number">575</span>, <span class="hljs-number">515</span>, <span class="hljs-number">545</span>, <span class="hljs-number">505</span>, <span class="hljs-number">514</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">470</span>, <span class="hljs-number">546</span>, <span class="hljs-number">440</span>, <span class="hljs-number">553</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br><br><span class="hljs-comment">// 手</span><br><span class="hljs-comment">// 左手</span><br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">250</span>, <span class="hljs-number">400</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">245</span>, <span class="hljs-number">330</span>, <span class="hljs-number">241</span>, <span class="hljs-number">300</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">200</span>, <span class="hljs-number">320</span>, <span class="hljs-number">160</span>, <span class="hljs-number">420</span>)<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">230</span>, <span class="hljs-number">420</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">245</span>, <span class="hljs-number">400</span>, <span class="hljs-number">250</span>, <span class="hljs-number">400</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">195</span>, <span class="hljs-number">420</span>, <span class="hljs-number">35</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br><br><span class="hljs-comment">// 右手</span><br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">559</span>, <span class="hljs-number">300</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">575</span>, <span class="hljs-number">295</span>, <span class="hljs-number">600</span>, <span class="hljs-number">250</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">625</span>, <span class="hljs-number">230</span>, <span class="hljs-number">655</span>, <span class="hljs-number">250</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">680</span>, <span class="hljs-number">330</span>, <span class="hljs-number">550</span>, <span class="hljs-number">400</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">556</span>, <span class="hljs-number">340</span>, <span class="hljs-number">559</span>, <span class="hljs-number">300</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br></code></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8c60f50e969f4902906167b585a149a3~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="爱心及肚肚上的冬奥会logo"><a href="#爱心及肚肚上的冬奥会logo" class="headerlink" title="爱心及肚肚上的冬奥会logo"></a>爱心及肚肚上的冬奥会logo</h3><p>爱心我利用<a href="https://juejin.cn/post/6844903881713909767">掘友已经实现了的代码</a>添加，而logo则利用canvas导入图片的方法实现。logo网上一搜就有。</p><blockquote><p>drawImage(img,sx,sy,swidth,sheight,x,y,width,height);</p><p>参数：要使用的图像,裁剪x,裁剪y,图像宽度,图像高度,放置点x,放置点y,使用图像宽度,使用图像高度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 爱心</span><br><span class="hljs-keyword">let</span> get_arr = <span class="hljs-keyword">function</span> (<span class="hljs-params">a, len</span>) &#123;<br>    <span class="hljs-keyword">let</span> arr = []<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>        <span class="hljs-keyword">let</span> step = (i / len) * (<span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>) <span class="hljs-comment">//递增的θ</span><br>        <span class="hljs-keyword">let</span> vector = &#123;<br>            <span class="hljs-attr">x</span>: a * (<span class="hljs-number">16</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sin</span>(step), <span class="hljs-number">3</span>)) + <span class="hljs-number">625</span>,<br>            <span class="hljs-attr">y</span>:<br>            -a *<br>            (<span class="hljs-number">13</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(step) -<br>             <span class="hljs-number">5</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-number">2</span> * step) -<br>             <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-number">3</span> * step) -<br>             <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">cos</span>(<span class="hljs-number">4</span> * step)) +<br>            <span class="hljs-number">275</span>,<br>        &#125;<br>        arr.<span class="hljs-title function_">push</span>(vector)<br>    &#125;<br>    <span class="hljs-keyword">return</span> arr<br>&#125;<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;red&#x27;</span><br>ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">1</span><br><span class="hljs-keyword">let</span> len = <span class="hljs-number">50</span><br><span class="hljs-keyword">let</span> arr = <span class="hljs-title function_">get_arr</span>(<span class="hljs-number">1</span>, <span class="hljs-number">50</span>)<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>    ctx.<span class="hljs-title function_">lineTo</span>(arr[i].<span class="hljs-property">x</span>, arr[i].<span class="hljs-property">y</span>) <span class="hljs-comment">//心形的点一一被描绘出来</span><br>&#125;<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#f00&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br><span class="hljs-comment">// logo</span><br><span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>img.<span class="hljs-property">onload</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">900</span>, <span class="hljs-number">900</span>, <span class="hljs-number">360</span>, <span class="hljs-number">440</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br>&#125;<br>img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;./logo.jpg&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26902f6dd54d4d0f8740344e7c6954f0~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="面部"><a href="#面部" class="headerlink" title="面部"></a>面部</h3><p>面部相对就比较简单了，都是规则图形或曲线，新知识点就是canvas的渐变填充方法。</p><blockquote><p>线性渐变：createLinearGradient(<em>x0,y0,x1,y1</em>)</p><p>参数：渐变开始点x,渐变开始点y,渐变结束点x,渐变结束点y</p></blockquote><blockquote><p>径向渐变：createRadialGradient(x0,y0,r0,x1,y1,r1)</p><p>参数：渐变开始圆心x,渐变开始圆心y,半径,渐变结束圆心x,渐变结束圆心y,半径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 彩虹🌈圈</span><br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">125</span>, <span class="hljs-number">95</span>, -<span class="hljs-number">0.06</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> grd = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">95</span>, <span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">130</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;#dddddd20&#x27;</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;#0000FF&#x27;</span>)<br>ctx.<span class="hljs-property">strokeStyle</span> = grd<br>ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">6</span><br>ctx.<span class="hljs-title function_">stroke</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">130</span>, <span class="hljs-number">95</span>, -<span class="hljs-number">0.12</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> grd = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">95</span>, <span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">130</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;#dddddd20&#x27;</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;#00FFFF66&#x27;</span>)<br>ctx.<span class="hljs-property">strokeStyle</span> = grd<br>ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span><br>ctx.<span class="hljs-title function_">stroke</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">130</span>, <span class="hljs-number">95</span>, <span class="hljs-number">0.06</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> grd = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">95</span>, <span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">130</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;#dddddd20&#x27;</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;#FFFF0066&#x27;</span>)<br>ctx.<span class="hljs-property">strokeStyle</span> = grd<br>ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">3</span><br>ctx.<span class="hljs-title function_">stroke</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">130</span>, <span class="hljs-number">95</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> grd = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">95</span>, <span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">130</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;#dddddd20&#x27;</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;#00FF0066&#x27;</span>)<br>ctx.<span class="hljs-property">strokeStyle</span> = grd<br>ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">3</span><br>ctx.<span class="hljs-title function_">stroke</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">130</span>, <span class="hljs-number">95</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> grd = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">95</span>, <span class="hljs-number">400</span>, <span class="hljs-number">300</span>, <span class="hljs-number">130</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;#dddddd20&#x27;</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;#8B00FF66&#x27;</span>)<br>ctx.<span class="hljs-property">strokeStyle</span> = grd<br>ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">4</span><br>ctx.<span class="hljs-title function_">stroke</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br></code></pre></td></tr></table></figure><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ebde97c3db546b98e714c845cc7e7a5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="眼鼻嘴"><a href="#眼鼻嘴" class="headerlink" title="眼鼻嘴"></a>眼鼻嘴</h3><blockquote><p>btw：眼鼻嘴这个标题一写出来我就没忍住开始唱</p><p>미안해 미안해 하지마</p><p>내가 초라해지잖아</p><p>好了收！</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 眼</span><br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">465</span>, <span class="hljs-number">275</span>, <span class="hljs-number">38</span>, <span class="hljs-number">26</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-title function_">ellipse</span>(<span class="hljs-number">335</span>, <span class="hljs-number">275</span>, <span class="hljs-number">43</span>, <span class="hljs-number">29</span>, -<span class="hljs-number">0.8</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">344</span>, <span class="hljs-number">272</span>, <span class="hljs-number">22</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">458</span>, <span class="hljs-number">270</span>, <span class="hljs-number">20</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#fff&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">344</span>, <span class="hljs-number">272</span>, <span class="hljs-number">17</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">458</span>, <span class="hljs-number">270</span>, <span class="hljs-number">15</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">344</span>, <span class="hljs-number">272</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> grd = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">344</span>, <span class="hljs-number">272</span>, <span class="hljs-number">0</span>, <span class="hljs-number">344</span>, <span class="hljs-number">272</span>, <span class="hljs-number">20</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;#444&#x27;</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;#111&#x27;</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = grd<br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">458</span>, <span class="hljs-number">270</span>, <span class="hljs-number">14</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br><span class="hljs-keyword">var</span> grd = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">458</span>, <span class="hljs-number">270</span>, <span class="hljs-number">0</span>, <span class="hljs-number">458</span>, <span class="hljs-number">270</span>, <span class="hljs-number">20</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;#444&#x27;</span>)<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;#111&#x27;</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = grd<br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">344</span>, <span class="hljs-number">272</span>, <span class="hljs-number">12</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">458</span>, <span class="hljs-number">270</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">350</span>, <span class="hljs-number">266</span>, <span class="hljs-number">4</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-title function_">arc</span>(<span class="hljs-number">452</span>, <span class="hljs-number">266</span>, <span class="hljs-number">3</span>, <span class="hljs-number">0</span>, <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#fff&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br><span class="hljs-comment">// 鼻子</span><br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">380</span>, <span class="hljs-number">280</span>)<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">420</span>, <span class="hljs-number">280</span>)<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">400</span>, <span class="hljs-number">295</span>)<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">380</span>, <span class="hljs-number">280</span>)<br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br><span class="hljs-comment">// 嘴</span><br>ctx.<span class="hljs-title function_">beginPath</span>()<br>ctx.<span class="hljs-title function_">moveTo</span>(<span class="hljs-number">370</span>, <span class="hljs-number">323</span>)<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">400</span>, <span class="hljs-number">335</span>)<br>ctx.<span class="hljs-title function_">lineTo</span>(<span class="hljs-number">430</span>, <span class="hljs-number">323</span>)<br>ctx.<span class="hljs-title function_">quadraticCurveTo</span>(<span class="hljs-number">400</span>, <span class="hljs-number">330</span>, <span class="hljs-number">370</span>, <span class="hljs-number">323</span>)<br>ctx.<span class="hljs-property">strokeStyle</span> = <span class="hljs-string">&#x27;#000&#x27;</span><br>ctx.<span class="hljs-property">lineWidth</span> = <span class="hljs-number">2</span><br>ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;#f00&#x27;</span><br>ctx.<span class="hljs-title function_">fill</span>()<br>ctx.<span class="hljs-title function_">stroke</span>()<br>ctx.<span class="hljs-title function_">closePath</span>()<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/415712400e39484eb0ff1c5a68c77ffc~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>我本来想要给整个冰墩墩描个黑边，画出透明外套的感觉，因为觉得透明外套是冰墩墩的灵魂，但是我一直没找到一个好的方式来绘，如果有大神能够指导或提点一下老弟的话我实在是感激不尽！</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「新春创意」快打开摄像头召唤属于你的虎年吉祥物🐅</title>
    <link href="/2022/01/16/%E3%80%8C%E6%96%B0%E6%98%A5%E5%88%9B%E6%84%8F%E3%80%8D%E5%BF%AB%E6%89%93%E5%BC%80%E6%91%84%E5%83%8F%E5%A4%B4%E5%8F%AC%E5%94%A4%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E8%99%8E%E5%B9%B4%E5%90%89%E7%A5%A5%E7%89%A9%F0%9F%90%85/"/>
    <url>/2022/01/16/%E3%80%8C%E6%96%B0%E6%98%A5%E5%88%9B%E6%84%8F%E3%80%8D%E5%BF%AB%E6%89%93%E5%BC%80%E6%91%84%E5%83%8F%E5%A4%B4%E5%8F%AC%E5%94%A4%E5%B1%9E%E4%BA%8E%E4%BD%A0%E7%9A%84%E8%99%8E%E5%B9%B4%E5%90%89%E7%A5%A5%E7%89%A9%F0%9F%90%85/</url>
    
    <content type="html"><![CDATA[<h2 id="实现效果"><a href="#实现效果" class="headerlink" title="实现效果"></a>实现效果</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d426b51ec3024dc6b5194854b35cca27~tplv-k3u1fbpfcp-watermark.image" alt="7.gif"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一篇简单实现了一下支付宝写福字的效果，当时就有一个想法，能不能实现支付宝的扫福呢，查找了许多资料后发现单靠前端还是无法实现，于是我换了个思路，利用 ar 去扫福，召唤虎年吉祥物。本文实现效果也许很 low，但旨在抛砖引玉，希望各路大神能让我大开眼界（春节企划的文章都挺 nb 的……发现大家脑洞和实力简直太强了）</p><p>实现的技术路线：<code>AR.js</code> + <code>A-Frame</code> + <code>artoolkit</code> + <code>obj2gltf</code></p><h2 id="关于-AR-js-与-A-Frame"><a href="#关于-AR-js-与-A-Frame" class="headerlink" title="关于 AR.js 与 A Frame"></a>关于 AR.js 与 A Frame</h2><p>首先简单介绍一下 AR.js 和 A-Frame，因为后续看似很少的代码中其实 A-Frame 帮我们做了很多事情，这个后面再说。</p><h3 id="AR-js"><a href="#AR-js" class="headerlink" title="AR.js"></a>AR.js</h3><p>AR.js 是一个轻量级的增强现实类 JavaScript 库，支持基于标记和位置的增强现实。AR.js 框架包括跨浏览器兼容性，并且支持 WebGL 和 WebRTC，这意味着它可以在 iOS 11 以上的 Android 和 iPhone 设备上正常工作。通过包装许多不同的 AR 框架，包括 three.js，a-frame 和 ARToolKit，AR.js 使得将 AR 引入 Web 应用程序变得更加简单高效。它具有以下优点：</p><ul><li><p>跨浏览器兼容性</p></li><li><p>即使在较旧的设备上也可以达到 60fps 的高性能</p></li><li><p>基于 Web，无需安装</p></li><li><p>开源，可免费访问</p></li><li><p>使用 WebGL 和 WebRTC 在所有移动设备上均可使用</p></li><li><p>无需额外或不常见的硬件</p></li><li><p>可以用不到 10 行 HTML 来完成</p></li></ul><h3 id="A-Frame"><a href="#A-Frame" class="headerlink" title="A-Frame"></a>A-Frame</h3><p>A-Frame 是一个用来构建虚拟现实（VR）应用的网页开发框架。由 WebVR 的发起人 Mozilla VR 团队所开发，是当下用来开发 WebVR 内容主流技术方案。WebVR 是一个完全开源的项目，已成长为领先的 VR 社区。</p><p>A-Frame 基于 HTML，容易上手。但是 A-Frame 不仅仅是一个 3D 场景渲染引擎或者一个标记语言。其核心思想是基于 Three.js 来提供一个声明式、可扩展以及组件化的编程结构。</p><p>A-Frame 让我们能够在纯 html 中使用组件式的标签来快速开发，下边贴上基本代码，用 vue 的兄弟会觉得很舒服：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://aframe.io/releases/1.1.0/aframe.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br> <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">a-scene</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a-box</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;-1 0.5 -3&quot;</span> <span class="hljs-attr">rotation</span>=<span class="hljs-string">&quot;0 45 0&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#4CC3D9&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a-box</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a-sphere</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;0 1.25 -5&quot;</span> <span class="hljs-attr">radius</span>=<span class="hljs-string">&quot;1.25&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#EF2D5E&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a-sphere</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a-cylinder</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;1 0.75 -3&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">    <span class="hljs-attr">radius</span>=<span class="hljs-string">&quot;0.5&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"><span class="hljs-attr">height</span>=<span class="hljs-string">&quot;1.5&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">    <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#FFC65D&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">   &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a-cylinder</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a-plane</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">    <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;0 0 -4&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">    <span class="hljs-attr">rotation</span>=<span class="hljs-string">&quot;-90 0 0&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">    <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;4&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">    <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;4&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">    <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#7BC8A4&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">   &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a-plane</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">a-sky</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#ECECEC&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a-sky</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">a-scene</span>&gt;</span><br><br> <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>总结一下 A-Frame 的特性：</p><ul><li><p>简化 VR 制作: 只需要引入 <code>&lt;script&gt;</code> 标签 和 <code>&lt;a-scene&gt;</code>，A-Frame 将自动生成 3D 渲染的样板代码，VR 相关设置和缺省的交互控制。不需要安装任何东西也无需编译构建。</p></li><li><p>声明式 HTML: HTML 很容易阅读，理解和复制粘贴。</p></li><li><p>实体-组件架构: A-Frame 基于强大的 three.js 框架, 同时提供声明式、组件化、可复用的实体组件结构。HTML 只是冰山的一角，开发者可以自由的使用 JavaScript、DOM API，Three.js，WebVR，和 WebGL。</p></li><li><p>高性能: A-Frame 从底层对 WebVR 做了优化，尽管 A-Frame 使用 DOM，但其元素并不接触浏览器的布局引擎。3D 对象的更新全部在低开销内存中通过单个 requestAnimationFrame 来调用，甚至能够像本地应用一样来运行 (90+ FPS)。</p></li><li><p>工具无关性: 由于是构建在 HTML 之上，所以 A-Frame 和大多数开发库、框架和工具如 React, Vue.js, Angular, d3.js, Ember.js, jQuery 兼容。</p></li></ul><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="前置资源准备"><a href="#前置资源准备" class="headerlink" title="前置资源准备"></a>前置资源准备</h3><p>首先准备好<code>aframe</code>及其继承了 ar 和 nft 的 js 文件（可以从我的项目中取），一个用来扫的图片（<strong>图片的要素尽量多，jpg 格式，长宽一致</strong>）以及一个识别后召唤的吉祥物模型（obj 格式或 gltf 格式）。</p><h4 id="标志图片"><a href="#标志图片" class="headerlink" title="标志图片"></a>标志图片</h4><p>首先我们需要对图片处理一下，因为我们识别的是自然图片所以需要利用<code>artoolkit</code>（项目代码中有安装包）对图片进行特征点提取，特征点越多识别的越准确，这也是为什么我提醒要选择要素多的图片。</p><p>artoolkit 安装后的文件目录为<code>C:\Program Files (x86)\ARToolKit5</code>，我们进入<code>bin</code>目录，添加一个<code>image</code>文件夹，将我们选择的图片放进去，接着在<code>bin</code>目录下打开终端，输入命令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">$ genTexData.exe 图片相对路径<br><br></code></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/98e2e17194d243dcaf6dd44f5d4cd5d1~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>接着回车两次，这两步是选择提取图片特征的程度，数值越大提取的特征越多。当相机离图片越近的时候，追踪效果会越好。此处使用默认值。</p><p>接下来需要选择最大最小分辨率，根据不同相机分辨率及相机远近有不同取值，一般使用20到120最为合适。而我们这边最大分辨率只有96，所以我选择20到96。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5952b0a8fa13431b96580410b540860a~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>接着回车，等待生成特征点，图片目录下会生成<code>.fset</code>,<code>.fset3</code>,<code>.iset</code>三个文件，这些文件就是我们需要的。</p><p>我们使用 dispFeatureSet 工具可以显示一下看看特征点提取情况：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/370d8899d9054b71ad6663a87429c576~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="吉祥物模型"><a href="#吉祥物模型" class="headerlink" title="吉祥物模型"></a>吉祥物模型</h4><p>模型就在网上找免费的模型就好，如果模型是 glTF 格式是最完美的，其他格式需要转换成模型的通用 obj 格式，然后利用 obj2gltf 工具（代码仓库中提供）将其转换成 gltf 模式。</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node bin/obj2gltf.js -i obj模型路径 -o 输出路径/输出模型名.gltf<br></code></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>首先我们利用 a-scene 搭建出一个场景，开启<code>arjs</code>，<code>gesture-detector</code>手势检测，<code>vr-mode-ui=&quot;enabled: false;&quot;</code>不展示 vr 按钮，并放置一个相机组件用来调用我们的设备摄像头。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a-scene</span> <span class="hljs-attr">arjs</span> <span class="hljs-attr">vr-mode-ui</span>=<span class="hljs-string">&quot;enabled: false;&quot;</span> <span class="hljs-attr">gesture-detector</span>&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">a-entity</span> <span class="hljs-attr">camera</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a-entity</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">a-scene</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来将我们生成的模型、图片及其特征文件放到项目目录中，并使用 nft 组件并进行相应配置：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a-nft</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;nft&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag"> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;./assets/2&quot;</span></span><br><span class="hljs-tag"></span><br><span class="hljs-tag">&gt;</span><br><br> <span class="hljs-tag">&lt;<span class="hljs-name">a-entity</span> <span class="hljs-attr">gltf-model</span>=<span class="hljs-string">&quot;./assets/tiger.gltf&quot;</span> <span class="hljs-attr">scale</span>=<span class="hljs-string">&quot;1 1 1&quot;</span> <span class="hljs-attr">position</span>=<span class="hljs-string">&quot;0 0 0&quot;</span>&gt;</span><br><br> <span class="hljs-tag">&lt;/<span class="hljs-name">a-entity</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">a-nft</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>注意nft的url中写的是图片的名，不需要后缀，在它里面添加我们识别后想要展示的模型，并设置放大级别和位置。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>到这里其实这个代码就完成了，我们兴致勃勃的对项目开启live-server，用手机访问一下页面。</p><p>咦，为什么提示我们的浏览器没有<code>navigator.mediaDevices</code>，百度了一下发现，浏览器端想要调用摄像头只有几种情况：</p><ul><li><p>file</p></li><li><p>localhost</p></li><li><p>https</p></li></ul><p>那我们如果在本地该怎么调试呢，这里介绍一个一直在用的内网穿透神器：ngrok（安装包也放在仓库中了）</p><p>解压打开后执行ngrok http 8080，第一次需要注册账号并绑定Authtoken，绑定完成后重启ngrok再执行。成功后会返回给你三个地址，本地、http和https的url路径，我们使用https的即可。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/002c45711e124719b383e1df70656fa4~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>手机访问地址后就可以开启摄像头权限了。</p><blockquote><p>因为是内网穿透，所以打开页面及识别加载都会比较慢。</p></blockquote><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>关于识别的图片，我作为一个前端认为如果想识别通用的福字应该是需要进行模型训练的，但是我不会，所以就改成了识别自然图片，期待大佬们的完善。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>AR.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「新春创意」用喜庆的音乐送自己一场音乐烟花show🎊🎊</title>
    <link href="/2022/01/10/%E3%80%8C%E6%96%B0%E6%98%A5%E5%88%9B%E6%84%8F%E3%80%8D%E7%94%A8%E5%96%9C%E5%BA%86%E7%9A%84%E9%9F%B3%E4%B9%90%E9%80%81%E8%87%AA%E5%B7%B1%E4%B8%80%E5%9C%BA%E9%9F%B3%E4%B9%90%E7%83%9F%E8%8A%B1show%F0%9F%8E%8A%F0%9F%8E%8A/"/>
    <url>/2022/01/10/%E3%80%8C%E6%96%B0%E6%98%A5%E5%88%9B%E6%84%8F%E3%80%8D%E7%94%A8%E5%96%9C%E5%BA%86%E7%9A%84%E9%9F%B3%E4%B9%90%E9%80%81%E8%87%AA%E5%B7%B1%E4%B8%80%E5%9C%BA%E9%9F%B3%E4%B9%90%E7%83%9F%E8%8A%B1show%F0%9F%8E%8A%F0%9F%8E%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>继<a href="https://juejin.cn/post/7051372704787595277">写个福字送给新年的自己</a>后，为了让新春氛围更加浓厚，必不可少的就是烟花和 BGM 了，这篇文章我们就利用 p5.js 实现一个根据音乐来绽放烟花，为新春增色添彩~</p><h2 id="效果预览"><a href="#效果预览" class="headerlink" title="效果预览"></a>效果预览</h2><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b925f83d24f54322bbd7257581f04134~tplv-k3u1fbpfcp-watermark.image" alt="6.gif"></p><h2 id="什么是-p5-js"><a href="#什么是-p5-js" class="headerlink" title="什么是 p5.js"></a>什么是 p5.js</h2><blockquote><p>官网：p5.js 是个 JavaScript 创意编程程式库，其专注在让编程更易于使用及更加广泛的包容艺术家、设计师、教育家、初学者以及任何其他人！p5.js 是个免费及开源的软件因为我们相信所有人都应该能自由使用软件及用于学习软件的工具。p5.js 使用绘图的比喻并有一副完整的绘画功能。除此之外，您也不单限于您的绘图画布。您可以将您整个浏览器页面当作您的绘图，这包括了 HTML5 物件如文字、输入框、视屏、摄像头及音频。</p></blockquote><p>简单来说，p5.js 可以利用 canvas 实现许许多多炫酷的浏览器效果，以及在浏览器中进行绘图。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先我们先引用 p5 的 cdn，因为我们要利用音频相关功能，所以再引用它的扩展包 p5.sound</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/p5.js/1.4.0/p5.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://cdn.bootcdn.net/ajax/libs/p5.js/1.4.0/addons/p5.sound.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接下来我们首先实现烟花的部分，然后再将音乐与烟花结合起来</p><h3 id="创建画布"><a href="#创建画布" class="headerlink" title="创建画布"></a>创建画布</h3><p>p5 的写法与一般情况不同，js 中直接定义 setup 函数即可实现初始化,draw 函数则用来对画布进行绘制：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">createCanvas</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">background</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>在 vue 中如果想要定义 setup 函数则需要使用另一种声明方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">s</span> = (<span class="hljs-params">sketch</span>) =&gt; &#123;<br>  sketch.<span class="hljs-property">setup</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">createCanvas</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>)<br>  &#125;<br>  sketch.<span class="hljs-property">draw</span> = <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-title function_">background</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在本文中我们直接在 html 中编写代码所以采用第一种方式。</p><h3 id="创建烟花"><a href="#创建烟花" class="headerlink" title="创建烟花"></a>创建烟花</h3><p>这里我们模拟的烟花由一个中心点和围绕在周围的随机点构成。 具体代码作用和含义在注释中标注</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 目前接收一个爆炸半径参数。</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fireworks</span>(<span class="hljs-params">radius</span>) &#123;<br>  <span class="hljs-keyword">var</span> num = <span class="hljs-number">64</span> <span class="hljs-comment">// 一个烟花有多少个点</span><br><br>  <span class="hljs-comment">// 随机中心点位置，width和height为画布的宽高。</span><br>  <span class="hljs-keyword">var</span> cp = <span class="hljs-keyword">new</span> p5.<span class="hljs-title class_">Vector</span>(<br>    <span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>, width),<br>    <span class="hljs-title function_">random</span>(height / <span class="hljs-number">2</span>, height / <span class="hljs-number">5</span>),<br>    <span class="hljs-title function_">random</span>(-<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br>  )<br><br>  <span class="hljs-comment">// 定义烟花发射的速度和加速度，目前高度写死，后续会根据音频相关数据进行动态修改。</span><br>  <span class="hljs-keyword">var</span> velocity = <span class="hljs-keyword">new</span> p5.<span class="hljs-title class_">Vector</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">15</span>, <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">var</span> accel = <span class="hljs-keyword">new</span> p5.<span class="hljs-title class_">Vector</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0</span>)<br><br>  <span class="hljs-keyword">var</span> img<br><br>  <span class="hljs-keyword">var</span> fp = []<br><br>  <span class="hljs-keyword">var</span> cosTheta<br>  <span class="hljs-keyword">var</span> sinTheta<br>  <span class="hljs-keyword">var</span> phi<br>  <span class="hljs-keyword">var</span> colorChange = <span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)<br><br>  <span class="hljs-comment">// 初始化烟花的点</span><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>    cosTheta = <span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> - <span class="hljs-number">1</span><br>    sinTheta = <span class="hljs-title function_">sqrt</span>(<span class="hljs-number">1</span> - cosTheta * cosTheta)<br>    phi = <span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>) * <span class="hljs-number">2</span> * <span class="hljs-variable constant_">PI</span><br>    fp[i] = <span class="hljs-keyword">new</span> p5.<span class="hljs-title class_">Vector</span>(<br>      radius * sinTheta * <span class="hljs-title function_">cos</span>(phi),<br>      radius * sinTheta * <span class="hljs-title function_">sin</span>(phi),<br>      radius * cosTheta<br>    ) <span class="hljs-comment">//1发烟花里各个点的位置计算</span><br>    fp[i] = p5.<span class="hljs-property">Vector</span>.<span class="hljs-title function_">mult</span>(fp[i], <span class="hljs-number">1.01</span>)<br>  &#125;<br><br>  <span class="hljs-comment">// 为烟花进行随机上色</span><br>  <span class="hljs-keyword">var</span> side = <span class="hljs-number">64</span><br>  <span class="hljs-keyword">var</span> center = side / <span class="hljs-number">2.0</span><br><br>  img = <span class="hljs-title function_">createImage</span>(side, side)<br>  img.<span class="hljs-title function_">loadPixels</span>()<br>  <span class="hljs-keyword">const</span> r = <span class="hljs-title function_">random</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.8</span>)<br>  <span class="hljs-keyword">const</span> g = <span class="hljs-title function_">random</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.8</span>)<br>  <span class="hljs-keyword">const</span> b = <span class="hljs-title function_">random</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.8</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> y = <span class="hljs-number">0</span>; y &lt; side; y++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>; x &lt; side; x++) &#123;<br>      <span class="hljs-keyword">var</span> distance = (<span class="hljs-title function_">sq</span>(center - x) + <span class="hljs-title function_">sq</span>(center - y)) / <span class="hljs-number">10.0</span><br>      <span class="hljs-keyword">var</span> r = <span class="hljs-title function_">int</span>((<span class="hljs-number">255</span> * r) / distance)<br>      <span class="hljs-keyword">var</span> g = <span class="hljs-title function_">int</span>((<span class="hljs-number">255</span> * g) / distance)<br>      <span class="hljs-keyword">var</span> b = <span class="hljs-title function_">int</span>((<span class="hljs-number">255</span> * b) / distance)<br>      <span class="hljs-comment">// img.pixels[x + y * side] = color(r, g, b);</span><br>      img.<span class="hljs-title function_">set</span>(y, x, <span class="hljs-title function_">color</span>(r, g, b))<br>    &#125;<br>  &#125;<br><br>  img.<span class="hljs-title function_">updatePixels</span>()<br><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">display</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; num; i++) &#123;<br>      <span class="hljs-title function_">push</span>()<br>      <span class="hljs-title function_">translate</span>(cp.<span class="hljs-property">x</span>, cp.<span class="hljs-property">y</span>, cp.<span class="hljs-property">z</span>)<br>      <span class="hljs-title function_">translate</span>(fp[i].<span class="hljs-property">x</span>, fp[i].<span class="hljs-property">y</span>, fp[i].<span class="hljs-property">z</span>)<br>      <span class="hljs-title function_">blendMode</span>(<span class="hljs-variable constant_">ADD</span>) <span class="hljs-comment">//各个小点（发光源遮罩效果）</span><br>      <span class="hljs-title function_">image</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br>      <span class="hljs-title function_">pop</span>()<br><br>      fp[i] = p5.<span class="hljs-property">Vector</span>.<span class="hljs-title function_">mult</span>(fp[i], <span class="hljs-number">1.015</span>) <span class="hljs-comment">//更新小点（发光源）扩散位置</span><br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">//模拟重力加速度</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">update</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    radius = <span class="hljs-title function_">dist</span>(<br>      <span class="hljs-number">0</span>,<br>      <span class="hljs-number">0</span>,<br>      <span class="hljs-number">0</span>,<br>      fp[<span class="hljs-number">0</span>].<span class="hljs-property">x</span>,<br>      fp[<span class="hljs-number">0</span>].<span class="hljs-property">y</span>,<br>      fp[<span class="hljs-number">0</span>].<span class="hljs-property">z</span><br>    )<br>    centerPosition.<span class="hljs-title function_">add</span>(velocity)<br>    velocity.<span class="hljs-title function_">add</span>(accel)<br>  &#125;<br><br>  <span class="hljs-comment">//   判断是否需要销毁</span><br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">needRemove</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (centerPosition.<span class="hljs-property">y</span> - radius &gt; height) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在基本的烟花类已经被定义好了，我们可以给画布绑定一个键盘事件，并修改 draw 函数中相关逻辑来看一下效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">keyPressed</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//键盘事件添加一发烟花</span><br>  fireworks.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fireworks</span>(<span class="hljs-number">20</span>)) <span class="hljs-comment">//80为烟花初始半径</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title function_">background</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>)<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; fireworks.<span class="hljs-property">length</span>; i++) &#123;<br>    fireworks[i].<span class="hljs-title function_">display</span>()<br>    fireworks[i].<span class="hljs-title function_">update</span>()<br>    <span class="hljs-keyword">if</span> (fireworks[i].<span class="hljs-title function_">needRemove</span>()) &#123;<br>      fireworks.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/043e880dbae54477a802eb3f369efdae~tplv-k3u1fbpfcp-watermark.image" alt="7.gif"></p><p><strong>相关 API</strong></p><p>这里将上述用到的相关 api 和类 单列出来方便查看</p><table><thead><tr><th>API</th><th>描述</th></tr></thead><tbody><tr><td>createCanvas</td><td>创建画布</td></tr><tr><td>background</td><td>设置背景色</td></tr><tr><td>p5.Vector</td><td>创建包含幅度和方向的新 p5 向量</td></tr><tr><td>random</td><td>返回在作为参数给出的范围之间的随机浮点数</td></tr><tr><td>sqrt</td><td>获取任何输入数字的平方根</td></tr><tr><td>createImage</td><td>创建图片</td></tr><tr><td>translate</td><td>指定在显示窗口内放置对象的数量 x 参数用于指定左/右平移 y 参数用于指定上/下平移</td></tr><tr><td>blendMode</td><td>根据给定的混合模式混合两个像素</td></tr><tr><td>dist</td><td>测量计算在 2D 或 3D 中两点之间的距离</td></tr></tbody></table><h3 id="获取音频参数"><a href="#获取音频参数" class="headerlink" title="获取音频参数"></a>获取音频参数</h3><p>首先我们需要添加一个<code>audio</code>标签来存放我们的音乐</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">audio</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./1.mp3&quot;</span> <span class="hljs-attr">autoplay</span> <span class="hljs-attr">controls</span>&gt;</span>您的浏览器不支持 audio 标签。<span class="hljs-tag">&lt;/<span class="hljs-name">audio</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着改造我们的 setup 函数，让它能够获取到我们的音频资源</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fireworks = []<br><span class="hljs-keyword">var</span> highMap = [<span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>]<br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">ORI_NUM</span> = <span class="hljs-number">32</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//processing初始化设置</span><br>  <span class="hljs-title function_">createCanvas</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>)<br>  <span class="hljs-title function_">frameRate</span>(<span class="hljs-number">60</span>) <span class="hljs-comment">// 每秒渲染次数</span><br>  <span class="hljs-title function_">imageMode</span>(<span class="hljs-variable constant_">CENTER</span>)<br>  audioContext_ = <span class="hljs-title function_">getAudioContext</span>()<br>  <span class="hljs-comment">//取得声音dom</span><br>  <span class="hljs-keyword">let</span> el = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;audio&#x27;</span>)<br>  <span class="hljs-comment">//根据声音dom创建web audio API source node, 并且连接主输出</span><br>  <span class="hljs-keyword">const</span> source = audioContext_.<span class="hljs-title function_">createMediaElementSource</span>(el)<br>  source.<span class="hljs-title function_">connect</span>(p5.<span class="hljs-property">soundOut</span>)<br>  <span class="hljs-comment">//0.8是变化程度，越小图案越抖</span><br>  fft = <span class="hljs-keyword">new</span> p5.<span class="hljs-title function_">FFT</span>(<span class="hljs-number">0.8</span>, <span class="hljs-variable constant_">ORI_NUM</span>)<br>  fft.<span class="hljs-title function_">setInput</span>(source)<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们获取了音频资源的频谱，未来用来控制我们烟花的大小以及高度。当然 p5.sound 还可以获取音频的音量等等，以实现更炫酷的可视化效果。</p><p>接下来我们改造 draw 绘制函数，解析本地音频的频谱并利用它来搞事情</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">draw</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">//循环执行，达成画面渲染效果</span><br><br>  audioContext_.<span class="hljs-title function_">resume</span>()<br>  <span class="hljs-title function_">background</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">20</span>)<br>  <span class="hljs-keyword">let</span> spectrum = fft.<span class="hljs-title function_">analyze</span>()<br><br>  spectrum.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item, j</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span> (item !== <span class="hljs-number">0</span> &amp;&amp; j % <span class="hljs-number">2</span>) &#123;<br>      <span class="hljs-keyword">let</span> a = highMap[<span class="hljs-number">0</span>]<br>      <span class="hljs-keyword">if</span> (item &gt;= <span class="hljs-number">64</span> &amp;&amp; item &lt; <span class="hljs-number">128</span>) &#123;<br>        a = highMap[<span class="hljs-number">1</span>]<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (item &gt;= <span class="hljs-number">128</span> &amp;&amp; item &lt; <span class="hljs-number">192</span>) &#123;<br>        a = highMap[<span class="hljs-number">2</span>]<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        a = highMap[<span class="hljs-number">3</span>]<br>      &#125;<br>      <span class="hljs-keyword">const</span> fire = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fireworks</span>(item, a)<br>      fireworks.<span class="hljs-title function_">push</span>(fire)<br>      <span class="hljs-keyword">if</span> (fireworks.<span class="hljs-property">length</span> &gt; <span class="hljs-number">64</span>) &#123;<br>        fireworks.<span class="hljs-title function_">shift</span>()<br>      &#125;<br>    &#125;<br>  &#125;)<br><br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; fireworks.<span class="hljs-property">length</span>; i++) &#123;<br>    fireworks[i].<span class="hljs-title function_">display</span>()<br>    fireworks[i].<span class="hljs-title function_">update</span>()<br>    <span class="hljs-keyword">if</span> (fireworks[i].<span class="hljs-title function_">needRemove</span>()) &#123;<br>      fireworks.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注意<code>audioContext_.resume()</code>是必须要添加的，因为谷歌浏览器默认不会自动播放音频。</p></blockquote><p>spectrum 就是我们分析得到的频谱数值组成的数组，ORI_NUM 作为频谱的个数，最少需要 32 个。我们理论上可以放更多的烟花，但是由于本人电脑性能一般，所以直接取 16 个来放烟花。</p><p>代码中我们可以看到，Fireworks 类我们传了两个参数：频谱的值和我们定义的高度值，现在就可以对烟花类改造，以实现根据音频来控制烟花的爆炸半径和发射高度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Fireworks</span>(<span class="hljs-params">radius, h</span>) &#123;<br>  <span class="hljs-keyword">var</span> num = <span class="hljs-number">64</span> <span class="hljs-comment">//一发烟花里，有多少个点 (比较吃机器)</span><br><br>  <span class="hljs-keyword">var</span> cp = <span class="hljs-keyword">new</span> p5.<span class="hljs-title class_">Vector</span>(<br>    <span class="hljs-title function_">random</span>(<span class="hljs-number">0</span>, width),<br>    <span class="hljs-title function_">random</span>(height / <span class="hljs-number">2</span>, height / <span class="hljs-number">5</span>),<br>    <span class="hljs-title function_">random</span>(-<span class="hljs-number">100</span>, <span class="hljs-number">100</span>)<br>  ) <span class="hljs-comment">//烟花的中心位置</span><br>  <span class="hljs-keyword">var</span> velocity = <span class="hljs-keyword">new</span> p5.<span class="hljs-title class_">Vector</span>(<span class="hljs-number">0</span>, -h, <span class="hljs-number">0</span>)<br>  <span class="hljs-keyword">var</span> accel = <span class="hljs-keyword">new</span> p5.<span class="hljs-title class_">Vector</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0.4</span>, <span class="hljs-number">0</span>)<br><br>  ……<br>&#125;<br></code></pre></td></tr></table></figure><p>为了效果更真实，我们优化一下烟花的随机颜色，让它更亮</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (colorChange &gt;= <span class="hljs-number">3.5</span>) &#123;<br>  img = <span class="hljs-title function_">makeColor</span>(<span class="hljs-number">0.9</span>, <span class="hljs-title function_">random</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>), <span class="hljs-title function_">random</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>))<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colorChange &gt; <span class="hljs-number">3.2</span>) &#123;<br>  img = <span class="hljs-title function_">makeColor</span>(<span class="hljs-title function_">random</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>), <span class="hljs-number">0.9</span>, <span class="hljs-title function_">random</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>))<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (colorChange &gt; <span class="hljs-number">2</span>) &#123;<br>  img = <span class="hljs-title function_">makeColor</span>(<span class="hljs-title function_">random</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>), <span class="hljs-title function_">random</span>(<span class="hljs-number">0.2</span>, <span class="hljs-number">0.5</span>), <span class="hljs-number">0.9</span>)<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  img = <span class="hljs-title function_">makeColor</span>(<span class="hljs-title function_">random</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.8</span>), <span class="hljs-title function_">random</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.8</span>), <span class="hljs-title function_">random</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.8</span>))<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">makeColor</span>(<span class="hljs-params">rr, gg, bb</span>) &#123;<br>  <span class="hljs-keyword">var</span> side = <span class="hljs-number">64</span><br>  <span class="hljs-keyword">var</span> center = side / <span class="hljs-number">2.0</span><br><br>  <span class="hljs-keyword">var</span> img = <span class="hljs-title function_">createImage</span>(side, side)<br>  img.<span class="hljs-title function_">loadPixels</span>()<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> y = <span class="hljs-number">0</span>; y &lt; side; y++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>; x &lt; side; x++) &#123;<br>      <span class="hljs-keyword">var</span> distance = (<span class="hljs-title function_">sq</span>(center - x) + <span class="hljs-title function_">sq</span>(center - y)) / <span class="hljs-number">10.0</span><br>      <span class="hljs-keyword">var</span> r = <span class="hljs-title function_">int</span>((<span class="hljs-number">255</span> * rr) / distance)<br>      <span class="hljs-keyword">var</span> g = <span class="hljs-title function_">int</span>((<span class="hljs-number">255</span> * gg) / distance)<br>      <span class="hljs-keyword">var</span> b = <span class="hljs-title function_">int</span>((<span class="hljs-number">255</span> * bb) / distance)<br>      <span class="hljs-comment">// img.pixels[x + y * side] = color(r, g, b);</span><br>      img.<span class="hljs-title function_">set</span>(y, x, <span class="hljs-title function_">color</span>(r, g, b))<br>    &#125;<br>  &#125;<br><br>  img.<span class="hljs-title function_">updatePixels</span>()<br>  <span class="hljs-keyword">return</span> img<br>&#125;<br></code></pre></td></tr></table></figure><p>效果就如文章开头那样绚烂多彩。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>至此音乐烟花就实现了，而 p5.js 也是我不经意间发现的一个库，发现用它可以做出各种强大的动画。本以为我会是第一个用 p5,js 来实现效果的人，而就在我把这个 demo 写出来的第二天，活动的第一天，就读到了北京哥的<a href="https://juejin.cn/post/7051353946052362277">一场烟花盛宴 🎇，祝你新年快乐 🎉</a>，实现思路不同，效果我觉得北京哥的也更美观真实~，心痛哈哈哈哈做不了第一那做个……第n也不错。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>p5.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>「新春创意」写个福字送给新年的自己吧！</title>
    <link href="/2022/01/10/%E3%80%8C%E6%96%B0%E6%98%A5%E5%88%9B%E6%84%8F%E3%80%8D%E5%86%99%E4%B8%AA%E7%A6%8F%E5%AD%97%E9%80%81%E7%BB%99%E6%96%B0%E5%B9%B4%E7%9A%84%E8%87%AA%E5%B7%B1%E5%90%A7%EF%BC%81/"/>
    <url>/2022/01/10/%E3%80%8C%E6%96%B0%E6%98%A5%E5%88%9B%E6%84%8F%E3%80%8D%E5%86%99%E4%B8%AA%E7%A6%8F%E5%AD%97%E9%80%81%E7%BB%99%E6%96%B0%E5%B9%B4%E7%9A%84%E8%87%AA%E5%B7%B1%E5%90%A7%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我又双叒来参加活动了，新年新气象，作为新年的第一篇文章，必须福气满满，给自己一个好兆头（读书笔记暂时鸽一下，哈哈哈哈）。不知道jym还记不记得去年支付宝的一个写福字的活动，我当时还写了一个自认为很好看的福呢。</p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fed104db39d84e0b915c72a33361303d~tplv-k3u1fbpfcp-watermark.image?" alt="" width="175" height="360" align="bottom" /><p>前几天突发奇想，身为一个前端人为什么不能自己做一个呢？说干就干！</p><h2 id="怎么实现"><a href="#怎么实现" class="headerlink" title="怎么实现"></a>怎么实现</h2><p>美其名曰写福，其实就是在浏览器绘制，我们很容易就能想到用canvas实现。我们只需要用canvas捕捉鼠标移动轨迹并将其绘制出来就能实现这样的效果（实现的时候发现是我想的太简单了……）。这就需要我们对canvas的api有足够的了解，这里就不介绍了，想了解的百度一下你就知道~</p><h2 id="V1-0实现"><a href="#V1-0实现" class="headerlink" title="V1.0实现"></a>V1.0实现</h2><p>首先我们肯定需要一个canvas，为了方便观察，给它加上一个背景色：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;canvas <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attribute">style</span>=<span class="hljs-string">&quot;background:#ffffcc&quot;</span> <span class="hljs-attribute">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attribute">height</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;&lt;/canvas&gt;<br></code></pre></td></tr></table></figure><p>接下来我们需要定义几个变量并开始实现效果：</p><ul><li>moveFlag&lt;Boolean&gt;：开始绘制的标志</li><li>offset&lt;Object&gt;：鼠标的当前位置</li><li>posList&lt;Array&gt;：鼠标运动的位置集合</li></ul><p>绘制出来的线实质上是一个个点的集合，所以我们需要对鼠标运动过的位置加以记录。</p><p>首先我们需要定义画笔的颜色并对canvas绑定上鼠标相关事件（移动端可调整为touch相关事件，这里不做编写）。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">var</span> moveFlag = false<br><span class="hljs-selector-tag">var</span> offset = &#123;&#125;,<br>    posList = <span class="hljs-selector-attr">[]</span> <br><br><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">canvas</span> = document<span class="hljs-selector-class">.getElementById</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>)<br><span class="hljs-selector-tag">var</span> ctx = <span class="hljs-selector-tag">canvas</span><span class="hljs-selector-class">.getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)<br>ctx<span class="hljs-selector-class">.fillStyle</span> = <span class="hljs-string">&#x27;rgba(0,0,0,0.3)&#x27;</span><br><br><span class="hljs-selector-tag">canvas</span><span class="hljs-selector-class">.onmousedown</span> = (e) =&gt; &#123;<br>    <span class="hljs-built_in">downEvent</span>(e)<br>&#125;<br><span class="hljs-selector-tag">canvas</span><span class="hljs-selector-class">.onmousemove</span> = (e) =&gt; &#123;<br>    <span class="hljs-built_in">moveEvent</span>(e)<br>&#125;<br><span class="hljs-selector-tag">canvas</span><span class="hljs-selector-class">.onmouseup</span> = (e) =&gt; &#123;<br>    <span class="hljs-built_in">upEvent</span>(e)<br>&#125;<br><span class="hljs-selector-tag">canvas</span><span class="hljs-selector-class">.onmouseout</span> = (e) =&gt; &#123;<br>    <span class="hljs-built_in">upEvent</span>(e)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>鼠标按下事件的逻辑就是修改标志为true，清空位置集合并保存当前鼠标位置，抬起和移出事件无非就是修改标志为false，实现的重点在移动事件，稍后重点讲解。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">function</span> down<span class="hljs-constructor">Event(<span class="hljs-params">e</span>)</span> &#123;<br>    moveFlag = <span class="hljs-literal">true</span><br>    posList = <span class="hljs-literal">[]</span><br>    offset = get<span class="hljs-constructor">Pos(<span class="hljs-params">e</span>)</span><br>&#125;<br><span class="hljs-keyword">function</span> up<span class="hljs-constructor">Event(<span class="hljs-params">e</span>)</span> &#123;<br>    moveFlag = <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>鼠标按下时使用了一个工具函数获取位置：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-built_in">getPos</span>(e) &#123;<br>    return &#123;<br>        x: e<span class="hljs-selector-class">.clientX</span> - <span class="hljs-selector-tag">canvas</span><span class="hljs-selector-class">.offsetLeft</span>,<br>        y: e<span class="hljs-selector-class">.clientY</span> - <span class="hljs-selector-tag">canvas</span><span class="hljs-selector-class">.offsetTop</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>鼠标移动时我们都要干什么，获取当前鼠标位置，将两次鼠标位置移动的距离置入集合，并根据移动距离绘制无数个点以构成线，然后将当前点变成鼠标移动终点位置。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs maxima">function moveEvent(e) &#123;<br>    <span class="hljs-keyword">if</span> (!moveFlag) <span class="hljs-built_in">return</span><br>    <span class="hljs-built_in">var</span> currentOffset = getPos(e)<br>    <span class="hljs-built_in">var</span> prevOffset = offset<br>    <span class="hljs-built_in">var</span> <span class="hljs-built_in">radius</span> = <span class="hljs-number">1</span><br><br>    posList.unshift(&#123;<br>        distance: getDistance(prevOffset, currentOffset),<br>        <span class="hljs-built_in">time</span>: <span class="hljs-built_in">new</span> Date().getTime()<br>    &#125;)<br><br>    <span class="hljs-built_in">var</span> dis = <span class="hljs-number">0</span>,<br>        <span class="hljs-built_in">time</span> = <span class="hljs-number">0</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>, l = posList.<span class="hljs-built_in">length</span> - <span class="hljs-number">1</span>; i &lt; l; i++) &#123;<br>        dis += posList[i].distance<br>        <span class="hljs-built_in">time</span> += posList[i].<span class="hljs-built_in">time</span> - posList[i + <span class="hljs-number">1</span>].<span class="hljs-built_in">time</span><br>    &#125;<br><br>    offset = currentOffset<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-built_in">var</span> i = <span class="hljs-number">0</span>, l = Math.<span class="hljs-built_in">round</span>(posList[<span class="hljs-number">0</span>].distance / <span class="hljs-number">1</span>); i &lt; l + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-built_in">var</span> x = prevOffset.x + (currentOffset.x - prevOffset.x) / l * i<br>        <span class="hljs-built_in">var</span> y = prevOffset.y + (currentOffset.y - prevOffset.y) / l * i<br><br>        ctx.beginPath()<br>        ctx.arc(x, y, <span class="hljs-built_in">radius</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * Math.PI, <span class="hljs-literal">true</span>)<br>        ctx.fill()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中，第一个for循环内我们计算了鼠标移动距离，第二个for循环内则是将距离以1为单位分成若干份，每份都画一个圆，形成直线。代码中用到了一个工具函数计算距离：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">function <span class="hljs-built_in">getDistance</span>(<span class="hljs-selector-tag">a</span>, b) &#123;<br>    return Math<span class="hljs-selector-class">.sqrt</span>(Math<span class="hljs-selector-class">.pow</span>((<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.x</span> - <span class="hljs-selector-tag">a</span>.x), <span class="hljs-number">2</span>) + Math<span class="hljs-selector-class">.pow</span>((<span class="hljs-selector-tag">b</span><span class="hljs-selector-class">.y</span> - <span class="hljs-selector-tag">a</span>.y), <span class="hljs-number">2</span>))<br>&#125;<br></code></pre></td></tr></table></figure><p>至此我们的v1.0版本就已经完成了，现在我们可以在canvas中比比划划了。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a22919591657406e80274eea2ec13765~tplv-k3u1fbpfcp-watermark.image" alt="1.gif"><br>虽然实现了但是它也太丑了，没有笔锋也没有粗细变化，怎么能写出好看的福字呢，接下来我们进行2.0版本改造。</p><h2 id="V2-0实现"><a href="#V2-0实现" class="headerlink" title="V2.0实现"></a>V2.0实现</h2><p>相比于1.0版本，我们需要给画笔添加更加真实的效果，比如触摸的压力，笔的最大宽度和最小宽度，以及笔的平滑程度。尽最大程度还原真实的使用感觉。</p><p>新增如下参数</p><ul><li>  lineMax&lt;Number&gt;：线宽最大值</li><li>  lineMin&lt;Number&gt;：线宽最小值</li><li>  smoothness&lt;Number&gt;：笔触平滑程度</li><li>  linePressure&lt;Number&gt;：笔触压力</li></ul><p>如何实现笔触的平滑，我们在计算距离的时候判断当前距离和笔触的平滑程度大小，若距离大于平滑程度则跳出此次循环。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">for <span class="hljs-params">(var <span class="hljs-attr">i</span> = 0, <span class="hljs-attr">l</span> = posList.length - 1; i &lt; l; i++)</span> &#123;<br>    dis += posList[i]<span class="hljs-string">.distance</span><br>    time += posList[i]<span class="hljs-string">.time</span> - posList[i + 1]<span class="hljs-string">.time</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-params">(dis &gt; smoothness)</span> break; <span class="hljs-string">//</span> 新增，保持平滑<br>&#125;<br></code></pre></td></tr></table></figure><p>那我们如何实现笔触的压力效果呢，在使用中，无非就是停留时间长、使劲会让线条更加浑厚粗犷，在代码中，我们可以通过两点之间<code>time</code>的间隔和距离模拟这一使用场景，动态生成圆的半径用来绘制。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> offsetRadius = Math.<span class="hljs-built_in">min</span>((<span class="hljs-built_in">time</span> / dis) * linePressure + lineMin, lineMax) / <span class="hljs-number">2</span> <br></code></pre></td></tr></table></figure><p>这里可以看到，我们利用最小线宽、压力、点的时间和距离模拟了动态圆的半径，并限制住圆半径范围不超过最大线宽。接着在第二个for循环绘制圆中我们就可以使用动态的圆半径来绘制大小不一的圆，模拟粗细有致的平滑笔触。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = Math.<span class="hljs-built_in">round</span>(posList[<span class="hljs-number">0</span>].<span class="hljs-built_in">distance</span> / <span class="hljs-number">1</span>); i &lt; l + <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">var</span> x = prevOffset.x + (currentOffset.x - prevOffset.x) / l * i<br>    <span class="hljs-keyword">var</span> y = prevOffset.y + (currentOffset.y - prevOffset.y) / l * i<br>    <span class="hljs-keyword">var</span> r = currentRadius + (offsetRadius - currentRadius) / l * i<br>    ctx.beginPath()<br>    ctx.arc(x, y, r, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * Math.<span class="hljs-literal">PI</span>, <span class="hljs-literal">true</span>)<br>    ctx.fill()<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>2.0的完整代码不摆在这了，下面还有3.0完整版，我最后会附上3.0的完整版代码</p></blockquote><p>看效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/65365afddca7490bb9e0c6f9256d3e8d~tplv-k3u1fbpfcp-zoom-1.image" alt="2.gif"></p><p>到这其实基本上对绘制以及笔触的模拟都已完成，但毕竟是过年，需要有点过年的气氛，而且关于线宽这些我们也可以将其交给用户，让其自己配置，接下来就是3.0终极版。</p><h2 id="V3-0实现"><a href="#V3-0实现" class="headerlink" title="V3.0实现"></a>V3.0实现</h2><p>V3.0主要添加了撤销的功能。撤销的实现说白了就是在鼠标移动的时候维护一个笔划的历史数组，点击撤销后去除历史数组中的最末一个对整幅canvas进行重新绘制。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">back</span>() &#123;<br>    history.<span class="hljs-built_in">pop</span>();<br>    ctx.clearRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.width, canvas.height);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; history.<span class="hljs-built_in">length</span>; i++) &#123;<br>        <span class="hljs-keyword">var</span> h = history[i];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; h.<span class="hljs-built_in">length</span>; j += <span class="hljs-number">3</span>) &#123;<br>            ctx.beginPath();<br>            canvas<br>                .getContext(<span class="hljs-string">&quot;2d&quot;</span>)<br>                .arc(h[j], h[j + <span class="hljs-number">1</span>], h[j + <span class="hljs-number">2</span>], <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * Math.<span class="hljs-literal">PI</span>, <span class="hljs-literal">true</span>);<br>            ctx.fill();<br>        &#125;<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2bcc1610bf984a5abe290d29581e574a~tplv-k3u1fbpfcp-zoom-1.image" alt="3.gif"></p><p>在上边的图片中也看到了，我将线宽范围、笔触压力和平滑程度可视化出来方便用户自己配置调节想要的效果，这里简单写了一个原生的双向绑定支持随改随生效。</p><p>最后为了烘托一下过年的气氛，我们找一张喜庆的背景图作为canvas的背景绘制上去。</p><p>有人会问为什么不直接在css里添加background，其实最开始我也是这么加的，但这种方式在canvas转图片时是不会将背景也作为canvas的一部分的，所以直接将图片绘到canvas上了。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">var img = <span class="hljs-keyword">new</span> <span class="hljs-constructor">Image()</span>;<br>img.set<span class="hljs-constructor">Attribute(&#x27;<span class="hljs-params">crossOrigin</span>&#x27;, &#x27;<span class="hljs-params">anonymous</span>&#x27;)</span>;<br>img.onload = <span class="hljs-keyword">function</span> <span class="hljs-literal">()</span> &#123;<br>    ctx.draw<span class="hljs-constructor">Image(<span class="hljs-params">img</span>, 0, 0)</span>;<br>&#125;<br>img.src = &#x27;./drawBG.jpg&#x27;;<br></code></pre></td></tr></table></figure><p>最后就是添加一个保存逻辑，这个就不列出来了。</p><p>大功告成，我们最终形成的就是这样的一个页面，重点在功能实现哈，页面实在是懒得去美化了，至少这个背景看着就很有过年的气氛嘛哈哈哈。美中不足（之一）就是对于笔锋的模拟还是不够到位，但这是我目前能够想到最好的方案了，欢迎小伙伴评论区讨论哈，我一定虚心倾听。v3.0版本的最终代码放在最后了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3084f9d581a44469bdceb165fd252623~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>就把我写的这不争气的福发出来祝大家新年心想事成福气满满！</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f35b61f458524dfcbdb8f0d27e924ebb~tplv-k3u1fbpfcp-zoom-1.image" alt="下载 (4).png"></p><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;canvas&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;background:#ffffcc&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;400&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;700&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><span class="hljs-comment">&lt;!-- &lt;img src=&quot;./drawBG.jpg&quot; crossorigin=&quot;anonymous&quot; id=&quot;bg&quot; alt=&quot;&quot; style=&quot;display: none;&quot;&gt; --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;position: absolute;top: 10px;left: 420px;&quot;</span>&gt;</span><br>线宽范围：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:inline&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">model</span>=<span class="hljs-string">&#x27;lineMin&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lineMin&quot;</span> /&gt;</span> - <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display:inline&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">model</span>=<span class="hljs-string">&#x27;lineMax&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;lineMax&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>笔触压力：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">model</span>=<span class="hljs-string">&#x27;linePressure&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;linePressure&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>平滑程度：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">model</span>=<span class="hljs-string">&#x27;smoothness&#x27;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;smoothness&quot;</span> /&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;back&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;撤销&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;back()&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;clear&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;清空&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;clear()&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;save&#x27;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;保存&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;save()&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> moveFlag = <span class="hljs-literal">false</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> offset = &#123;&#125;, <span class="hljs-comment">// 当前位置</span></span><br><span class="language-javascript">posList = [] <span class="hljs-comment">// 运动位置集合</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> drawHistory = [],</span><br><span class="language-javascript">startOffset = <span class="hljs-literal">null</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> lineMax = <span class="hljs-number">30</span>,</span><br><span class="language-javascript">lineMin = <span class="hljs-number">2</span>,</span><br><span class="language-javascript">linePressure = <span class="hljs-number">3</span>,</span><br><span class="language-javascript">smoothness = <span class="hljs-number">80</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> radius = <span class="hljs-number">0</span></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>)</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> ctx = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>();</span><br><span class="language-javascript">img.<span class="hljs-title function_">setAttribute</span>(<span class="hljs-string">&#x27;crossOrigin&#x27;</span>, <span class="hljs-string">&#x27;anonymous&#x27;</span>);</span><br><span class="language-javascript">img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">img.<span class="hljs-property">src</span> = <span class="hljs-string">&#x27;./drawBG.jpg&#x27;</span>;</span><br><span class="language-javascript">ctx.<span class="hljs-property">fillStyle</span> = <span class="hljs-string">&#x27;rgba(0,0,0,0.3)&#x27;</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">canvas.<span class="hljs-property">onmousedown</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">downEvent</span>(e)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">canvas.<span class="hljs-property">onmousemove</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">moveEvent</span>(e)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">canvas.<span class="hljs-property">onmouseup</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">upEvent</span>(e)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">canvas.<span class="hljs-property">onmouseout</span> = <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript"><span class="hljs-title function_">upEvent</span>(e)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">downEvent</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">moveFlag = <span class="hljs-literal">true</span></span><br><span class="language-javascript">posList = []</span><br><span class="language-javascript">drawHistory.<span class="hljs-title function_">push</span>([])</span><br><span class="language-javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(drawHistory);</span><br><span class="language-javascript">startOffset = offset = <span class="hljs-title function_">getPos</span>(e)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">moveEvent</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (!moveFlag) <span class="hljs-keyword">return</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> currentOffset = <span class="hljs-title function_">getPos</span>(e)</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> prevOffset = offset</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> currentRadius = radius</span><br><span class="language-javascript"></span><br><span class="language-javascript">posList.<span class="hljs-title function_">unshift</span>(&#123;</span><br><span class="language-javascript"><span class="hljs-attr">distance</span>: <span class="hljs-title function_">getDistance</span>(prevOffset, currentOffset),</span><br><span class="language-javascript"><span class="hljs-attr">time</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().<span class="hljs-title function_">getTime</span>()</span><br><span class="language-javascript">&#125;)</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> dis = <span class="hljs-number">0</span>,</span><br><span class="language-javascript">time = <span class="hljs-number">0</span></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = posList.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &lt; l; i++) &#123;</span><br><span class="language-javascript">dis += posList[i].<span class="hljs-property">distance</span></span><br><span class="language-javascript">time += posList[i].<span class="hljs-property">time</span> - posList[i + <span class="hljs-number">1</span>].<span class="hljs-property">time</span></span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (dis &gt; smoothness) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 新增，保持平滑</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> offsetRadius = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">min</span>((time / dis) * linePressure + lineMin, lineMax) / <span class="hljs-number">2</span> <span class="hljs-comment">// 新增，压力控制圆半径</span></span><br><span class="language-javascript">radius = offsetRadius <span class="hljs-comment">// 新增</span></span><br><span class="language-javascript">offset = currentOffset</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (dis &lt; <span class="hljs-number">7</span>) <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript"><span class="hljs-keyword">if</span> (startOffset) &#123;</span><br><span class="language-javascript">prevOffset = startOffset</span><br><span class="language-javascript">currentRadius = offsetRadius</span><br><span class="language-javascript">startOffset = <span class="hljs-literal">null</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">round</span>(posList[<span class="hljs-number">0</span>].<span class="hljs-property">distance</span> / <span class="hljs-number">1</span>); i &lt; l + <span class="hljs-number">1</span>; i++) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> x = prevOffset.<span class="hljs-property">x</span> + (currentOffset.<span class="hljs-property">x</span> - prevOffset.<span class="hljs-property">x</span>) / l * i</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> y = prevOffset.<span class="hljs-property">y</span> + (currentOffset.<span class="hljs-property">y</span> - prevOffset.<span class="hljs-property">y</span>) / l * i</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> r = currentRadius + (offsetRadius - currentRadius) / l * i</span><br><span class="language-javascript"></span><br><span class="language-javascript">ctx.<span class="hljs-title function_">beginPath</span>()</span><br><span class="language-javascript">ctx.<span class="hljs-title function_">arc</span>(x, y, r, <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>, <span class="hljs-literal">true</span>)</span><br><span class="language-javascript">ctx.<span class="hljs-title function_">fill</span>()</span><br><span class="language-javascript"></span><br><span class="language-javascript">drawHistory[drawHistory.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>].<span class="hljs-title function_">push</span>(x, y, r)</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">upEvent</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript">moveFlag = <span class="hljs-literal">false</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getPos</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> &#123;</span><br><span class="language-javascript"><span class="hljs-attr">x</span>: e.<span class="hljs-property">clientX</span> - canvas.<span class="hljs-property">offsetLeft</span>,</span><br><span class="language-javascript"><span class="hljs-attr">y</span>: e.<span class="hljs-property">clientY</span> - canvas.<span class="hljs-property">offsetTop</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">getDistance</span>(<span class="hljs-params">a, b</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">return</span> <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>((b.<span class="hljs-property">x</span> - a.<span class="hljs-property">x</span>), <span class="hljs-number">2</span>) + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>((b.<span class="hljs-property">y</span> - a.<span class="hljs-property">y</span>), <span class="hljs-number">2</span>))</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">clear</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">drawHistory = []</span><br><span class="language-javascript">ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">back</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">drawHistory.<span class="hljs-title function_">pop</span>();</span><br><span class="language-javascript">ctx.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);</span><br><span class="language-javascript">ctx.<span class="hljs-title function_">drawImage</span>(img, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; drawHistory.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> h = drawHistory[i];</span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; h.<span class="hljs-property">length</span>; j += <span class="hljs-number">3</span>) &#123;</span><br><span class="language-javascript">ctx.<span class="hljs-title function_">beginPath</span>();</span><br><span class="language-javascript">canvas</span><br><span class="language-javascript">.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>)</span><br><span class="language-javascript">.<span class="hljs-title function_">arc</span>(h[j], h[j + <span class="hljs-number">1</span>], h[j + <span class="hljs-number">2</span>], <span class="hljs-number">0</span>, <span class="hljs-number">2</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">ctx.<span class="hljs-title function_">fill</span>();</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">save</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> url = canvas.<span class="hljs-title function_">toDataURL</span>(<span class="hljs-string">&quot;image/png&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> oA = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;a&quot;</span>);</span><br><span class="language-javascript">oA.<span class="hljs-property">download</span> = <span class="hljs-string">&#x27;&#x27;</span>; <span class="hljs-comment">// 设置下载的文件名，默认是&#x27;下载&#x27;</span></span><br><span class="language-javascript">oA.<span class="hljs-property">href</span> = url;</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(oA);</span><br><span class="language-javascript">oA.<span class="hljs-title function_">click</span>();</span><br><span class="language-javascript">oA.<span class="hljs-title function_">remove</span>(); <span class="hljs-comment">// 下载之后把创建的元素删除</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"><span class="hljs-comment">// input双向绑定</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> ngmodel = &#123;</span><br><span class="language-javascript">lineMin,</span><br><span class="language-javascript">lineMax,</span><br><span class="language-javascript">linePressure,</span><br><span class="language-javascript">smoothness</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"><span class="hljs-comment">// 初始化赋值</span></span><br><span class="language-javascript"><span class="hljs-keyword">const</span> inputs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelectorAll</span>(<span class="hljs-string">&#x27;input[model]&#x27;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; inputs.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">inputs[i].<span class="hljs-property">value</span> = ngmodel[inputs[i].<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;model&#x27;</span>)]</span><br><span class="language-javascript">inputs[i].<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;keyup&#x27;</span>, change)</span><br><span class="language-javascript"></span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"><span class="hljs-comment">// input操作赋值</span></span><br><span class="language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">change</span>(<span class="hljs-params">e</span>) &#123;</span><br><span class="language-javascript"><span class="hljs-keyword">const</span> attr = e.<span class="hljs-property">target</span>.<span class="hljs-title function_">getAttribute</span>(<span class="hljs-string">&#x27;model&#x27;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">window</span>[attr] = ngmodel[attr] = e.<span class="hljs-property">target</span>.<span class="hljs-property">value</span></span><br><span class="language-javascript">&#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>w字总结《深入浅出Vue.js》之变化侦测篇</title>
    <link href="/2021/12/06/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAVue.js%E3%80%8B%E4%B9%8B%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B%E7%AF%87/"/>
    <url>/2021/12/06/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8A%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAVue.js%E3%80%8B%E4%B9%8B%E5%8F%98%E5%8C%96%E4%BE%A6%E6%B5%8B%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="变化侦测"><a href="#变化侦测" class="headerlink" title="变化侦测"></a>变化侦测</h1><blockquote><p>什么是变化侦测？</p></blockquote><p>Vue.js自动通过状态生成DOM，并将其输出到页面，此为渲染。Vue.js的渲染过程是声明式的，我们通过模版来描述状态与DOM之间的映射关系。而当应用内部状态变化时需要重新渲染，而如何确定状态中什么变化了就是变化侦测要解决的问题。</p><h2 id="object的变化侦测"><a href="#object的变化侦测" class="headerlink" title="object的变化侦测"></a>object的变化侦测</h2><h3 id="如何追踪变化？"><a href="#如何追踪变化？" class="headerlink" title="如何追踪变化？"></a>如何追踪变化？</h3><p>两种方式可以追踪变化：<code>Object.defineProperty</code>和ES6的<code>Proxy</code>。</p><p>由于ES6在浏览器中的支持度不理想，所以Vue2采用了<code>Object.defineProperty</code>实现，而Vue3则采用了<code>Proxy</code>。</p><p>利用<code>Object.defineProperty</code>侦测对象变化可以写出这样的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactiv</span> (data, key, val) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data, key, &#123;<br>        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">return</span> val<br>        &#125;,<br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) &#123;<br>            <span class="hljs-keyword">if</span>(val === newVal) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            val = newVal<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>defineReactive是对Object.defineProperty的封装，其作用为定义一个响应式数据，在这个函数中进行变化追踪，封装后只需要传递data，key，value即可。封装好后，每当从data的key中读取数据，get函数被触发；往data的key中设置数据时，set函数被触发。</p><h3 id="如何收集依赖？收集在哪里？"><a href="#如何收集依赖？收集在哪里？" class="headerlink" title="如何收集依赖？收集在哪里？"></a>如何收集依赖？收集在哪里？</h3><blockquote><p>在Vue2中，模板使用数据等同于组件使用数据，所以数据变化时，会将通知发送到组件，组件内部再通过虚拟DOM重新渲染。</p></blockquote><p>我们观察依赖的目的是当数据发生变化的时候，通知那些使用了该数据的地方。所以我们需要收集依赖，把用到数据的地方收集起来，等属性发生变化时，将之前收集好的依赖循环触发一遍，也就是在getter中收集依赖，setter中触发依赖。</p><p>现在已经知道了要在哪里收集触发依赖，那么要把它收集到哪里？我们创建一个专门帮助管理依赖的类Dep，使用这个类，我们可以收集、删除依赖或向依赖发送通知。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = []<br>    &#125;<br>    <br>    <span class="hljs-title function_">addSub</span>(<span class="hljs-params">sub</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">push</span>(sub)<br>    &#125;<br>    <br>    <span class="hljs-title function_">removeSub</span>(<span class="hljs-params">sub</span>) &#123;<br>        <span class="hljs-title function_">remove</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>, sub)<br>    &#125;<br>    <span class="hljs-title function_">depend</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">target</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addSub</span>(windwo.<span class="hljs-property">target</span>)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-title function_">notify</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> subs = <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">slice</span>()<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = subs.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>            subs[i].<span class="hljs-title function_">update</span>()<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">remove</span> (arr, item) &#123;<br>    <span class="hljs-keyword">if</span> (arr.<span class="hljs-property">length</span>) &#123;<br>        <span class="hljs-keyword">const</span> index = arr.<span class="hljs-title function_">indexOf</span>(item)<br>        <span class="hljs-keyword">if</span>(index &gt; -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> arr.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再改造一下defineReactive</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span> (data, key, val) &#123;<br>    <span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data, key, &#123;<br>        <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            dep.<span class="hljs-title function_">depend</span>()<br>            <span class="hljs-keyword">return</span> val<br>        &#125;,<br>        <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">if</span>(val === newVal) &#123;<br>               <span class="hljs-keyword">return</span> <br>            &#125;<br>            val = newVal<br>            dep.<span class="hljs-title function_">notify</span>()<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="什么是Watcher"><a href="#什么是Watcher" class="headerlink" title="什么是Watcher"></a>什么是Watcher</h3><p>上边的代码中，我们收集的依赖是window.target，那我们究竟要收集谁呢。收集说的通俗易懂点就是当属性变化时，我们应该通知谁。</p><p>我们需要通知用到数据的地方，而用到它的地方可能会很多，有可能是模版，也有可能是watch等等，所以我们需要抽象出一个能集中处理这些情况的类。我们在收集依赖阶段只收集这个封装好的类实例，同样也只通知它自己，由它负责通知其他地方，这就是Watcher。</p><p>Watcher是一个中介的角色，数据变化时通知它，他负责通知其他地方。</p><p>首先看一下Watcher的经典使用方式：当a.b.c变化时会触发第二个参数中的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">vm.$watch(<span class="hljs-string">&#x27;a.b.c&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">newVal, oldVal</span>) &#123;<br>    <span class="hljs-comment">// 操作</span><br>&#125;)<br></code></pre></td></tr></table></figure><p>根据使用方法我们可以首先实现Watcher：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">vm, expOrFn, cb</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = <span class="hljs-title function_">parsePath</span>(expOrFn)<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>()<br>    &#125;<br>    <br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">target</span> = <span class="hljs-variable language_">this</span><br>        <span class="hljs-keyword">let</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>)<br>        windwo.<span class="hljs-property">target</span> = <span class="hljs-literal">undefined</span><br>        <span class="hljs-keyword">return</span> value<br>    &#125;<br>    <br>    <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> oldValue = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>()<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>, <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>, oldValue)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段胆码可以把自己主动添加到data.a.b.c的Dep中。在get方法中先把window.target设置为this即当前的watcher实例，然后读data.a.b.c的值，触发getter。</p><p>触发了getter，就会触发收集依赖的逻辑，从window.target中读取一个依赖添加到Dep中。这样只要在window.target赋一个this，再读一下值，触发getter，就可以把this主动添加到keypath的Dep中。</p><p>依赖注入到Dep中后，每次值变化就会让依赖列表中所有依赖循环触发update方法，执行参数中的回调函数，将value和oldValue传到参数中。</p><h3 id="递归侦测所有key"><a href="#递归侦测所有key" class="headerlink" title="递归侦测所有key"></a>递归侦测所有key</h3><p>现在已经可以实现变化侦测的功能，但是我们希望把数据中所有属性（含子属性）都侦测到，需要一个Observer类。它的作用是将一个数据内所有属性都转换成getter/setter形式，再去追踪他们的变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br>        <br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walk</span>(value)<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-title function_">walk</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; keys.<span class="hljs-property">length</span>; i++) &#123;<br>            <span class="hljs-title function_">defineReactive</span>(obj, keys[i], obj[keys[i]])<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">data, key, val</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(val)<br>    &#125;<br>    <br>    <span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(data, key, &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        dep.<span class="hljs-title function_">depend</span>()<br>        <span class="hljs-keyword">return</span> val<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(val === newVal) &#123;<br>           <span class="hljs-keyword">return</span> <br>        &#125;<br>        val = newVal<br>        dep.<span class="hljs-title function_">notify</span>()<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>我们定义Observer类，将正常对象转换成被侦测的对象。然后判断数据类型，只有Object才会调用walk进行转换，最后在defineReactive中新增<code>new Observer(val)</code>来递归子属性。</p><h3 id="关于Object的问题"><a href="#关于Object的问题" class="headerlink" title="关于Object的问题"></a>关于Object的问题</h3><p>上边我们介绍了Object类型的变化侦测原理，正是因为数据变化是通过getter/setter进行追踪，所以有些语法中即使数据变化，Vue也追踪不到。</p><p>比如，向object添加或删除属性：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#app&#x27;</span>,<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;#demo-template&#x27;</span>,<br>    <span class="hljs-attr">methods</span>:&#123;<br>        <span class="hljs-title function_">action</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">age</span> = <span class="hljs-string">&#x27;23&#x27;</span><br>        &#125;,<br>        <span class="hljs-title function_">dAction</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">delete</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">name</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">obj</span>:&#123;<br>            <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;abc&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>Object.defineProperty将对象的key转化为getter/setter来追踪变化，但它只能追踪一个数据是否被修改，无法侦测新增和删除。</p><p>所以Vue提供两个API：vm.$set和vm.$delete</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Object可以通过Object.defineProperty将属性转换成getter/setter形式来追踪变化，读取触发getter，修改触发setter。</p><p>在getter中对使用了数据的依赖进行收集，当setter触发时通知getter中收集的依赖数据发生变化。</p><p>收集依赖需要为依赖找一个储存的地方，所以有了Dep，它用来收集、删除依赖并向依赖发送消息。</p><p>依赖就是Watcher，只有Watcher触发的getter才会收集依赖，哪个Watcher触发了getter就把它收集到Dep中，数据发生变化时会循环依赖列表通知所有Watcher。</p><p>Watcher的原理是先把自己设置到全局唯一的位置，然后读取数据触发getter，接着getter中就会从唯一的位置读取当前正在读取数据的Watcher，并把它收集到Dep中，这样Watcher可以主动去订阅任一数据的变化。</p><p>此外，还创建了Observer类，它是用来将一个object中的所有数据（包括子数据）都转换成响应式的。</p><h2 id="Array的变化侦测"><a href="#Array的变化侦测" class="headerlink" title="Array的变化侦测"></a>Array的变化侦测</h2><p>Array的侦测为什么与Object不同，因为Object使用getter/setter侦测变化，而数组通常使用push等方法来改变，不会触发getter/setter。</p><h3 id="如何追踪变化"><a href="#如何追踪变化" class="headerlink" title="如何追踪变化"></a>如何追踪变化</h3><p>这里不讨论ES6的情况，在ES6以前，我们没有能够拦截原型方法（push等）的能力，但我们可以用自定义方法覆盖原生的原型方法。</p><p>我们可以用一个拦截器覆盖Array.prototype。之后每当使用原型上的方法操作数组的时候，执行的其实是拦截器中的方法，之后在拦截器内使用原生的原型方法去操作数组。</p><h3 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h3><p>数组原型上的方法有七个，分别是push，pop，shift，unshift，splice，sort和reverse。我们可以实现一个和原型样的Object，里面的属性一模一样，只不过其中改变数组自身内容的方法是重写的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arrayProto = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> arrayMethods = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">create</span>(arrayProto)<br><br><span class="hljs-keyword">const</span> methods = [<span class="hljs-string">&#x27;push&#x27;</span>,<span class="hljs-string">&#x27;pop&#x27;</span>,<span class="hljs-string">&#x27;shift&#x27;</span>,<span class="hljs-string">&#x27;unshift&#x27;</span>,<span class="hljs-string">&#x27;splice&#x27;</span>,<span class="hljs-string">&#x27;sort&#x27;</span>,<span class="hljs-string">&#x27;reverse&#x27;</span>]<br><br>methods.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">method</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> original = arrayProto[method]<br>    <br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(arrayMethods , method , &#123;<br>        <span class="hljs-attr">value</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">mutator</span>(<span class="hljs-params">...args</span>) &#123;<br>            <span class="hljs-keyword">return</span> original.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>        &#125;,<br>        <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">writable</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span><br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><p>创建了arrayMethods继承自Array.prototype，具备所有功能，接下来使用Object.defineProperty对改变数组的方法进行封装。所以当我们调用push的时候，实际调用的是arrayMethods.push，而它实际上是mutator函数，在mutator函数中执行original（原生方法）来做应该做的事，我们可以在mutator中做其他的事比如发送变化通知。</p><h3 id="使用拦截器覆盖Array原型"><a href="#使用拦截器覆盖Array原型" class="headerlink" title="使用拦截器覆盖Array原型"></a>使用拦截器覆盖Array原型</h3><p>我们需要用它覆盖Array.prototype，但又不能直接覆盖，因为这样会污染全局的Array。我们希望拦截只针对那些被侦测了变化的数据生效，也就是希望拦截器只覆盖那些响应式数组的原型。</p><p>而数据转成响应式的，需要通过Observer，所以我们只需要在Observer中用拦截器覆盖那些Array类型数据的原型。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>            value.<span class="hljs-property">_proto_</span> = arrayMethods<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walk</span>(value)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>它的作用是将拦截器赋给value._proto_，覆盖value原型的功能。</p><h3 id="拦截器挂载到数组属性上"><a href="#拦截器挂载到数组属性上" class="headerlink" title="拦截器挂载到数组属性上"></a>拦截器挂载到数组属性上</h3><p>部分浏览器可能不支持_proto_，而Vue的做法是如果不能使用_proto_，则直接将arrayMethods身上的方法设置到被侦测的数组上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> hasProto = <span class="hljs-string">&#x27;_proto_&#x27;</span> <span class="hljs-keyword">in</span> &#123;&#125;<br><br><span class="hljs-keyword">const</span> arrayKeys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(arrayMethods)<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>            <span class="hljs-keyword">const</span> augment = hasProto ? protoAugment : copyAugment<br>            <br>            <span class="hljs-title function_">augment</span>(value, arrayMethods, arrayKeys)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">protoAugment</span>(<span class="hljs-params">target, src, keys</span>) &#123;<br>    target.<span class="hljs-property">_proto_</span> = src<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">copyAugment</span>(<span class="hljs-params">target, src, keys</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>,l = keys.<span class="hljs-property">length</span>;i &lt; l; i++) &#123;<br>        <span class="hljs-keyword">const</span> key = keys[i]<br>        <span class="hljs-title function_">def</span>(target, key, src[key])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="如何收集依赖"><a href="#如何收集依赖" class="headerlink" title="如何收集依赖"></a>如何收集依赖</h3><p>我们已完成了拦截器，本质上是为了当数组内容变化时能够得到通知Dep中的依赖的能力。而数组也是在getter中收集依赖的。想要读取数组，首先肯定会触发这个数组的名对应属性的getter。而Array的依赖和Object一样，也会在defineReactive中收集：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">data, key, val</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> val === <span class="hljs-string">&#x27;object&#x27;</span>) <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(val)<br>    <br>    <span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br>    <br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">deintProperty</span>(data,key, &#123;<br>        <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            dep.<span class="hljs-title function_">depend</span>()<br>            <span class="hljs-comment">// 收集数组的依赖</span><br>            <br>            <span class="hljs-keyword">return</span> val<br>        &#125;,<br>        <span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newVal</span>) &#123;<br>            <span class="hljs-keyword">if</span>(val === newVal) <span class="hljs-keyword">return</span><br>            <br>            dep.<span class="hljs-title function_">notify</span>()<br>            val = newVal<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>Array在getter中收集依赖，在拦截器中触发依赖。</p><h3 id="依赖列表存在哪"><a href="#依赖列表存在哪" class="headerlink" title="依赖列表存在哪"></a>依赖列表存在哪</h3><p>Array的依赖被存放在Observer中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dep</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>() <span class="hljs-comment">// 新增dep</span><br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>            <span class="hljs-keyword">const</span> augment = hasProto ? protoAugment : copyAugment<br>            <br>            <span class="hljs-title function_">augment</span>(value, arrayMethods, arrayKeys)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>        &#125;<br>    &#125;<br>    <br>    ...<br>&#125;<br><br></code></pre></td></tr></table></figure><p>我们有个疑问，为什么数组的dep要保存在Observer实例上呢。因为数组在getter中收集依赖，在拦截器中触发依赖，所以依赖保存的位置很关键，需要在getter和拦截器中都能访问到。将Dep实例保存到Observer的属性上以后，我们能够在getter中访问并收集。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params">data, key, val</span>) &#123;<br>    <span class="hljs-keyword">let</span> childOb = <span class="hljs-title function_">observer</span>(val)<br>    <span class="hljs-keyword">let</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProerty</span>(data, key, &#123;<br>        <span class="hljs-attr">enumerable</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configurable</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">get</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            dep.<span class="hljs-title function_">depend</span>()<br>            <span class="hljs-keyword">if</span>(childOb) &#123;<br>                childOb.<span class="hljs-property">dep</span>.<span class="hljs-title function_">depend</span>()<br>            &#125;<br>            <span class="hljs-keyword">return</span> val<br>        &#125;,<br>        <span class="hljs-attr">set</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params">newVal</span>) &#123;<br>            <span class="hljs-keyword">if</span>(val === newVal) &#123;<br>                <span class="hljs-keyword">return</span><br>            &#125;<br>            <br>            dep.<span class="hljs-title function_">notify</span>()<br>            val = newVal<br>        &#125;<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>在defineReactive中调用observe，将val当做参数传进去拿到返回值，就是observer实例。</p><h3 id="在拦截器中获取Observer实例"><a href="#在拦截器中获取Observer实例" class="headerlink" title="在拦截器中获取Observer实例"></a>在拦截器中获取Observer实例</h3><p>因为Array拦截器是对原型的一种封装，所以在拦截器中可以访问到this。而dep保存在Observer中，所以需要在this上读到Observer实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">def</span> (obj, key, val, enumerable) &#123;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, key,  &#123;<br>        <span class="hljs-attr">value</span>:val,<br>        <span class="hljs-attr">enumerable</span>:!!enumerable,<br>        <span class="hljs-attr">writable</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">configruable</span>:<span class="hljs-literal">true</span><br>    &#125;)<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">dep</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br>        <br>        <span class="hljs-title function_">def</span>(value , <span class="hljs-string">&#x27;__ob__&#x27;</span>,<span class="hljs-variable language_">this</span>)<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ...<br>        &#125;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码在Observer中新增了一段代码，它在value上新增了一个不可枚举的__ob__属性即当前Observer实例。它还可以用来标记当前value是否被Observer转换成响应式数据。</p><p>也就是说所有被侦测了的数据身上都会有一个__ob__来表示它们是响应式的，可以通过value.__ob__来访问Observer实例。如果是Array拦截器，因为它是原型方法，所以可以直接通过this.__ob__来访问Observer实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>[<span class="hljs-string">&#x27;push&#x27;</span>,<span class="hljs-string">&#x27;pop&#x27;</span>,……].<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">method</span>) &#123;<br>    <span class="hljs-keyword">const</span> original = arrayProto[method]<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(arrayMethods,method, &#123;<br>        <span class="hljs-attr">value</span>:<span class="hljs-keyword">function</span> <span class="hljs-title function_">mutator</span>(<span class="hljs-params">...args</span>) &#123;<br>            <span class="hljs-keyword">const</span> ob = <span class="hljs-variable language_">this</span>.<span class="hljs-property">__ob__</span><br>            <span class="hljs-keyword">return</span> original.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args)<br>        &#125;,<br>        ...<br>    &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="向数组依赖发送通知"><a href="#向数组依赖发送通知" class="headerlink" title="向数组依赖发送通知"></a>向数组依赖发送通知</h3><p>我们只需要在拦截器中访问Observer实例，拿到dep属性，直接发送通知即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>[<span class="hljs-string">&#x27;push&#x27;</span>,<span class="hljs-string">&#x27;pop&#x27;</span>,……].<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">method</span>) &#123;<br>    <span class="hljs-keyword">const</span> original = arrayProto[method]<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(arrayMethods,method, &#123;<br>        <span class="hljs-attr">value</span>:<span class="hljs-keyword">function</span> <span class="hljs-title function_">mutator</span>(<span class="hljs-params">...args</span>) &#123;<br>            <span class="hljs-keyword">const</span> ob = <span class="hljs-variable language_">this</span>.<span class="hljs-property">__ob__</span><br>            ob.<span class="hljs-property">dep</span>.<span class="hljs-title function_">notify</span>()<br>            <span class="hljs-keyword">return</span> original.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,args)<br>        &#125;,<br>        ...<br>    &#125;)<br>&#125;)<br><br></code></pre></td></tr></table></figure><h3 id="侦测数组元素变化及新增变化"><a href="#侦测数组元素变化及新增变化" class="headerlink" title="侦测数组元素变化及新增变化"></a>侦测数组元素变化及新增变化</h3><h4 id="元素变化"><a href="#元素变化" class="headerlink" title="元素变化"></a>元素变化</h4><p>介绍Observer时说过，作用是将object的属性变为getter/setter形式，现在Observer类不仅处理Object类型，还要处理Array类型。所以我们要在Observer中新增一些处理，让它能把Array也变成响应式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">value</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br>        <span class="hljs-title function_">def</span>(value,<span class="hljs-string">&#x27;__ob__&#x27;</span>,<span class="hljs-variable language_">this</span>)<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">observeArray</span>(value)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">walk</span>(value)<br>        &#125;<br>    &#125;<br>    <br>    ...<br>    <br>    <span class="hljs-title function_">observeArray</span>(<span class="hljs-params">items</span>) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>,l = items.<span class="hljs-property">length</span>;i &lt; l; i++) &#123;<br>            <span class="hljs-title function_">observe</span>(items[i])<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="新增元素的变化"><a href="#新增元素的变化" class="headerlink" title="新增元素的变化"></a>新增元素的变化</h4><ol><li>获取新增元素</li></ol><p>我们需要在拦截器中队数组方法的类型进行判断，如果是push、unshift和splice（添加元素方法），需要把参数中新增的元素拿过来，用Observer侦测。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js">[<span class="hljs-string">&#x27;push&#x27;</span>,<span class="hljs-string">&#x27;pop&#x27;</span>,……].<span class="hljs-title function_">forEach</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">method</span>) &#123;<br>    <span class="hljs-keyword">const</span> original = arrayProto[method]<br>    <span class="hljs-title function_">def</span>(arrayMethods, method, <span class="hljs-keyword">function</span> <span class="hljs-title function_">mutator</span>(<span class="hljs-params">...args</span>) &#123;<br>        <span class="hljs-keyword">const</span> result = original.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, args)<br>        <span class="hljs-keyword">const</span> ob = <span class="hljs-variable language_">this</span>.<span class="hljs-property">__ob__</span><br>        <span class="hljs-keyword">let</span> inserted<br>        <span class="hljs-keyword">switch</span>(method) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;push&#x27;</span>:<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;unshift&#x27;</span>:<br>                inserted = args<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;splice&#x27;</span>:<br>                inserted = args.<span class="hljs-title function_">slice</span>(<span class="hljs-number">2</span>)<br>                <span class="hljs-keyword">break</span><br>        &#125;<br>        ob.<span class="hljs-property">dep</span>.<span class="hljs-title function_">notify</span>()<br>        <span class="hljs-keyword">return</span> result<br>    &#125;)<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="关于数组的问题"><a href="#关于数组的问题" class="headerlink" title="关于数组的问题"></a>关于数组的问题</h3><p>对Array的变化侦测是通过拦截原型的方法实现，所以有些操作Vue无法拦截，比如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>[<span class="hljs-number">0</span>] = <span class="hljs-number">2</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">list</span>.<span class="hljs-property">length</span> = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>无法侦测数组变化，不会触发re-render或者watch。</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>Array的追踪方式和Object不同，因为它是通过方法来改变内容，所以通过创建拦截器去覆盖数组的原型方法来追踪变化。</p><p>而为了不污染全局的原型方法，我们在Observer中只针对需要侦测变化的数组用__proto__来覆盖原型方法，而ES6之前并不是所有浏览器都支持，所以针对不支持的浏览器，我们循环拦截器，将方法设置到数组身上来拦截Array.prototype上的原型方法。</p><p>Array同Object收集依赖的方式相同，均在getter中，但是使用依赖的位置不同，数组要在拦截器中向依赖发送消息，所以依赖不能像Object一样保存在defineReactive中，而是保存在Observer实例上。</p><p>在Observer中队每个侦测了变化的数据都标记__ob__，并把this保存在__ob__上。主要有两个作用，一方面为了标记数据是否被侦测变化（保证同一数据只侦测一次），另一方面可以很方便的通过数据取到__ob__，从而拿到Observer上保存的依赖，发送通知。</p><p>除了侦测数组自身变化，数组中元素的变化也要侦测，在Observer中判断如果当前被侦测数据是数组，则调用observerArray将数组中每个元素转换成响应式。</p><p>除了已有数据的侦测，当使用push等方法新增数据时，新增的数据也要侦测，我们使用当前操作数组的方法判断，如果是push、unshift和splice，则将参数中的新增数据提取出来，对其转换。</p><h2 id="变化侦测相关的api实现原理"><a href="#变化侦测相关的api实现原理" class="headerlink" title="变化侦测相关的api实现原理"></a>变化侦测相关的api实现原理</h2><h3 id="vm-watch"><a href="#vm-watch" class="headerlink" title="vm.$watch"></a>vm.$watch</h3><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p><code>vm.$watch(expOfFn, callback, [options])</code></p><p>用于观察一个表达式或computed函数在vue实例上的变化。回调函数调用时会从参数得到新数据和旧数据，表达式只接受以点分隔的路径，例如<code>a.b.c</code>。</p><p>options包括deep和immediate，deep为了发现对象内部值的变化，immediate将立即以表达式的当前值触发回调。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">vm.$watch(<span class="hljs-string">&#x27;someObject&#x27;</span>,callback, &#123;<br>    <span class="hljs-attr">deep</span>:<span class="hljs-literal">true</span>, <span class="hljs-comment">// someObject.a修改时触发。</span><br>    <span class="hljs-attr">immediate</span>:<span class="hljs-literal">true</span> <span class="hljs-comment">// 立即以someObject的当前值触发回调。</span><br>&#125;)<br></code></pre></td></tr></table></figure><h4 id="内部原理"><a href="#内部原理" class="headerlink" title="内部原理"></a>内部原理</h4><p>vm.$watch是对Watcher的一种封装，通过Watcher完全可以实现vm.$watch的功能，但它的deep和immediate是Watcher没有的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Vue</span>.<span class="hljs-property">property</span>.<span class="hljs-property">$watch</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">expOrFn, cb, options</span>) &#123;<br>    <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span><br>    options = options || &#123;&#125;<br>    <span class="hljs-keyword">const</span> watcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Watcher</span>(vm, expOfFn, cb, options)<br>    <span class="hljs-keyword">if</span>(options.<span class="hljs-property">immediate</span>) &#123;<br>        cb.<span class="hljs-title function_">call</span>(vm, watcher)<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">unwatchFn</span>(<span class="hljs-params"></span>) &#123;<br>        watcher.<span class="hljs-title function_">teardown</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>expOrFn是支持函数的，而之前介绍Watcher时没有添加这部分，需要对Watcher简单修改。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">vm, expOrFn, cb</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm<br>        <br>        <span class="hljs-comment">//修改</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> expOrFn === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = expOrFn<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = <span class="hljs-title function_">parsePath</span>(expOrFn)<br>        &#125;<br>        <br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果expOrFn是函数，将它直接赋给getter，如果不是，则用parsePath读取keypath中的数据，keypath是属性路径，例如a.b.c.d就代表从vm.a.b.c.d中读取数据。</p><p>而expOrFn是函数时，不止可以动态返回数据，其中读取的数据也都会被Watcher观察。当expOrFn是字符串类型的keypath时，Watcher会读取它指向的数据并观察数据的变化。而expOrFn是函数时，Watcher会同时观察expOrFn函数中读取的所有Vue实例上的响应式数据。</p><p>执行new Watcher后，代码会判断用户是否用了immediate参数，使用了则立即执行一次cb。</p><p>最后返回一个函数unwatcheFn，它的作用是取消观察数据。用户执行它时，实际上是执行了watcher.teardown()来取消观察数据，其本质是把watcher实例从当前正在观察的状态的依赖列表中移除。</p><p>现在需要实现watcher中的teardown方法，来实现unwatch功能。</p><p>首先需要在Watcher中记录自己都订阅了谁，当Watcher不想继续订阅时，循环自己记录的列表来通知他们将自己从他们的依赖列表中移除。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">vm, expOrFn, cb</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>  = vm<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span> = []<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">depsIds</span>= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>        ……<br>    &#125;<br>    <br>    ……<br>    <br>    <span class="hljs-title function_">addDep</span>(<span class="hljs-params">dep</span>) &#123;<br>        <span class="hljs-keyword">const</span> id = dep.<span class="hljs-property">id</span><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-variable language_">this</span>.<span class="hljs-property">depIds</span>.<span class="hljs-title function_">has</span>(id)) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">depIds</span>.<span class="hljs-title function_">add</span>(id)<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>.<span class="hljs-title function_">push</span>(dep)<br>            dep.<span class="hljs-title function_">addSub</span>(<span class="hljs-variable language_">this</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中，用depIds判断当前Watcher是否订阅了Dep，不会发生重复订阅。</p><p>接着执行this.depIds.add来记录当前Watcher已经订阅了这个Dep。然后执行this.deps.push(dep)记录自己订阅了那些Dep。最后触发dep.addSub(this)将自己订阅到Dep中。</p><p>Watcher中新增了addDep方法后，Dep中收集依赖的逻辑也需要改变：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> uid = <span class="hljs-number">0</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = uid++<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = []<br>    &#125;<br>    <br>    ……<br>    <br>    <span class="hljs-title function_">depend</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">target</span>) &#123;<br>            <span class="hljs-variable language_">window</span>.<span class="hljs-property">target</span>.<span class="hljs-title function_">addDep</span>(<span class="hljs-variable language_">this</span>)<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>Dep会记录数据发生变化的时候，需要通知哪些Watcher，而Watcher中也记录了自己会被哪些Dep通知，是多对多的关系。</p><p>在Watcher中记录了自己都订阅了那些Dep后，可以在Watcher中增加teardown方法来通知订阅的Dep，让他们把自己从依赖中移除：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">teardown</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">while</span>(i--) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>[i].<span class="hljs-title function_">removeSub</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>    ……<br>    <br>    <span class="hljs-title function_">removeSub</span>(<span class="hljs-params">sub</span>) &#123;<br>        <span class="hljs-keyword">const</span> index = <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">indexOf</span>(sub)<br>        <span class="hljs-keyword">if</span>(index &gt; -<span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">splice</span>(index, <span class="hljs-number">1</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="deep参数实现原理"><a href="#deep参数实现原理" class="headerlink" title="deep参数实现原理"></a>deep参数实现原理</h4><p>deep的 作用是监听它及其子对象的数据，其实就是除了要触发当前被监听数据的收集依赖逻辑外，还要把当前监听值在内的所有子值都触发一遍收集依赖逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">vm, expOrFn, cb, options</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm<br>        <span class="hljs-comment">// 新增</span><br>        <span class="hljs-keyword">if</span>(options) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">deep</span> = !!options.<span class="hljs-property">deep</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">deep</span> = <span class="hljs-literal">false</span><br>        &#125;<br>        <br>        ……<br>    &#125;<br>    <br>    <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-property">target</span> = <span class="hljs-variable language_">this</span><br>        <span class="hljs-keyword">let</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span>.<span class="hljs-title function_">call</span>(vm, vm)<br>        <br>        <span class="hljs-comment">//新增</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">deep</span>) &#123;<br>            <span class="hljs-title function_">traverse</span>(value)<br>        &#125;<br>        windwo.<span class="hljs-property">target</span> = <span class="hljs-literal">undefined</span><br>        <span class="hljs-keyword">return</span> value<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用了deep参数，则在target = undefined前调用traverse来处理deep的逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> seenObjects = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">traverse</span>(<span class="hljs-params">value</span>) &#123;<br>    <span class="hljs-title function_">_traverse</span>(val, seenObjects)<br>    seenObjects.<span class="hljs-title function_">clear</span>()<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">_traverse</span>(<span class="hljs-params">val, seen</span>) &#123;<br>    <span class="hljs-keyword">let</span> i , keys<br>    <span class="hljs-keyword">const</span> isA = <span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(val)<br>    <span class="hljs-keyword">if</span>( (!isA &amp;&amp; !<span class="hljs-title function_">isObject</span>(val)) || (<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isFrozen</span>(val)) ) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(val.<span class="hljs-property">__ob__</span>) &#123;<br>        <span class="hljs-keyword">const</span> depId = val.<span class="hljs-property">__ob__</span>.<span class="hljs-property">dep</span>.<span class="hljs-property">id</span><br>        <span class="hljs-keyword">if</span>(seen.<span class="hljs-title function_">has</span>(depId)) &#123;<br>            <span class="hljs-keyword">return</span><br>        &#125;<br>        seen.<span class="hljs-title function_">add</span>(depId)<br>    &#125;<br>    <span class="hljs-keyword">if</span>(isA) &#123;<br>        i = val.<span class="hljs-property">length</span><br>        <span class="hljs-keyword">while</span>(i--) <span class="hljs-title function_">_traverse</span>(val[i], seen)<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        keys =<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(val)<br>        i = keys.<span class="hljs-property">length</span><br>        <span class="hljs-keyword">while</span>(i--) <span class="hljs-title function_">_traverse</span>(val[keys[i]], seen)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>利用递归来判断子值的类型，数组则直接循环递归调用_traverse，而对象则利用key读取并递归子值，而val[keys[i]]会触发getter，所以要在target = undefined之前触发收集依赖的原因。</p><h3 id="vm-set"><a href="#vm-set" class="headerlink" title="vm.$set"></a>vm.$set</h3><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><p><code>vm.$set(target, key, value)</code></p><p>在object上设置一个属性，如果object是响应式的，Vue保证属性在创建后也是响应式的，并能够触发视图更新。此方法为了避开Vue不能侦测属性被添加的限制。</p><blockquote><p>target 不能是Vue实例或Vue实例的根数据对象。</p></blockquote><p>举个例子来看看</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-attr">el</span>:<span class="hljs-string">&#x27;#el&#x27;</span>,<br>    <span class="hljs-attr">template</span>:<span class="hljs-string">&#x27;#demo-template&#x27;</span>,<br>    <span class="hljs-attr">data</span>:&#123;<br>        obj<br>    &#125;,<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">action</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">obj</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;abc&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>调用action方法时，会为obj新增一个name属性，但Vue不会得到任何通知，新增的属性也不是响应式的，Vue不知道这个obj新增了属性等同于不知道我们使用了array.length = 0来清空数组一样。而vm.$set就用来解决这类问题。</p><h4 id="Array的处理"><a href="#Array的处理" class="headerlink" title="Array的处理"></a>Array的处理</h4><p>首先创建set方法，并规定接收与$set规定的参数一致的三个参数，并对数组进行处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, val</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(target) &amp;&amp; <span class="hljs-title function_">isValidArrayIndex</span>(<span class="hljs-params">key</span>) &#123;<br>        target.<span class="hljs-property">length</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(target.<span class="hljs-property">length</span>, key)<br>        target.<span class="hljs-title function_">splice</span>(key, <span class="hljs-number">1</span>, val)<br>        <span class="hljs-keyword">return</span> val<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码中，如果target是数组并且key是有效的索引值，就先设置length属性，这样如果我们传的索引值大于length，就需要让target的lenth等于索引。接下来通过splice方法把val设置到target的指定位置，当我们使用splice方法时，数组拦截器会侦测到target变化，自动把新增的val转换成响应式的，最后返回val。</p><h4 id="key已经存在target中"><a href="#key已经存在target中" class="headerlink" title="key已经存在target中"></a>key已经存在target中</h4><p>因为key已存在target中，所以它已经被侦测了变化，此时修改数据直接用key和val就好，修改的动作会被侦测到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, val</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(target) &amp;&amp; <span class="hljs-title function_">isValidArrayIndex</span>(<span class="hljs-params">key</span>) &#123;<br>        target.<span class="hljs-property">length</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(target.<span class="hljs-property">length</span>, key)<br>        target.<span class="hljs-title function_">splice</span>(key, <span class="hljs-number">1</span>, val)<br>        <span class="hljs-keyword">return</span> val<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(key <span class="hljs-keyword">in</span> target &amp;&amp; !(key <span class="hljs-keyword">in</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)) &#123;<br>        target[key] = val<br>        <span class="hljs-keyword">return</span> val<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="处理新增的属性"><a href="#处理新增的属性" class="headerlink" title="处理新增的属性"></a>处理新增的属性</h4><p>现在处理在target上新增的key：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">set</span>(<span class="hljs-params">target, key, val</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(target) &amp;&amp; <span class="hljs-title function_">isValidArrayIndex</span>(<span class="hljs-params">key</span>) &#123;<br>        target.<span class="hljs-property">length</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">max</span>(target.<span class="hljs-property">length</span>, key)<br>        target.<span class="hljs-title function_">splice</span>(key, <span class="hljs-number">1</span>, val)<br>        <span class="hljs-keyword">return</span> val<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(key <span class="hljs-keyword">in</span> target &amp;&amp; !(key <span class="hljs-keyword">in</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)) &#123;<br>        target[key] = val<br>        <span class="hljs-keyword">return</span> val<br>    &#125;<br>    <br>    <span class="hljs-comment">// 新增</span><br>    <br>    <span class="hljs-keyword">const</span> ob = target.<span class="hljs-property">__ob__</span><br>    <span class="hljs-keyword">if</span>(target.<span class="hljs-property">_isVue</span> || (ob &amp;&amp; ob.<span class="hljs-property">vmCount</span>)) &#123;<br>        process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; <span class="hljs-title function_">warn</span>(<br>            <span class="hljs-string">&#x27;Avoid adding reactive properties to a Vue instance or its root $data&#x27;</span> + <br>            <span class="hljs-string">&#x27;at runtime - declare it upfront in the data option&#x27;</span><br>        )<br>        <span class="hljs-keyword">return</span> val<br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(!ob) &#123;<br>        target[key] = val<br>        <span class="hljs-keyword">return</span> val<br>    &#125;<br>    <br>    <span class="hljs-title function_">defineReactive</span>(ob, value, key, val)<br>    ob.<span class="hljs-property">dep</span>.<span class="hljs-title function_">notify</span>()<br>    <span class="hljs-keyword">return</span> val<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码，首先获取了target的__ob__属性，然后处理边界条件即“target不能是Vue实例或Vue实例的跟数据对象”和target不是响应式的情况。若果它身上没有__ob__，则不是响应式的，直接用key和val设置即可。如果前边所有条件都不满足那么说明这是新增的属性，使用defineReactive将新增的属性转成getter/setter即可。</p><h3 id="vm-delete"><a href="#vm-delete" class="headerlink" title="vm.$delete"></a>vm.$delete</h3><p>vm.$delete的作用是删除数据中的某个属性，因为Vue2采用Object.defineProperty实现监听，delete关键字删除无法侦测到。</p><h4 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h4><p><code>vm.$delete(target , key)</code></p><blockquote><p>删除对象的属性，如果对象是响应式的，需要确保删除能更新视图。同样的，目标不能是Vue实例或Vue实例的跟数据对象。</p></blockquote><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>vm.$delete的实现原理和上述代码类似，删除属性后向依赖发消息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">del</span>(<span class="hljs-params">target, key</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(target) &amp;&amp; <span class="hljs-title function_">isValidArrayIndex</span>(key)) &#123;<br>        target.<span class="hljs-title function_">splice</span>(key , l)<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">const</span> ob = (target).<span class="hljs-property">__ob__</span><br>    <span class="hljs-keyword">if</span>(target.<span class="hljs-property">_isVue</span> || (ob &amp;&amp; ob.<span class="hljs-property">vmCount</span>)) &#123;<br>        process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; <span class="hljs-title function_">warn</span>(<br>            <span class="hljs-string">&#x27;Avoid deleting properties on a Vue instance or its root $data&#x27;</span> + <br>            <span class="hljs-string">&#x27;- just set it to null.&#x27;</span><br>        )<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_">hasOwn</span>(target, key) ) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    <span class="hljs-keyword">delete</span> target[key]<br>    <span class="hljs-keyword">if</span>(!ob) &#123;<br>        <span class="hljs-keyword">return</span><br>    &#125;<br>    ob.<span class="hljs-property">dep</span>.<span class="hljs-title function_">notify</span>()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue.js</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>w字总结《JavaScript设计模式与开发实践》（设计原则和编程技巧）</title>
    <link href="/2021/11/22/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8AJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%88%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%EF%BC%89/"/>
    <url>/2021/11/22/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8AJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%88%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E5%92%8C%E7%BC%96%E7%A8%8B%E6%8A%80%E5%B7%A7%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="设计原则和编程技巧"><a href="#设计原则和编程技巧" class="headerlink" title="设计原则和编程技巧"></a>设计原则和编程技巧</h1><h2 id="单一职责原则（SRP）"><a href="#单一职责原则（SRP）" class="headerlink" title="单一职责原则（SRP）"></a>单一职责原则（SRP）</h2><p>SRP原则体现为：一个对象（方法）值做一件事情。</p><h3 id="设计模式中的SRP"><a href="#设计模式中的SRP" class="headerlink" title="设计模式中的SRP"></a>设计模式中的SRP</h3><p>代理模式，迭代器模式，单例模式，装饰者模式都运用到了SRP</p><h4 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h4><p>以图片预加载为例，我们添加虚拟代理来执行预加载图片，本体仅仅负责向页面中添加img标签，这也是他最原始的责任。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// myImage负责向页面添加img标签</span><br><br><span class="hljs-keyword">var</span> myImage = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> imgNode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;img&#x27;</span>)<br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(imgNode)<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-title class_">SetSrc</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"> src </span>)&#123;<br>            imgNode.<span class="hljs-property">src</span> = src<br>        &#125;<br>    &#125;<br>&#125;)()<br><br><span class="hljs-comment">// proxyImage负责图片的预加载，并在预加载完成后把请求交给本体myImage</span><br><span class="hljs-keyword">var</span> proxyImage = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span><br>    img.<span class="hljs-property">onLoad</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        myImage.<span class="hljs-title class_">SetSrc</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">src</span>)<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">setSrc</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">src</span>) &#123;<br>            myImage.<span class="hljs-title class_">SetSrc</span>(<span class="hljs-string">&#x27;加载中图片路径&#x27;</span>)<br>            img.<span class="hljs-property">src</span>=  src<br>        &#125;<br>    &#125;<br>&#125;)()<br><br>proxyImage.<span class="hljs-title function_">setSrc</span>(<span class="hljs-string">&#x27;图片路径&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><p>有这样一段代码，先遍历一个集合，然后往页面中添加一些 div，这些 div 的 innerHTML分别对应集合里的元素：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> appendDiv = <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>,l = data.<span class="hljs-property">legnth</span>;i &lt; l;i++) &#123;<br>        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>        div.<span class="hljs-property">innerHTML</span> = data[i]<br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">appendDiv</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>])<br></code></pre></td></tr></table></figure><p>appendDiv本来只负责渲染数据，但这里他还承担了遍历对象data的职责，如果有一天返回的data格式错误，那么代码会出现问题，需要修改appendDiv内部代码，才能保证功能的正常使用。所以我们需要将遍历过程提取出来，这也是迭代器模式的意义所在，它提供一种方法来访问聚合对象，又不暴露对象的内部表示。</p><p>把迭代聚合对象的职责单独封装在each中，即使以后要增加新的迭代方式，我们只需要修改each，无需改动appendDiv。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> each = <span class="hljs-keyword">function</span>(<span class="hljs-params">obj, callback</span>) &#123;<br>    <span class="hljs-keyword">var</span> value,<br>        i = <span class="hljs-number">0</span>,<br>        length = obj.<span class="hljs-property">length</span>,<br>        isArray = <span class="hljs-title function_">isArraylike</span>(obj) <span class="hljs-comment">// 未实现isArrayLike，可自行实现。</span><br>    <br>    <span class="hljs-keyword">if</span>(isArray) &#123; <span class="hljs-comment">// 迭代类数组</span><br>        <span class="hljs-keyword">for</span>(;i &lt; length; i++) &#123;<br>            callback.<span class="hljs-title function_">call</span>(obj[i],i,obj[i])<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span>(i <span class="hljs-keyword">in</span> obj) &#123;<br>            value = callback.<span class="hljs-title function_">call</span>(obj[i] , i obj[i])<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> obj<br>&#125;<br><br><span class="hljs-keyword">var</span> appendDiv = <span class="hljs-keyword">function</span>(<span class="hljs-params"> data </span>)&#123; <br>    <span class="hljs-title function_">each</span>( data, <span class="hljs-keyword">function</span>(<span class="hljs-params"> i, n </span>)&#123; <br>        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>( <span class="hljs-string">&#x27;div&#x27;</span> ); <br>        div.<span class="hljs-property">innerHTML</span> = n; <br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>( div ); <br>    &#125;); <br>&#125;; <br><span class="hljs-title function_">appendDiv</span>( [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span> ] ); <br><span class="hljs-title function_">appendDiv</span>(&#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>,<span class="hljs-attr">b</span>:<span class="hljs-number">2</span>,<span class="hljs-attr">c</span>:<span class="hljs-number">3</span>,<span class="hljs-attr">d</span>:<span class="hljs-number">4</span>&#125; );<br></code></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>实现一个惰性单例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> createLoginLayer = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> div<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">if</span>(!div) &#123;<br>            div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>            div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;登录窗口&#x27;</span><br>            div.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span><br>            <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br>        &#125;<br>        <span class="hljs-keyword">return</span> div<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>我们把管理单例的职责和创建登录浮窗的职责封装在两个方法中，两者独立变化互不影响，连接起来完成创建唯一登录窗口的功能：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getSingle = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">var</span> result<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> result || (result = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>))<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> createLoginLayer = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    div.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;登录窗口&#x27;</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br>    <span class="hljs-keyword">return</span> div<br>&#125;<br><br><span class="hljs-keyword">var</span> createSingleLoginLayer = <span class="hljs-title function_">getSingle</span>( createLoginLayer ); <br><span class="hljs-keyword">var</span> loginLayer1 = <span class="hljs-title function_">createSingleLoginLayer</span>(); <br><span class="hljs-keyword">var</span> loginLayer2 = <span class="hljs-title function_">createSingleLoginLayer</span>(); <br><br>alert ( loginLayer1 === loginLayer2 ); <span class="hljs-comment">// 输出： true</span><br></code></pre></td></tr></table></figure><h3 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h3><p>使用装饰者模式时，通常让类或对象一开始只具有基本职责，更多的职责在代码运行时被动态的装饰到对象上，从另一个角度看，这也是分离职责的一种方式。</p><h3 id="何时应该分离职责"><a href="#何时应该分离职责" class="headerlink" title="何时应该分离职责"></a>何时应该分离职责</h3><p>SRP 原则是所有原则中最简单也是最难正确运用的原则之一。要明确的是，并不是所有的职责都应该一一分离。一方面，如果随着需求的变化，有两个职责总是同时变化，那就不必分离他们。比如在ajax请求的时候，创建xhr对象和发送xhr请求几乎总是在一起的，那么创建 xhr 对象的职责和发送xhr请求的职责就没有必要分开。<br>另一方面，职责的变化轴线仅当它们确定会发生变化时才具有意义，即使两个职责已经被耦合在一起，但它们还没有发生改变的征兆，那么也许没有必要主动分离它们，在代码需要重构的时候再进行分离也不迟。</p><h3 id="SRP的优缺点"><a href="#SRP的优缺点" class="headerlink" title="SRP的优缺点"></a>SRP的优缺点</h3><p>SRP 原则的优点是降低了单个类或者对象的复杂度，按照职责把对象分解成更小的粒度，这有助于代码的复用，也有利于进行单元测试。当一个职责需要变更的时候，不会影响到其他的职责。但SRP原则也有一些缺点，最明显的是会增加编写代码的复杂度。当我们按照职责把对象分解成更小的粒度之后，实际上也增大了这些对象之间相互联系的难度。</p><h2 id="最少知识原则（LKP）"><a href="#最少知识原则（LKP）" class="headerlink" title="最少知识原则（LKP）"></a>最少知识原则（LKP）</h2><p>一个软件实体应当尽可能少地与其他实体发生相互作用。这里的软件实体是一个广义的概念，不仅包括对象，还包括系统、类、模块、函数、变量等。</p><h3 id="减少对象之间的联系"><a href="#减少对象之间的联系" class="headerlink" title="减少对象之间的联系"></a>减少对象之间的联系</h3><p>最少知识原则要求我们在设计程序时，应当尽量减少对象之间的交互。如果两个对象之间不必彼此直接通信，那么这两个对象就不要发生直接的相互联系。常见的做法是引入一个第三者对象，来承担这些对象之间的通信作用。如果一些对象需要向另一些对象发起请求，可以通过第三者对象来转发这些请求。</p><h3 id="设计模式中的LKP"><a href="#设计模式中的LKP" class="headerlink" title="设计模式中的LKP"></a>设计模式中的LKP</h3><ol><li>中介者模式</li></ol><p>通过增加一个中介者对象，让所有的相关对象都通过中介者对象来通信，而不是互相引用。所以，当一个对象发生改变时，只需要通知中介者对象即可。</p><h3 id="封装在最少知识原则中的体现"><a href="#封装在最少知识原则中的体现" class="headerlink" title="封装在最少知识原则中的体现"></a>封装在最少知识原则中的体现</h3><p>封装在很大程度上表达的是数据的隐藏。一个模块或者对象可以将内部的数据或者实现细节隐藏起来，只暴露必要的接口API供外界访问。对象之间难免产生联系，当一个对象必须引用另外一个对象的时候，我们可以让对象只暴露必要的接口，让对象之间的联系限制在最小的范围之内。</p><h2 id="开放-封闭原则（OCP）"><a href="#开放-封闭原则（OCP）" class="headerlink" title="开放-封闭原则（OCP）"></a>开放-封闭原则（OCP）</h2><p>当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，但是不允许改动程序的源代码。</p><h3 id="利用对象的多态性消除条件分支"><a href="#利用对象的多态性消除条件分支" class="headerlink" title="利用对象的多态性消除条件分支"></a>利用对象的多态性消除条件分支</h3><p>过多的条件分支语句是造成程序违反开放-封闭原则的常见原因。每当需要添加新的if语句时都需要修改原函数，switch-case也是同样的道理，对于某些条件分支语句，我们可以通过对象的多态重构他们。这里通过一个例子来说明。</p><p>我们实现一个让动物发出叫声的例子，首先提供一段不符合原则的代码，每当我们增加一种动物，就需要修改函数的内部实现</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> makeSound = <span class="hljs-keyword">function</span>(<span class="hljs-params">animal</span>) &#123;<br>    <span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Duck</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;嘎&#x27;</span>)<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Chicken</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;咯&#x27;</span>)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Duck</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Chicken</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-title function_">makeSound</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Duck</span>())<br><span class="hljs-title function_">makeSound</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Chicken</span>())<br></code></pre></td></tr></table></figure><p>如果现在需要添加一个狗，那必须修改makeSound的内部实现才可以，现在我们利用多态的思想，将程序中不变的部分分离出来（动物叫），将可变的部分封装（不同动物叫声不同），这样程序变得可扩展，想要添加狗叫时无需去修改makeSound函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> makeSound = <span class="hljs-keyword">function</span>(<span class="hljs-params">animal</span>) &#123;<br>    animal.<span class="hljs-title function_">sound</span>()<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Duck</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-title class_">Duck</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sound</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;嘎&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Chicken</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-title class_">Chicken</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">sound</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;咯&#x27;</span>)<br>&#125;<br><br><span class="hljs-title function_">makeSound</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Duck</span>())<br><span class="hljs-title function_">makeSound</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Chicken</span>())<br></code></pre></td></tr></table></figure><h3 id="其他帮助遵守开放-封闭原则的代码"><a href="#其他帮助遵守开放-封闭原则的代码" class="headerlink" title="其他帮助遵守开放-封闭原则的代码"></a>其他帮助遵守开放-封闭原则的代码</h3><ol><li>hook</li></ol><p>hook也是分离变化的方式，我们在程序可能变化的地方添加钩子函数，钩子的结果决定了程序的下一步执行，这样给代码提供了多种执行结果的可能性。</p><ol start="2"><li>回调函数</li></ol><p>回调函数是一种特殊的hook，我们可以将一部分易于变化的逻辑封装在回调函数中，将回调当做参数传入一个稳定和封闭的函数中，回调函数真心很时，程序因为回调函数内部逻辑不通而产生不同结果。</p><h3 id="设计模式中的开放-封闭原则"><a href="#设计模式中的开放-封闭原则" class="headerlink" title="设计模式中的开放-封闭原则"></a>设计模式中的开放-封闭原则</h3><ol><li>发布-订阅模式</li><li>模板方法模式</li><li>策略模式</li><li>代理模式</li><li>职责链模式</li></ol><h2 id="接口和面向接口编程"><a href="#接口和面向接口编程" class="headerlink" title="接口和面向接口编程"></a>接口和面向接口编程</h2><p>这里的接口定义是<strong>对象能响应的请求的集合</strong>。并不是我们常说的一个库或模块对外提供的api接口。</p><p>Java中的抽象类和interface的作用无非两点：</p><ul><li>通过向上转型隐藏对象的真正类型，表现对象的多态性。</li><li>约定类与类之间的契约行为。</li></ul><p>在JavaScript中，类是一个相对模糊的概念，不需要利用两者给对象进行“向上转型”。除了基本类型外，其他对象都可以被看做“天生”被“向上转型”成Object类型，所以在编写代码时，如果忽略了检查参数类型或检查实现方法则会有可能在代码中留下隐藏的bug。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"> obj </span>)&#123; <br> obj.<span class="hljs-title function_">show</span>(); <span class="hljs-comment">// Uncaught TypeError: undefined is not a function </span><br>&#125; <br><span class="hljs-keyword">var</span> myObject = &#123;&#125;; <span class="hljs-comment">// myObject 对象没有 show 方法</span><br><span class="hljs-title function_">show</span>( myObject );<br></code></pre></td></tr></table></figure><p>这时我们需要对show方法添加防御性代码，以保证代码可用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params"> obj </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( obj &amp;&amp; <span class="hljs-keyword">typeof</span> obj.<span class="hljs-property">show</span> === <span class="hljs-string">&#x27;function&#x27;</span> )&#123; <br>        obj.<span class="hljs-title function_">show</span>(); <br>    &#125; <br>&#125;<br></code></pre></td></tr></table></figure><h2 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h2><h3 id="提炼函数"><a href="#提炼函数" class="headerlink" title="提炼函数"></a>提炼函数</h3><p>如果代码中有代码可以被独立出来，那么最好将其放在另一个独立的函数中，这很常见，这样的好处有以下几点：</p><ul><li>避免出现超大函数</li><li>独立出来的函数有助于代码复用</li><li>独立出来的函数容易被覆写</li><li>独立出来的函数如果拥有良好命名，则其本身即为一个良好的注释</li></ul><h3 id="合并重复的条件片段"><a href="#合并重复的条件片段" class="headerlink" title="合并重复的条件片段"></a>合并重复的条件片段</h3><p>函数内的一些条件分支语句很容易散布重复代码，有必要进行一些合并去重工作，下面是一个分页函数的例子。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> paging = <span class="hljs-keyword">function</span>(<span class="hljs-params"> currPage </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( currPage &lt;= <span class="hljs-number">0</span> )&#123; <br>        currPage = <span class="hljs-number">0</span>; <br>        <span class="hljs-title function_">jump</span>( currPage ); <span class="hljs-comment">// 跳转 </span><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( currPage &gt;= totalPage )&#123; <br>        currPage = totalPage; <br>        <span class="hljs-title function_">jump</span>( currPage ); <span class="hljs-comment">// 跳转</span><br>    &#125;<span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-title function_">jump</span>( currPage ); <span class="hljs-comment">// 跳转</span><br>    &#125; <br>&#125;;<br></code></pre></td></tr></table></figure><p>很容易可以发现，jump函数在每个分支内都存在，可以将它独立出来。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> paging = <span class="hljs-keyword">function</span>(<span class="hljs-params"> currPage </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( currPage &lt;= <span class="hljs-number">0</span> )&#123; <br>        currPage = <span class="hljs-number">0</span>; <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( currPage &gt;= totalPage )&#123; <br>        currPage = totalPage; <br>    &#125; <br>    <span class="hljs-title function_">jump</span>( currPage ); <span class="hljs-comment">// 把 jump 函数独立出来</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="条件分支语句提炼为函数"><a href="#条件分支语句提炼为函数" class="headerlink" title="条件分支语句提炼为函数"></a>条件分支语句提炼为函数</h3><p>复杂的条件分支是导致程序代码难以阅读和理解的原因之一，且容易导致一个庞大的函数。举一个计算商品价格的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getPrice = <span class="hljs-keyword">function</span>(<span class="hljs-params"> price </span>)&#123; <br>    <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <br>    <span class="hljs-keyword">if</span> ( date.<span class="hljs-title function_">getMonth</span>() &gt;= <span class="hljs-number">6</span> &amp;&amp; date.<span class="hljs-title function_">getMonth</span>() &lt;= <span class="hljs-number">9</span> )&#123; <span class="hljs-comment">// 夏天</span><br>        <span class="hljs-keyword">return</span> price * <span class="hljs-number">0.8</span>; <br>    &#125; <br>    <span class="hljs-keyword">return</span> price; <br>&#125;;<br></code></pre></td></tr></table></figure><p>观察函数中的条件分支语句，它的目的只是为了判断当前是否处于夏天，可以将其提炼成单独的函数，既能更准确表达意思，同事函数名本身又能起到注释的作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isSummer = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">var</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(); <br>    <span class="hljs-keyword">return</span> date.<span class="hljs-title function_">getMonth</span>() &gt;= <span class="hljs-number">6</span> &amp;&amp; date.<span class="hljs-title function_">getMonth</span>() &lt;= <span class="hljs-number">9</span>; <br>&#125;; <br><span class="hljs-keyword">var</span> getPrice = <span class="hljs-keyword">function</span>(<span class="hljs-params"> price </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( <span class="hljs-title function_">isSummer</span>() )&#123; <span class="hljs-comment">// 夏天</span><br>        <span class="hljs-keyword">return</span> price * <span class="hljs-number">0.8</span>; <br>    &#125; <br>    <span class="hljs-keyword">return</span> price; <br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="合理使用循环"><a href="#合理使用循环" class="headerlink" title="合理使用循环"></a>合理使用循环</h3><p>在函数体内，如果有些代码实际上负责的是一些重复性的工作，那么合理利用循环不仅可以完成同样的功能，还可以使代码量更少。</p><h3 id="提前让函数退出代替嵌套条件分支"><a href="#提前让函数退出代替嵌套条件分支" class="headerlink" title="提前让函数退出代替嵌套条件分支"></a>提前让函数退出代替嵌套条件分支</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> del = <span class="hljs-keyword">function</span>(<span class="hljs-params"> obj </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( obj.<span class="hljs-property">isReadOnly</span> )&#123; <span class="hljs-comment">// 反转 if 表达式</span><br>        <span class="hljs-keyword">return</span>; <br>    &#125; <br>    <span class="hljs-keyword">if</span> ( obj.<span class="hljs-property">isFolder</span> )&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">deleteFolder</span>( obj ); <br>    &#125; <br>    <span class="hljs-keyword">if</span> ( obj.<span class="hljs-property">isFile</span> )&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_">deleteFile</span>( obj ); <br>    &#125; <br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="传递对象参数代替过长的参数列表"><a href="#传递对象参数代替过长的参数列表" class="headerlink" title="传递对象参数代替过长的参数列表"></a>传递对象参数代替过长的参数列表</h3><p>当函数接收多个参数且数量过多时，我们需要明白所有参数的意义，并要小心是否有参数未传递或颠倒了位置，或我们想添加参数时需要修改大量代码。</p><p>我们可以将参数放在对象内，这样我们无需关心参数数量和顺序，只要保证参数对应的key不变即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> setUserInfo = <span class="hljs-keyword">function</span>(<span class="hljs-params"> obj </span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;id= &#x27;</span> + obj.<span class="hljs-property">id</span> ); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;name= &#x27;</span> + obj.<span class="hljs-property">name</span> ); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;address= &#x27;</span> + obj.<span class="hljs-property">address</span> ); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;sex= &#x27;</span> + obj.<span class="hljs-property">sex</span> ); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;mobile= &#x27;</span> + obj.<span class="hljs-property">mobile</span> ); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;qq= &#x27;</span> + obj.<span class="hljs-property">qq</span> ); <br>&#125;; <br><span class="hljs-title function_">setUserInfo</span>(&#123; <br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1314</span>, <br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;sven&#x27;</span>, <br>    <span class="hljs-attr">address</span>: <span class="hljs-string">&#x27;shenzhen&#x27;</span>, <br>    <span class="hljs-attr">sex</span>: <span class="hljs-string">&#x27;male&#x27;</span>, <br>    <span class="hljs-attr">mobile</span>: <span class="hljs-string">&#x27;137********&#x27;</span>, <br>    <span class="hljs-attr">qq</span>: <span class="hljs-number">377876679</span> <br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="尽量减少参数数量"><a href="#尽量减少参数数量" class="headerlink" title="尽量减少参数数量"></a>尽量减少参数数量</h3><p>一个函数的参数过多是让人望而生畏的，我们需要搞清楚参数的含义，小心翼翼的传递，所以我们更喜欢不需要任何参数就能使用的函数，所以我们应该尽量减少参数的数量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> draw = <span class="hljs-keyword">function</span>(<span class="hljs-params"> width, height, square </span>)&#123;&#125;;<br><br><span class="hljs-comment">// 实际上正方形的面积是可以通过 width 和 height 计算出来的，于是我们可以把参数 square从 draw 函数中去掉</span><br><br><span class="hljs-keyword">var</span> draw = <span class="hljs-keyword">function</span>(<span class="hljs-params"> width, height </span>)&#123; <br> <span class="hljs-keyword">var</span> square = width * height; <br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="少用三目运算符"><a href="#少用三目运算符" class="headerlink" title="少用三目运算符"></a>少用三目运算符</h3><p>三目运算符仅仅在代码量上可以胜过if-else，但却是以牺牲代码可读性和可维护性为前提的。如果条件分支逻辑简单清晰，我们可以使用三目运算符，但如果逻辑复杂，还是if-else更易于维护和阅读，比如下边的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> ( !aup || !bup ) &#123; <br>     <span class="hljs-keyword">return</span> a === doc ? -<span class="hljs-number">1</span> : <br>     b === doc ? <span class="hljs-number">1</span> : <br>     aup ? -<span class="hljs-number">1</span> : <br>     bup ? <span class="hljs-number">1</span> : <br>     sortInput ? <br>     ( indexOf.<span class="hljs-title function_">call</span>( sortInput, a ) - indexOf.<span class="hljs-title function_">call</span>( sortInput, b ) ) : <br>     <span class="hljs-number">0</span>; <br>&#125;<br></code></pre></td></tr></table></figure><h3 id="链式调用的好处与坏处"><a href="#链式调用的好处与坏处" class="headerlink" title="链式调用的好处与坏处"></a>链式调用的好处与坏处</h3><p>jQuery中可以通过链式调用非常方便的实现需求，且在阅读上不会有很多困难，又能剩下很多的字符以及中间变量，但如果有一条链中有错误出现，我们需要将链拆开并加上断点才能定位错误。</p><h3 id="用return退出多重循环"><a href="#用return退出多重循环" class="headerlink" title="用return退出多重循环"></a>用return退出多重循环</h3><p>假设在函数体内有一个两重循环语句，我们需要在内层循环中判断，当达到某个临界条件时退出外层的循环。我们大多数时候会引入一个控制标记变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">var</span> flag = <span class="hljs-literal">false</span>; <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ )&#123; <br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++ )&#123; <br>            <span class="hljs-keyword">if</span> ( i * j &gt;<span class="hljs-number">30</span> )&#123; <br>                flag = <span class="hljs-literal">true</span>; <br>                <span class="hljs-keyword">break</span>; <br>            &#125; <br>        &#125;    <br>        <span class="hljs-keyword">if</span> ( flag === <span class="hljs-literal">true</span> )&#123; <br>            <span class="hljs-keyword">break</span>; <br>        &#125; <br>    &#125; <br>&#125;; <br></code></pre></td></tr></table></figure><p>第二种做法是设置循环标记：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-attr">outerloop</span>: <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ )&#123; <br>        <span class="hljs-attr">innerloop</span>: <br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++ )&#123; <br>            <span class="hljs-keyword">if</span> ( i * j &gt;<span class="hljs-number">30</span> )&#123; <br>                <span class="hljs-keyword">break</span> outerloop; <br>            &#125; <br>        &#125; <br>    &#125; <br>&#125;; <br></code></pre></td></tr></table></figure><p>这两种做法无疑都让人头晕目眩，更简单的做法是在需要中止循环的时候直接退出整个方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ )&#123; <br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++ )&#123; <br>            <span class="hljs-keyword">if</span> ( i * j &gt;<span class="hljs-number">30</span> )&#123; <br>                <span class="hljs-keyword">return</span>; <br>            &#125; <br>        &#125; <br>    &#125; <br>&#125;; <br></code></pre></td></tr></table></figure><p>当然用 return 直接退出方法会带来一个问题，如果在循环之后还有一些将被执行的代码呢？<br>如果我们提前退出了整个方法，这些代码就得不到被执行的机会：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ )&#123; <br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++ )&#123; <br>            <span class="hljs-keyword">if</span> ( i * j &gt;<span class="hljs-number">30</span> )&#123; <br>                <span class="hljs-keyword">return</span>; <br>            &#125; <br>        &#125; <br>    &#125; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( i ); <span class="hljs-comment">// 这句代码没有机会被执行</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>为了解决这个问题，我们可以把循环后面的代码放到 return 后面，如果代码比较多，就应该把它们提炼成一个单独的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> print = <span class="hljs-keyword">function</span>(<span class="hljs-params"> i </span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( i ); <br>&#125;; <br><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ )&#123; <br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++ )&#123; <br>            <span class="hljs-keyword">if</span> ( i * j &gt;<span class="hljs-number">30</span> )&#123; <br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_">print</span>( i ); <br>            &#125; <br>        &#125; <br>    &#125; <br>&#125;; <br><span class="hljs-title function_">func</span>();<br></code></pre></td></tr></table></figure><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>EDG夺冠flag实现了1/4，第一本书结束了，这本书中的例子和讲解都做的非常好，文章中并没有将其全部提现出来，值得多读几遍细细品味，浅显易懂的语言风格中夹杂着深奥的编程思想，值得入手一本。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>w字总结《JavaScript设计模式与开发实践》（设计模式）（下）</title>
    <link href="/2021/11/19/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8AJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%89%EF%BC%88%E4%B8%8B%EF%BC%89/"/>
    <url>/2021/11/19/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8AJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%89%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式（下）"><a href="#设计模式（下）" class="headerlink" title="设计模式（下）"></a>设计模式（下）</h1><h2 id="模板方法模式"><a href="#模板方法模式" class="headerlink" title="模板方法模式"></a>模板方法模式</h2><blockquote><p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></blockquote><p>模板方法模式由两部分组成，抽象父类和具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现公共方法和封装子类中方法的执行顺序，子类通过继承它，也继承了算法结构，且子类可选择则重写父类方法。</p><h3 id="泡茶泡咖啡"><a href="#泡茶泡咖啡" class="headerlink" title="泡茶泡咖啡"></a>泡茶泡咖啡</h3><p>首先我们先对比一下泡茶和泡咖啡的步骤</p><table><thead><tr><th>步骤</th><th>茶</th><th>咖啡</th></tr></thead><tbody><tr><td>1</td><td>烧水</td><td>烧水</td></tr><tr><td>2</td><td>泡茶叶</td><td>冲泡咖啡</td></tr><tr><td>3</td><td>倒入杯子</td><td>倒入杯子</td></tr><tr><td>4</td><td>加柠檬</td><td>加糖加奶</td></tr></tbody></table><p>可以看出它们只有在2和4上有着差别，这种情况可以使用模板方法模式。</p><p>我们可以将上述步骤抽象成四步：烧水，冲泡，倒入杯子，加调料。接下来用代码描述。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Beverage</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;; <br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">boilWater</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;把水煮沸&#x27;</span> ); <br>&#125;; <br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;; <span class="hljs-comment">// 空方法，应该由子类重写</span><br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;; <span class="hljs-comment">// 空方法，应该由子类重写</span><br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;; <span class="hljs-comment">// 空方法，应该由子类重写</span><br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">boilWater</span>(); <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">brew</span>(); <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pourInCup</span>(); <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addCondiments</span>(); <br>&#125;;<br></code></pre></td></tr></table></figure><p>抽象类饮料定义完毕，接下来创建咖啡类，继承饮料类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Coffee</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-title class_">Coffee</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Beverage</span>()<br><br><span class="hljs-title class_">Coffee</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;沸水冲泡☕&#x27;</span>)<br>&#125;<br><br><span class="hljs-title class_">Coffee</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;把☕倒进杯子&#x27;</span>)<br>&#125;<br><br><span class="hljs-title class_">Coffee</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加糖加奶&#x27;</span>)<br>&#125;<br><br><span class="hljs-keyword">var</span> myCoffee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Coffee</span>()<br>myCoffee.<span class="hljs-title function_">init</span>()<br></code></pre></td></tr></table></figure><p>myCoffee调用init时，由于myCoffee和Coffee原型上都没有对应方法，所以会顺着原型链委托给父类Beverage上的init方法，而Beverage.prototype.init中已经定义好了制作饮料的顺序。</p><p>同理。创建茶类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Tea</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;; <br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Beverage</span>(); <br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;用沸水浸泡茶叶&#x27;</span> ); <br>&#125;; <br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;把茶倒进杯子&#x27;</span> ); <br>&#125;; <br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;加柠檬&#x27;</span> ); <br>&#125;; <br><span class="hljs-keyword">var</span> tea = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tea</span>(); <br>tea.<span class="hljs-title function_">init</span>();<br></code></pre></td></tr></table></figure><p>Beverage.prototype.init方法就是模版方法，因为该方法中封装了子类的算法框架，指导子类以何种顺序去执行那些方法。</p><h3 id="优化的模版方法模式"><a href="#优化的模版方法模式" class="headerlink" title="优化的模版方法模式"></a>优化的模版方法模式</h3><p>我们在Beverage.prototype.init中已经定义了四个方法的执行，如果子类忘记实现这四个方法中的一个或更多，子类会顺着原型链找到Beverage.prototype中对应的方法，而它是一个空方法，显然不是我们想要的。我们可以在父类的抽象方法中抛出异常，提醒编码人员。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写brew方法&#x27;</span>)<br>&#125; <span class="hljs-comment">// 空方法，子类重写</span><br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写pourInCup方法&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写addCondiments方法&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="钩子方法"><a href="#钩子方法" class="headerlink" title="钩子方法"></a>钩子方法</h3><p>以冲咖啡为例，有些人不加调料，但是我们已经定义好了制作的步骤，如何才能不受这个约束呢？钩子函数可以解决这个问题，我们在父类中容易变化的地方放置钩子，使不使用由子类决定，钩子函数决定了后边的执行步骤即程序走向。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Beverage</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;<br><br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">boilWater</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;boil water&#x27;</span>);<br>&#125;<br><br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写brew方法&#x27;</span>)<br>&#125; <span class="hljs-comment">// 空方法，子类重写</span><br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写pourInCup方法&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;子类必须重写addCondiments方法&#x27;</span>)<br>&#125;<br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">customerWantsCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">    Beverage.prototype.init是模板方法，其中封装了子类的算法框架，指导子类以何种顺序执行哪些方法。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-title class_">Beverage</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">boilWater</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">brew</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">pourInCup</span>()<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">customerWantsCondiments</span>()) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addCondiments</span>()<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CoffeeWithHook</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Beverage</span>()<br><br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;沸水冲☕&#x27;</span>);<br>&#125;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;☕倒进杯子&#x27;</span>);<br>&#125;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加糖和牛奶&#x27;</span>);<br>&#125;<br><span class="hljs-title class_">CoffeeWithHook</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">customerWantsCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// 交互操作是否需要调料</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>&#125;<br><span class="hljs-keyword">var</span> coffee = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CoffeeWithHook</span>()<br>coffee.<span class="hljs-title function_">init</span>()<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Tea</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;<br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Beverage</span>()<br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">brew</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;沸水冲茶叶&#x27;</span>);<br>&#125;<br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">pourInCup</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;茶倒进杯子&#x27;</span>);<br>&#125;<br><span class="hljs-title class_">Tea</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">addCondiments</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;加🍋&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">var</span> tea = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tea</span>()<br>tea.<span class="hljs-title function_">init</span>()<br></code></pre></td></tr></table></figure><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><blockquote><p>运用共享技术有效地支持大量细粒度的对象。</p></blockquote><p>享元模式要求将对象的属性划分为内部状态与外部状态（状态在这里通常指属性）。享元模式的目标是尽量减少共享对象的数量。</p><ul><li>内部状态存储于对象内部。</li><li>内部状态可以被一些对象共享。 </li><li>内部状态独立于具体的场景，通常不会改变。</li><li>外部状态取决于具体的场景，并根据场景而变化，外部状态不能被共享。</li></ul><h3 id="享元模式适用性"><a href="#享元模式适用性" class="headerlink" title="享元模式适用性"></a>享元模式适用性</h3><p>享元模式带来的好处很大程度上取决于如何使用以及何时使用，一般来说，以下情况发生时便可以使用享元模式。</p><ul><li>一个程序中使用了大量的相似对象。</li><li>由于使用了大量对象，造成很大的内存开销。</li><li>对象的大多数状态都可以变为外部状态。</li><li>剥离出对象的外部状态之后，可以用相对较少的共享对象取代大量对象。</li></ul><h2 id="职责链模式"><a href="#职责链模式" class="headerlink" title="职责链模式"></a>职责链模式</h2><blockquote><p>将多个对象连成一条链，沿这个链传递请求，直到有一个对象处理它，同时传递过程也被终止。</p></blockquote><h3 id="线上售卖手机"><a href="#线上售卖手机" class="headerlink" title="线上售卖手机"></a>线上售卖手机</h3><p>情境：假设我们负责一个售卖手机的电商网站，经过分别交纳500元定金和200元定金的两轮预定后（订单已在此时生成），现在已经到了正式购买的阶段。公司针对支付过定金的用户有一定的优惠政策。在正式购买后，已经支付过500元定金的用户会收到100元的商城优惠券，200 元定金的用户可以收到50元的优惠券，而之前没有支付定金的用户只能进入普通购买模式，也就是没有优惠券，且在库存有限的情况下不一定保证能买到。</p><p>我们会收到几个字段：</p><ul><li>orderType：订单类型（定金和普通购买），1代表500定金，2代表200定金，3代表普通用户</li><li>pay：是否已支付定金。值为true或者false,虽然用户已经下过500元定金的订单，但如果他一直没有支付定金，现在只能降级进入普通购买模式。</li><li>stock：普通购买的手机库存量，支付过定金的不受影响。</li></ul><p>如果我们正常写业务代码，很有可能写成if-else if-else的形式，虽然得到了结果但代码可读性和可维护性很差，接下来用职责链模式重构代码。</p><h3 id="职责链模式重构代码"><a href="#职责链模式重构代码" class="headerlink" title="职责链模式重构代码"></a>职责链模式重构代码</h3><p>首先把购买的三种情况变成三个函数,接收上边收到的三个字段，并约定如果节点不能处理请求，返回指定字符串<code>nextSuccessor</code>表示需要向后传递。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> order500 = <span class="hljs-keyword">function</span>(<span class="hljs-params"> orderType, pay, stock </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( orderType === <span class="hljs-number">1</span> &amp;&amp; pay === <span class="hljs-literal">true</span> )&#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;500 元定金预购，得到 100 优惠券&#x27;</span> ); <br>    &#125;<span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nextSuccessor&#x27;</span>; <span class="hljs-comment">// 我不知道下一个节点是谁，反正把请求往后面传递</span><br>    &#125; <br>&#125;; <br><span class="hljs-keyword">var</span> order200 = <span class="hljs-keyword">function</span>(<span class="hljs-params"> orderType, pay, stock </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( orderType === <span class="hljs-number">2</span> &amp;&amp; pay === <span class="hljs-literal">true</span> )&#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;200 元定金预购，得到 50 优惠券&#x27;</span> ); <br>    &#125;<span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nextSuccessor&#x27;</span>; <span class="hljs-comment">// 我不知道下一个节点是谁，反正把请求往后面传递</span><br>    &#125; <br>&#125;; <br><span class="hljs-keyword">var</span> orderNormal = <span class="hljs-keyword">function</span>(<span class="hljs-params"> orderType, pay, stock </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( stock &gt; <span class="hljs-number">0</span> )&#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;普通购买，无优惠券&#x27;</span> ); <br>    &#125;<span class="hljs-keyword">else</span>&#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;手机库存不足&#x27;</span> ); <br>    &#125; <br>&#125;;<br></code></pre></td></tr></table></figure><p>然后将函数包装金职责链节点，定义一个构造函数，new Chain的时候传递的参数为需要包装的函数，同时拥有实例属性this.successor，表示在链中的下一个节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Chain.prototype.setNextSuccessor 指定在链中的下一个节点</span><br><span class="hljs-comment">// Chain.prototype.passRequest 传递请求给某个节点</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Chain</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> fn </span>)&#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span> = fn; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span> = <span class="hljs-literal">null</span>; <br>&#125;; <br><span class="hljs-title class_">Chain</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">setNextSuccessor</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> successor </span>)&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span> = successor; <br>&#125;;<br><br><span class="hljs-title class_">Chain</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">passRequest</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> ret = <span class="hljs-variable language_">this</span>.<span class="hljs-property">fn</span>.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> ); <br>    <span class="hljs-keyword">if</span> ( ret === <span class="hljs-string">&#x27;nextSuccessor&#x27;</span> )&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span>.<span class="hljs-property">passRequest</span>.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span>, <span class="hljs-variable language_">arguments</span> ); <br>    &#125; <br>    <span class="hljs-keyword">return</span> ret;<br>&#125;<br></code></pre></td></tr></table></figure><p>将三个订单函数包装成为职责链的节点，并定义顺序，最后把请求传递给第一个节点。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> chainOrder500 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>( order500 ); <br><span class="hljs-keyword">var</span> chainOrder200 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>( order200 ); <br><span class="hljs-keyword">var</span> chainOrderNormal = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>( orderNormal );<br><br>chainOrder500.<span class="hljs-title function_">setNextSuccessor</span>( chainOrder200 ); <br>chainOrder200.<span class="hljs-title function_">setNextSuccessor</span>( chainOrderNormal );<br><br>chainOrder500.<span class="hljs-title function_">passRequest</span>( <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span> ); <span class="hljs-comment">// 输出：500 元定金预购，得到 100 优惠券</span><br>chainOrder500.<span class="hljs-title function_">passRequest</span>( <span class="hljs-number">2</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span> ); <span class="hljs-comment">// 输出：200 元定金预购，得到 50 优惠券</span><br>chainOrder500.<span class="hljs-title function_">passRequest</span>( <span class="hljs-number">3</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span> ); <span class="hljs-comment">// 输出：普通购买，无优惠券</span><br>chainOrder500.<span class="hljs-title function_">passRequest</span>( <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">0</span> ); <span class="hljs-comment">// 输出：手机库存不足</span><br></code></pre></td></tr></table></figure><p>上述代码完成一个灵活的职责链模式的实现，如果又推出了300元定金的活动，那我们只需要添加一个节点即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> order300 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br> <span class="hljs-comment">// 具体实现略 </span><br>&#125;; <br>chainOrder300= <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>( order300 ); <br>chainOrder500.<span class="hljs-title function_">setNextSuccessor</span>( chainOrder300); <br>chainOrder300.<span class="hljs-title function_">setNextSuccessor</span>( chainOrder200);<br></code></pre></td></tr></table></figure><h3 id="异步的职责链"><a href="#异步的职责链" class="headerlink" title="异步的职责链"></a>异步的职责链</h3><p>在业务场景中，经常会遇到异步的问题，比如我们要在节点中发起AJAX请求，请求返回的结果决定是否继续在职责链中passRequest。这时候需要我们暴露一个手动传递请求的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Chain</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">next</span>= <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span> &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span>.<span class="hljs-property">passRequest</span>.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">successor</span>, <span class="hljs-variable language_">arguments</span> ); <br>&#125;;<br></code></pre></td></tr></table></figure><p>举个<del>栗子</del>例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> fn1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-number">1</span> ); <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;nextSuccessor&#x27;</span>; <br>&#125;); <br><span class="hljs-keyword">var</span> fn2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-number">2</span> ); <br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span>; <br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>        self.<span class="hljs-title function_">next</span>(); <br>    &#125;, <span class="hljs-number">1000</span> ); <br>&#125;); <br><span class="hljs-keyword">var</span> fn3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Chain</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-number">3</span> ); <br>&#125;); <br>fn1.<span class="hljs-title function_">setNextSuccessor</span>( fn2 ).<span class="hljs-title function_">setNextSuccessor</span>( fn3 ); <br>fn1.<span class="hljs-title function_">passRequest</span>();<br></code></pre></td></tr></table></figure><h3 id="用AOP实现职责链"><a href="#用AOP实现职责链" class="headerlink" title="用AOP实现职责链"></a>用AOP实现职责链</h3><p>在之前的职责链实现中，我们利用了一个Chain类来把普通函数包装成职责链的节点。其实利用JavaScript的函数式特性，有一种更加方便的方法来创建职责链。</p><p>下面我们改写一下<a href="https://juejin.cn/post/7031003499898880037#heading-16">高阶函数实现AOP</a>中的Function.prototype.after函数，使得第一个函数返回’nextSuccessor’时，将请求继续传递给下一个函数，无论是返回字符串’nextSuccessor’或者false都只是一个约定，当然在这里我们也可以让函数返回false表示传递请求，选择’nextSuccessor’字符串是因为它看起来更能表达我们的目的，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">after</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> fn </span>)&#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> ret = self.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> );<br>        <span class="hljs-keyword">if</span> ( ret === <span class="hljs-string">&#x27;nextSuccessor&#x27;</span> )&#123;<br>            <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> );<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br>&#125;;<br><span class="hljs-keyword">var</span> order = order500yuan.<span class="hljs-title function_">after</span>( order200yuan ).<span class="hljs-title function_">after</span>( orderNormal );<br><span class="hljs-title function_">order</span>( <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span> ); <span class="hljs-comment">// 输出：500元定金预购，得到100优惠券</span><br><span class="hljs-title function_">order</span>( <span class="hljs-number">2</span>, <span class="hljs-literal">true</span>, <span class="hljs-number">500</span> ); <span class="hljs-comment">// 输出：200元定金预购，得到50优惠券</span><br><span class="hljs-title function_">order</span>( <span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, <span class="hljs-number">500</span> ); <span class="hljs-comment">// 输出：普通购买，无优惠券</span><br></code></pre></td></tr></table></figure><p>用AOP来实现职责链既简单又巧妙，但这种把函数叠在一起的方式，同时也叠加了函数的作用域，如果链条太长的话，也会对性能有较大的影响。</p><h2 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h2><blockquote><p>对象和对象之间借助第三方中介者进行通信。</p></blockquote><h3 id="什么是中介者模式"><a href="#什么是中介者模式" class="headerlink" title="什么是中介者模式"></a>什么是中介者模式</h3><p>用一个中介对象来封装一系列的对象交互，中介者使各对象不需要显式地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。主要解决<strong>对象与对象之间存在大量的关联关系</strong>，会导致系统的结构变得很复杂，同时若一个对象发生改变，我们也需要跟踪与之相关联的对象，同时做出相应的处理。在多个类相互耦合形成<strong>网状结构</strong>时，可使用该模式将其分离为星型结构。它<strong>降低了类的复杂度</strong>，但中介者会变得复杂且难以维护。</p><h3 id="泡泡堂游戏"><a href="#泡泡堂游戏" class="headerlink" title="泡泡堂游戏"></a>泡泡堂游戏</h3><p>利用中介者模式实现该游戏，玩家与中介者的关系如图所示。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f042f3bd72bb43c996a51e6eecbb0b80~tplv-k3u1fbpfcp-watermark.image" alt="image"></p><p>我们定义Player构造函数和player对象，在player中不执行具体逻辑，将操作交给中介者对象playerDirector。而中介者对象playerDirector的实现一般有两种方式：</p><ul><li>发布订阅模式：将playerDirector实现为订阅者，player为发布者，player状态改变会推送消息给playerDirector，playerDirector处理后将反馈发送给其他player。</li><li>在 playerDirector 中开放一些接收消息的接口，各player可以直接调用该接口来给playerDirector发送消息，player只需传递一个参数给 playerDirector，这个参数的目的是使 playerDirector 可以识别发送者。同样，playerDirector 接收到消息之后会将处理结<br>果反馈给其他 player。</li></ul><p>这里采用第二种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* </span><br><span class="hljs-comment">    playerDirector开放一个对外暴露的接口receiveMessage，负责接收player对象发送的消息。</span><br><span class="hljs-comment">    player发送消息时将自身this传给其，以便识别消息来自于哪个玩家对象。</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">var</span> playerDirector = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> players = &#123;&#125; <span class="hljs-comment">// 保存所有玩家</span><br>    <span class="hljs-keyword">var</span> operations = &#123;&#125; <span class="hljs-comment">// 中介者可以执行的操作</span><br><br>    operations.<span class="hljs-property">addPlayer</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">player</span>) &#123;<br>        <span class="hljs-keyword">var</span> teamColor = player.<span class="hljs-property">teamColor</span><br>        players[teamColor] = players[teamColor] || []<br>        players[teamColor].<span class="hljs-title function_">push</span>(player)<br>    &#125;<br><br>    operations.<span class="hljs-property">removePlayer</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">player</span>) &#123;<br>        <span class="hljs-keyword">var</span> teamColor = player.<span class="hljs-property">teamColor</span><br>        <span class="hljs-keyword">var</span> teamPlayers = players[teamColor] || []<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = teamPlayers.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (teamPlayers[i] === player) &#123;<br>                teamPlayers.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    operations.<span class="hljs-property">changeTeam</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">player, newTeamColor</span>) &#123;<br>        operations.<span class="hljs-title function_">removePlayer</span>(player)<br>        player.<span class="hljs-property">teamColor</span> = newTeamColor<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(player);<br>        operations.<span class="hljs-title function_">addPlayer</span>(player)<br>    &#125;<br><br>    operations.<span class="hljs-property">playerDead</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">player</span>) &#123;<br>        <span class="hljs-keyword">var</span> teamColor = player.<span class="hljs-property">teamColor</span><br>        <span class="hljs-keyword">var</span> teamPlayers = players[teamColor]<br>        <span class="hljs-keyword">var</span> all_dead = <span class="hljs-literal">true</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, player; player = teamPlayers[i++];) &#123;<br>            <span class="hljs-keyword">if</span> (player.<span class="hljs-property">state</span> !== <span class="hljs-string">&#x27;dead&#x27;</span>) &#123;<br>                all_dead = <span class="hljs-literal">false</span><br>                <span class="hljs-keyword">break</span><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (all_dead) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, player; player = teamPlayers[i++];) &#123;<br>                player.<span class="hljs-title function_">lose</span>()<br>            &#125;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> color <span class="hljs-keyword">in</span> players) &#123;<br>                <span class="hljs-keyword">if</span> (color !== teamColor) &#123;<br>                    <span class="hljs-keyword">var</span> teamPlayers = players[color]<br>                    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, player; player = teamPlayers[i++];) &#123;<br>                        player.<span class="hljs-title function_">win</span>()<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> receiveMessage = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> message = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br>        operations[message].<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> &#123;<br>        receiveMessage,<br>        players<br>    &#125;<br>&#125;)()<br></code></pre></td></tr></table></figure><h2 id="装饰者模式"><a href="#装饰者模式" class="headerlink" title="装饰者模式"></a>装饰者模式</h2><blockquote><p>在不改变原对象的基础上，通过对其添加属性或方法来进行包装拓展，使得原有对象可以动态具有更多功能。</p></blockquote><h3 id="装修房子"><a href="#装修房子" class="headerlink" title="装修房子"></a>装修房子</h3><p>我们在毛坯房建好后，都会对房子进行装修和添置家具，让房子逐渐美观舒适，但这些并没有影响房子本身的功能，这就是装饰。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">OriginHouse</span>(<span class="hljs-params"></span>) &#123; &#125;<br><br><span class="hljs-title class_">OriginHouse</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getDesc</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;空房子&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Furniture</span>(<span class="hljs-params">house</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">house</span> = house;<br>&#125;<br><span class="hljs-title class_">Furniture</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getDesc</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">house</span>.<span class="hljs-title function_">getDesc</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;搬入家具&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Painting</span>(<span class="hljs-params">house</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">house</span> = house;<br>&#125;<br><br><span class="hljs-title class_">Painting</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getDesc</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">house</span>.<span class="hljs-title function_">getDesc</span>();<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;刷房子&quot;</span>)<br>&#125;<br><span class="hljs-keyword">let</span> house = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OriginHouse</span>()<br>house = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Furniture</span>(house)<br>house = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Painting</span>(house)<br><br><span class="hljs-comment">// house.getDesc()</span><br><br><span class="hljs-keyword">var</span> originHouse = &#123;<br>    <span class="hljs-title function_">getDesc</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;origin house&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">furniture</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;furniture&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">painting</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;painting&quot;</span>);<br>&#125;<br>originHouse.<span class="hljs-property">getDesc</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> getDesc = originHouse.<span class="hljs-property">getDesc</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-title function_">getDesc</span>();<br>        <span class="hljs-title function_">furniture</span>();<br>        <span class="hljs-title function_">painting</span>();<br>    &#125;<br>&#125;()<br>originHouse.<span class="hljs-title function_">getDesc</span>();<br></code></pre></td></tr></table></figure><h3 id="装饰者模式和代理模式"><a href="#装饰者模式和代理模式" class="headerlink" title="装饰者模式和代理模式"></a>装饰者模式和代理模式</h3><p>从结构上看两者非常像，都是描述了怎么为对象提供一定程度的间接引用，都保留了对另一个对象的引用并向其发送请求。</p><p>两者最大的区别在他们的设计和意图，代理模式的目的是，当直接访问本体不方便或和需要不符时，为其提供一个代替者，本体只提供关键功能，代理负责提供或拒绝对它的访问或在访问本体之前做一些额外的工作。装饰者模式的作用是对象动态加入行为。</p><p>代理模式更强调代理与实体之间的关系，这种关系在一开始就可以被确定，通常只有一层代理-本体的引用。装饰者模式则用于一开始无法确定对象的全部功能，后续逐步添加装饰，可能会形成一条装饰链。</p><h2 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h2><blockquote><p>允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。</p></blockquote><p>将状态封装成独立的类，并将请求委托给当前状态对象，对象内部状态改变时会有不同的行为变化。</p><p>举两个例子说明一下</p><h3 id="电灯程序"><a href="#电灯程序" class="headerlink" title="电灯程序"></a>电灯程序</h3><p>首先定义了Light类，Light类在这里也被称为上下文（Context）。随后在Light的构造函数中，我们要创建每一个状态类的实例对象，Context将持有这些状态对象的引用，以便把请求委托给状态对象。用户的请求，即点击button的动作也是实现在Context中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Light</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">offLightState</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">OffLightState</span>( <span class="hljs-variable language_">this</span> ); <span class="hljs-comment">// 持有状态对象的引用</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">weakLightState</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakLightState</span>( <span class="hljs-variable language_">this</span> ); <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">strongLightState</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StrongLightState</span>( <span class="hljs-variable language_">this</span> ); <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">superStrongLightState</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperStrongLightState</span>( <span class="hljs-variable language_">this</span> ); <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span> = <span class="hljs-literal">null</span>; <br>&#125;;<br><br><span class="hljs-title class_">Light</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">var</span> button = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>( <span class="hljs-string">&#x27;button&#x27;</span> ),<br>    self = <span class="hljs-variable language_">this</span>; <br> <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span> = <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>( button ); <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">&#x27;开关&#x27;</span>; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">currState</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">offLightState</span>; <span class="hljs-comment">// 设置默认初始状态</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">button</span>.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <span class="hljs-comment">// 定义用户的请求动作</span><br>        self.<span class="hljs-property">currState</span>.<span class="hljs-title function_">buttonWasPressed</span>(); <br>    &#125; <br>&#125;;<br><br><span class="hljs-comment">// 编写各种状态类，light对象被传入状态类的构造函数，状态对象也需要持有light对象的引用，以便调用light中的方法或者直接操作light对象。</span><br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">OffLightState</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> light </span>)&#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span> = light; <br>&#125;; <br><span class="hljs-title class_">OffLightState</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">buttonWasPressed</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;弱光&#x27;</span> ); <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span>.<span class="hljs-title function_">setState</span>( <span class="hljs-variable language_">this</span>.<span class="hljs-property">light</span>.<span class="hljs-property">weakLightState</span> ); <br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="超级玛丽"><a href="#超级玛丽" class="headerlink" title="超级玛丽"></a>超级玛丽</h3><p>超级玛丽拥有多个状态比如 跳跃、移动、蹲下、射击，如果对它们意义判断，需要多个if-else结构或switch结构，单个动作尚且可以实现，如果遇到了组合动作，实现会更加复杂，使用状态模式可以简单实现。</p><p>首先创建一个状态对象数组，内部对状态进行保存，封装好每种动作对应的状态，暴露一个接口对象，它可以对内部状态修改或调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SuperMarry</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentState</span> = []<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">states</span> = &#123;<br>      <span class="hljs-title function_">jump</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;跳跃!&#x27;</span>)&#125;,<br>      <span class="hljs-title function_">move</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;移动!&#x27;</span>)&#125;,<br>      <span class="hljs-title function_">shoot</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;射击!&#x27;</span>)&#125;,<br>      <span class="hljs-title function_">squat</span>(<span class="hljs-params"></span>) &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;蹲下!&#x27;</span>)&#125;<br>    &#125;<br>  &#125;<br>  <br>  <span class="hljs-title function_">change</span>(<span class="hljs-params">arr</span>) &#123;  <span class="hljs-comment">// 更改当前动作</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentState</span> = arr<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>  &#125;<br>  <br>  <span class="hljs-title function_">go</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;触发动作&#x27;</span>)<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_currentState</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">T</span> =&gt;</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">states</span>[T] &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">states</span>[T]())<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">SuperMarry</span>()<br>    .<span class="hljs-title function_">change</span>([<span class="hljs-string">&#x27;jump&#x27;</span>, <span class="hljs-string">&#x27;shoot&#x27;</span>])<br>    .<span class="hljs-title function_">go</span>()                    <span class="hljs-comment">// 触发动作  跳跃!  射击!</span><br>    .<span class="hljs-title function_">go</span>()                    <span class="hljs-comment">// 触发动作  跳跃!  射击!</span><br>    .<span class="hljs-title function_">change</span>([<span class="hljs-string">&#x27;squat&#x27;</span>])<br>    .<span class="hljs-title function_">go</span>()                    <span class="hljs-comment">// 触发动作  蹲下!</span><br></code></pre></td></tr></table></figure><h3 id="状态模式优缺点"><a href="#状态模式优缺点" class="headerlink" title="状态模式优缺点"></a>状态模式优缺点</h3><p>优点：</p><ul><li>状态模式定义了状态与行为之间的关系，并将它们封装在一个类里。通过增加新的状态类，很容易增加新的状态和转换。</li><li>避免 Context 无限膨胀，状态切换的逻辑被分布在状态类中，也去掉了 Context 中原本过多的条件分支。</li><li>用对象代替字符串来记录当前状态，使得状态的切换更加一目了然。</li><li>Context 中的请求动作和状态类中封装的行为可以非常容易地独立变化而互不影响。</li></ul><p>缺点：系统中定义许多状态类，编写20个状态类是一项枯燥乏味的工作，而且系统中会因此而增加不少对象。另外，由于逻辑分散在状态类中，虽然避开了不受欢迎的条件分支语句，但也造成了逻辑分散的问题，我们无法在一个地方就看出整个状态机的逻辑。</p><h3 id="与策略模式的关系"><a href="#与策略模式的关系" class="headerlink" title="与策略模式的关系"></a>与策略模式的关系</h3><p>策略模式和状态模式的相同点是，它们都有一个上下文、一些策略或者状态类，上下文把请求委托给这些类来执行。</p><p>它们之间的区别是策略模式中的各个策略类之间是平等又平行的，它们之间没有任何联系，所以客户必须熟知这些策略类的作用，以便客户可以随时主动切换算法；而在状态模式中，状态和状态对应的行为是早已被封装好的，状态之间的切换也早被规定完成，“改变行为”这件事情发生在状态模式内部。对客户来说，并不需要了解这些细节。这正是状态模式的作用所在。</p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><blockquote><p>将一个类（对象）的接口（方法或属性）转化成客户希望的另外一个接口（方法或属性），适配器模式使得原本由于接口不兼容而不能一起工作的那些类（对象）可以一些工作。</p></blockquote><p>适配器模式是一种“亡羊补牢”模式，没有人会在程序设计之初使用，因为无法预料到未来的改动，在未来的某天也许我们需要用适配器模式将旧接口包装成新接口，保证其可用性。</p><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>前端在处理数据的时候其实就使用了适配器模式。我们需要将现有数据构造成我们需要的格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-string">&#x27;Javascript&#x27;</span>, <span class="hljs-string">&#x27;book&#x27;</span>, <span class="hljs-string">&#x27;设计模式&#x27;</span>, <span class="hljs-string">&#x27;1月1日&#x27;</span>]<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">arr2objAdapter</span>(<span class="hljs-params">arr</span>) &#123;    <span class="hljs-comment">// 转化成我们需要的数据结构</span><br>  <span class="hljs-keyword">return</span> &#123;<br>    <span class="hljs-attr">name</span>: arr[<span class="hljs-number">0</span>],<br>    <span class="hljs-attr">type</span>: arr[<span class="hljs-number">1</span>],<br>    <span class="hljs-attr">title</span>: arr[<span class="hljs-number">2</span>],<br>    <span class="hljs-attr">time</span>: arr[<span class="hljs-number">3</span>]<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> adapterData = <span class="hljs-title function_">arr2objAdapter</span>(arr)<br></code></pre></td></tr></table></figure><h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><ul><li>使用一个现有对象，但其属性或方法不符合你的使用要求。</li><li>想创建一个可复用的对象，该对象可以与其它不相关的对象或不可见对象（即接口方法或属性不兼容的对象）协同工作。</li><li>想使用现有对象，但不能对每一个都进行原型继承，对象适配器可以适配它的父类接口方法或属性。</li></ul><h3 id="与其他模式的区别"><a href="#与其他模式的区别" class="headerlink" title="与其他模式的区别"></a>与其他模式的区别</h3><ul><li>适配器模式主要用来解决两个已有接口之间不匹配的问题，它不考虑这些接口是怎样实现的，也不考虑它们将来可能会如何演化。适配器模式不需要改变已有的接口，就能够使它们协同作用。</li><li>装饰者模式和代理模式也不会改变原有对象的接口，但装饰者模式的作用是为了给对象增加功能。装饰者模式常常形成一条长的装饰链，而适配器模式通常只包装一次。代理模式是为了控制对对象的访问，通常也只包装一次。</li><li>外观模式的作用倒是和适配器比较相似，有人把外观模式看成一组对象的适配器，但外观模式最显著的特点是定义了一个新的接口。</li></ul>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>w字总结《JavaScript设计模式与开发实践》（设计模式）（上）</title>
    <link href="/2021/11/17/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8AJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%89%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <url>/2021/11/17/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8AJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%89%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="设计模式（上）"><a href="#设计模式（上）" class="headerlink" title="设计模式（上）"></a>设计模式（上）</h1><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>保证一个类仅有一个实例，并提供一个访问它的全局访问点</p></blockquote><h3 id="实现单例模式"><a href="#实现单例模式" class="headerlink" title="实现单例模式"></a>实现单例模式</h3><p>举个最常用的例子，我们登录的时候，页面中会出现一个登录浮窗，而它是唯一的，无论点多少次登录按钮，浮窗只会被创建一次，不会每次点击都创建新的实例。</p><p>简易的单例模式实现起来并不复杂，无非就是用一个变量来记录当前是否已为该类创建过对象，是则在下次获取该类实例时直接返回之前创建的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Singleton</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> name </span>)&#123; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name; <br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-literal">null</span>; <br>&#125;; <br><span class="hljs-title class_">Singleton</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    alert ( <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> ); <br>&#125;; <br><span class="hljs-title class_">Singleton</span>.<span class="hljs-property">getInstance</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> name </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( !<span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> )&#123; <br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>( name ); <br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">instance</span>; <br>&#125;; <br><span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>( <span class="hljs-string">&#x27;sven1&#x27;</span> ); <br><span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Singleton</span>.<span class="hljs-title function_">getInstance</span>( <span class="hljs-string">&#x27;sven2&#x27;</span> ); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a === b ); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>代码很简单，但是这样的写法意义不大，因为类是“不透明”的，使用者必须知道这是一个单例类，且需要使用Singleton.getInstance获取对象。</p><h3 id="透明的单例模式（代理）"><a href="#透明的单例模式（代理）" class="headerlink" title="透明的单例模式（代理）"></a>透明的单例模式（代理）</h3><p>我们需要做的是能够实现一个透明的单例类，使用方式像其他任何普通类一样且足够灵活。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">CreateDiv</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> html </span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">html</span> = html<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>()<br>&#125;<br><span class="hljs-title class_">CreateDiv</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">init</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&#x27;div&#x27;</span>)<br>    div.<span class="hljs-property">innerHTML</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">html</span><br>    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(div)<br>&#125;<br><br><span class="hljs-comment">// 代理类</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">ProxySingletonCreateDiv</span> = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> instance<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">html</span>) &#123;<br>        <span class="hljs-keyword">if</span>(!instance) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateDiv</span>(html)<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance<br>    &#125;<br>&#125;)()<br><br><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxySingletonCreateDiv</span>(<span class="hljs-string">&#x27;a&#x27;</span>)<br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProxySingletonCreateDiv</span>(<span class="hljs-string">&#x27;b&#x27;</span>)<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a === b)<br></code></pre></td></tr></table></figure><p>上述代码中我们通过代理类<code>ProxySingletonCreateDiv</code>实现了对CreateDiv的单例化（代理模式，在后面介绍），与之前不同的是，<code>CreateDiv</code>变成了普通的类，如果业务场景中需要创建多个实例时，我们可以直接使用<code>CreateDiv</code>创建。二者组合达到了单例模式的效果。</p><h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><p>顾名思义，惰性单例只有在<em>需要的时候</em>才创建对象实例。实现思路如最开始，用一个变量来标志是否创建过对象，是则返回创建好的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getSingle = <span class="hljs-keyword">function</span>(<span class="hljs-params">fn</span>) &#123;<br>    <span class="hljs-keyword">var</span> result <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> result || (result = fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>))<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里结合了<a href="https://juejin.cn/post/7031003499898880037">基础篇</a>中的许多知识，我们可以传入任何方法，之后让getSingle返回一个新的函数，并用result保存fn的计算结果，因为result在闭包中，它永远不会被销毁，以后再请求时，如果result存在，那么它将返回这个值。</p><h2 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h2><blockquote><p>定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换。策略模式的目的就是将算法的使用与算法的实现分离。</p></blockquote><h3 id="计算奖金"><a href="#计算奖金" class="headerlink" title="计算奖金"></a>计算奖金</h3><p>书里举了一个计算奖金的例子。</p><p>很多公司的年终奖是根据员工的工资基数和年底绩效情况来发放的。例如，绩效为 S 的人年终奖有 4 倍工资，绩效为 A的人年终奖有 3 倍工资，而绩效为 B 的人年终奖是 2 倍工资。假设财务部要求我们提供一段代码，来方便他们计算员工的年终奖。</p><p>在这个例子中，算法的使用方法不变，目的都是为了取得计算后的奖金，而算法的实现不一定相同，每种绩效对应不同计算规则。</p><p>基于策略模式的程序由两部分组成，第一部分是策略类，其中封装具体算法，并负责具体计算过程。第二部分是环境类，负责接受客户请求，并把请求委托给某个策略类。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> strategies = &#123;<br>    <span class="hljs-string">&#x27;S&#x27;</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) &#123;<br>        <span class="hljs-keyword">return</span> num * <span class="hljs-number">4</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;A&#x27;</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) &#123;<br>        <span class="hljs-keyword">return</span> num * <span class="hljs-number">3</span><br>    &#125;,<br>    <span class="hljs-string">&#x27;B&#x27;</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">num</span>) &#123;<br>        <span class="hljs-keyword">return</span> num * <span class="hljs-number">2</span><br>    &#125;,<br>&#125;<br><span class="hljs-comment">// </span><br><span class="hljs-keyword">var</span> calculate = <span class="hljs-keyword">function</span>(<span class="hljs-params">level , num</span>) &#123;<br>    <span class="hljs-keyword">return</span> strategies[level](num)<br>&#125; <br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;S&#x27;</span> , <span class="hljs-number">4</span>));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">calculate</span>(<span class="hljs-string">&#x27;A&#x27;</span> , <span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><h3 id="多态在策略模式中的体现"><a href="#多态在策略模式中的体现" class="headerlink" title="多态在策略模式中的体现"></a>多态在策略模式中的体现</h3><p>通过使用策略模式重构代码，我们消除了原程序中大片的条件分支语句。所有跟计算奖金有关的逻辑不再放在Context中，而是分布在各个策略对象中。Context并没有计算奖金的能力，而是把这个职责委托给了某个策略对象。每个策略对象负责的算法已被各自封装在对象内部。当我们对这些策略对象发出“计算奖金”的请求时，它们会返回各自不同的计算结果，这正是对象多态性的体现，也是“它们可以相互替换”的目的。替换 Context 中当前保存的策略对象，便能执行不同的算法来得到我们想要的结果。</p><h3 id="策略模式优缺点"><a href="#策略模式优缺点" class="headerlink" title="策略模式优缺点"></a>策略模式优缺点</h3><ul><li><p>优点</p><ul><li>策略模式利用组合、委托、多态等技术及思想，避免多重条件选择语句。</li><li>策略模式完美支持<em>开放-封闭原则</em>，将算法封装在strategy中，易于切换、理解和扩展。</li><li>策略模式中的算法也可以复用在其他地方。</li><li>策略模式中利用组合和委托来让 Context 拥有执行算法的能力，这也是继承的一种更轻便的替代方案。</li></ul></li><li><p>缺点</p><ul><li>在程序中添加许多策略类或策略对象</li><li>必须了解所有的 strategy，必须了解各个 strategy 之间的不同点，这样才能选择一个合适的 strategy、</li></ul></li></ul><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><blockquote><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。通俗的来讲代理模式就是我们生活中常见的中介。</p></blockquote><h3 id="送花问题"><a href="#送花问题" class="headerlink" title="送花问题"></a>送花问题</h3><p>在四月一个晴朗的早晨，小明遇见了他的百分百女孩，我们暂且称呼小明的女神为A。两天之后，小明决定给A送一束花来表白。刚好小明打听到 A 和他有一个共同的朋友B，于是内向的小明决定让B来代替自己完成送花这件事情。当A在心情好的时候收到花，小明表白成功的几率有60%，而当 A 在心情差的时候收到花，小明表白的成功率无限趋近于0。</p><p>这时候需要用到代理模式，小明无法得知A的心情，而B却了解，把花交给B，B会监听A的心情变化，选择心情好的时候再转交。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Flower</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br><br><span class="hljs-keyword">var</span> xiaoming = &#123;<br>    <span class="hljs-attr">sendFlower</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">target</span>) &#123;<br>        <span class="hljs-keyword">var</span> flower = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flower</span>()<br>        target.<span class="hljs-title function_">receiveFlower</span>(flower)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> B = &#123;<br>    <span class="hljs-attr">receiveFlower</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">flower</span>) &#123;<br>        A.<span class="hljs-title function_">listenGoodMood</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            A.<span class="hljs-title function_">receiveFlower</span>(flower)<br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> A = &#123;<br>    <span class="hljs-attr">receiveFlower</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">flower</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;收到花&#x27;</span>, flower)<br>    &#125;,<br>    <span class="hljs-attr">listenGoodMood</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"> fn </span>) &#123;<br>        <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-title function_">fn</span>()<br>        &#125;,<span class="hljs-number">1000</span>)<br>    &#125;<br>&#125;<br><br>xiaoming.<span class="hljs-title function_">sendFlower</span>(B)<br><br></code></pre></td></tr></table></figure><h3 id="保护代理和虚拟代理"><a href="#保护代理和虚拟代理" class="headerlink" title="保护代理和虚拟代理"></a>保护代理和虚拟代理</h3><p>保护代理：代理B可以帮助A过滤掉一些请求，不符合要求的请求在代理B处被拒绝掉,如上文的例子。</p><p>虚拟代理：把操作交给代理B去执行，代理B决定何时去执行操作。虚拟操作把一些开销很大的对象延迟到真正需要的时候再创建。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> B = &#123;<br>    <span class="hljs-attr">receiveFlower</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">flower</span>) &#123;<br>        A.<span class="hljs-title function_">listenGoodMood</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            <span class="hljs-keyword">var</span> flower = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Flower</span>()<br>            A.<span class="hljs-title function_">receiveFlower</span>(flower)<br>        &#125;)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="缓存代理"><a href="#缓存代理" class="headerlink" title="缓存代理"></a>缓存代理</h3><p>缓存代理可以为一些开销大的运算结果提供暂时的存储，在下次运算时，如果传递进来的参数跟之前一致，则可以直接返回前面存储的运算结果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mult = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;开始计算乘积&#x27;</span> ); <br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; l; i++ )&#123; <br>        a = a * <span class="hljs-variable language_">arguments</span>[i]; <br>    &#125; <br>    <span class="hljs-keyword">return</span> a; <br>&#125;; <br><span class="hljs-title function_">mult</span>( <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ); <span class="hljs-comment">// 输出：6 </span><br><span class="hljs-title function_">mult</span>( <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> ); <span class="hljs-comment">// 输出：24 </span><br><span class="hljs-keyword">var</span> proxyMult = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">var</span> cache = &#123;&#125;; <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>        <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">join</span>.<span class="hljs-title function_">call</span>( <span class="hljs-variable language_">arguments</span>, <span class="hljs-string">&#x27;,&#x27;</span> ); <br>        <span class="hljs-keyword">if</span> ( args <span class="hljs-keyword">in</span> cache )&#123; <br>            <span class="hljs-keyword">return</span> cache[ args ]; <br>        &#125; <br>        <span class="hljs-keyword">return</span> cache[ args ] = mult.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> ); <br>    &#125; <br>&#125;)(); <br><span class="hljs-title function_">proxyMult</span>( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> ); <span class="hljs-comment">// 输出：24 </span><br><span class="hljs-title function_">proxyMult</span>( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> ); <span class="hljs-comment">// 输出：24</span><br></code></pre></td></tr></table></figure><h3 id="高阶函数动态创建代理"><a href="#高阶函数动态创建代理" class="headerlink" title="高阶函数动态创建代理"></a>高阶函数动态创建代理</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**************** 计算乘积 *****************/</span> <br><span class="hljs-keyword">var</span> mult = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>; <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; l; i++ )&#123; <br>        a = a * <span class="hljs-variable language_">arguments</span>[i]; <br>    &#125; <br>    <span class="hljs-keyword">return</span> a; <br>&#125;; <br><span class="hljs-comment">/**************** 计算加和 *****************/</span> <br><span class="hljs-keyword">var</span> plus = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; l; i++ )&#123; <br>        a = a + <span class="hljs-variable language_">arguments</span>[i]; <br>    &#125; <br>    <span class="hljs-keyword">return</span> a; <br>&#125;; <br><span class="hljs-comment">/**************** 创建缓存代理的工厂 *****************/</span> <br><span class="hljs-keyword">var</span> createProxyFactory = <span class="hljs-keyword">function</span>(<span class="hljs-params"> fn </span>)&#123; <br>    <span class="hljs-keyword">var</span> cache = &#123;&#125;; <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>        <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">join</span>.<span class="hljs-title function_">call</span>( <span class="hljs-variable language_">arguments</span>, <span class="hljs-string">&#x27;,&#x27;</span> ); <br>        <span class="hljs-keyword">if</span> ( args <span class="hljs-keyword">in</span> cache )&#123; <br>            <span class="hljs-keyword">return</span> cache[ args ]; <br>        &#125; <br>        <span class="hljs-keyword">return</span> cache[ args ] = fn.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> ); <br>    &#125; <br>&#125;; <br><span class="hljs-keyword">var</span> proxyMult = <span class="hljs-title function_">createProxyFactory</span>( mult ), <br>proxyPlus = <span class="hljs-title function_">createProxyFactory</span>( plus ); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">proxyMult</span>( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> ) ); <span class="hljs-comment">// 输出：24 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">proxyMult</span>( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> ) ); <span class="hljs-comment">// 输出：24 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">proxyPlus</span>( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> ) ); <span class="hljs-comment">// 输出：10 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">proxyPlus</span>( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span> ) ); <span class="hljs-comment">// 输出：10</span><br></code></pre></td></tr></table></figure><h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h2><blockquote><p>提供一种方法顺序访问一个聚合对象中的各元素，而又不需要暴露该对象的内部表示。</p></blockquote><p>迭代器模式可以把迭代的过程从业务逻辑中分离出来，在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素。简单来说就是统一“集合”型数据结构的遍历接口，实现可循环遍历获取集合中各数据项（不关心数据项的数据结构）。</p><h3 id="实现自己的迭代器"><a href="#实现自己的迭代器" class="headerlink" title="实现自己的迭代器"></a>实现自己的迭代器</h3><p>接受两个参数：被循环数组、循环每一步后触发的回调</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> each = <span class="hljs-keyword">function</span>(<span class="hljs-params">ary, callback</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>,l = ary.<span class="hljs-property">length</span>;i&lt; l;i++) &#123;<br>        callback.<span class="hljs-title function_">call</span>(ary[i] , i , ary[i])<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-title function_">each</span>(<span class="hljs-params">arr , <span class="hljs-keyword">function</span>(i , n)</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([i , n])<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内部迭代器和外部迭代器"><a href="#内部迭代器和外部迭代器" class="headerlink" title="内部迭代器和外部迭代器"></a>内部迭代器和外部迭代器</h3><ol><li>内部迭代器</li></ol><p>我们刚刚编写的 each 函数属于内部迭代器，each函数的内部已经定义好了迭代规则，它完全接手整个迭代过程，外部只需要一次初始调用。内部迭代器在调用的时候非常方便，外界不用关心迭代器内部的实现，跟迭代器的交互也仅仅是一次初始调用，但这也刚好是内部迭代器的缺点。由于内部迭代器的迭代规则已经被提前规定，上面的each函数就无法同时迭代2个数组了。比如现在有个需求，要判断 2 个数组里元素的值是否完全相等， 如果不改写each函数本身的代码，我们能够入手的地方似乎只剩下each的回调函数了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> compare = <span class="hljs-keyword">function</span>(<span class="hljs-params"> ary1, ary2 </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( ary1.<span class="hljs-property">length</span> !== ary2.<span class="hljs-property">length</span> )&#123; <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span> ( <span class="hljs-string">&#x27;ary1 和 ary2 不相等&#x27;</span> ); <br>    &#125; <br>    <span class="hljs-title function_">each</span>( ary1, <span class="hljs-keyword">function</span>(<span class="hljs-params"> i, n </span>)&#123; <br>        <span class="hljs-keyword">if</span> ( n !== ary2[ i ] )&#123; <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span> ( <span class="hljs-string">&#x27;ary1 和 ary2 不相等&#x27;</span> ); <br>        &#125; <br>    &#125;); <br>    alert ( <span class="hljs-string">&#x27;ary1 和 ary2 相等&#x27;</span> ); <br>&#125;; <br><span class="hljs-title function_">compare</span>( [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ], [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span> ] ); <span class="hljs-comment">// throw new Error ( &#x27;ary1 和 ary2 不相等&#x27; );</span><br></code></pre></td></tr></table></figure><ol start="2"><li>外部迭代器</li></ol><p>外部迭代器必须显式地请求迭代下一个元素。<br>外部迭代器增加了一些调用的复杂度，但相对也增强了迭代器的灵活性，我们可以手工控制迭代的过程或者顺序。外部迭代器虽然调用方式复杂，但适用面更广，更能满足多变的需求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Iterator</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> obj </span>)&#123; <br>    <span class="hljs-keyword">var</span> current = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">var</span> next = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>        current += <span class="hljs-number">1</span>; <br>    &#125;; <br>    <span class="hljs-keyword">var</span> isDone = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>        <span class="hljs-keyword">return</span> current &gt;= obj.<span class="hljs-property">length</span>; <br>    &#125;; <br>    <span class="hljs-keyword">var</span> getCurrItem = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>        <span class="hljs-keyword">return</span> obj[ current ]; <br>    &#125;; <br>    <span class="hljs-keyword">return</span> &#123; <br>        <span class="hljs-attr">next</span>: next, <br>        <span class="hljs-attr">isDone</span>: isDone, <br>        <span class="hljs-attr">getCurrItem</span>: getCurrItem <br>    &#125; <br>&#125;;<br><br><span class="hljs-comment">// 改写compare函数</span><br><br><span class="hljs-keyword">var</span> compare = <span class="hljs-keyword">function</span>(<span class="hljs-params"> iterator1, iterator2 </span>)&#123; <br>    <span class="hljs-keyword">while</span>( !iterator1.<span class="hljs-title function_">isDone</span>() &amp;&amp; !iterator2.<span class="hljs-title function_">isDone</span>() )&#123; <br>        <span class="hljs-keyword">if</span> ( iterator1.<span class="hljs-title function_">getCurrItem</span>() !== iterator2.<span class="hljs-title function_">getCurrItem</span>() )&#123; <br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span> ( <span class="hljs-string">&#x27;iterator1 和 iterator2 不相等&#x27;</span> ); <br>        &#125; <br>        iterator1.<span class="hljs-title function_">next</span>(); <br>        iterator2.<span class="hljs-title function_">next</span>(); <br>    &#125; <br>    alert ( <span class="hljs-string">&#x27;iterator1 和 iterator2 相等&#x27;</span> ); <br>&#125;<br><br><span class="hljs-keyword">var</span> iterator1 = <span class="hljs-title class_">Iterator</span>( [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ] ); <br><span class="hljs-keyword">var</span> iterator2 = <span class="hljs-title class_">Iterator</span>( [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ] ); <br><span class="hljs-title function_">compare</span>( iterator1, iterator2 ); <span class="hljs-comment">// 输出：iterator1 和 iterator2 相等</span><br></code></pre></td></tr></table></figure><h3 id="迭代类数组对象和字面量对象"><a href="#迭代类数组对象和字面量对象" class="headerlink" title="迭代类数组对象和字面量对象"></a>迭代类数组对象和字面量对象</h3><p>迭代器模式不仅可以迭代数组，还可以迭代一些类数组的对象。比如arguments、{“0”:’a’,”1”:’b’}等。通过上面的代码可以观察到，无论是内部迭代器还是外部迭代器，只要被迭代的聚合对象拥有 length 属性而且可以用下标访问，那它就可以被迭代。在 JavaScript 中，for in 语句可以用来迭代普通字面量对象的属性。</p><h3 id="倒序迭代器"><a href="#倒序迭代器" class="headerlink" title="倒序迭代器"></a>倒序迭代器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> reverseEach = <span class="hljs-keyword">function</span>(<span class="hljs-params">ary , callback</span>) &#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> l = ary.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>;l &gt;= <span class="hljs-number">0</span>; l--) &#123;<br>        <span class="hljs-title function_">callback</span>(l,ary[l])<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_">reverseEach</span>([<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>] , <span class="hljs-keyword">function</span>(<span class="hljs-params">i, n</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n)  <br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="中止迭代器"><a href="#中止迭代器" class="headerlink" title="中止迭代器"></a>中止迭代器</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> each = <span class="hljs-keyword">function</span>(<span class="hljs-params"> ary, callback </span>)&#123; <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = ary.<span class="hljs-property">length</span>; i &lt; l; i++ )&#123; <br>        <span class="hljs-keyword">if</span> ( <span class="hljs-title function_">callback</span>( i, ary[ i ] ) === <span class="hljs-literal">false</span> )&#123; <span class="hljs-comment">// callback 的执行结果返回 false，提前终止迭代</span><br>            <span class="hljs-keyword">break</span>; <br>        &#125; <br>    &#125; <br>&#125;; <br><span class="hljs-title function_">each</span>( [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span> ], <span class="hljs-keyword">function</span>(<span class="hljs-params"> i, n </span>)&#123; <br>    <span class="hljs-keyword">if</span> ( n &gt; <span class="hljs-number">3</span> )&#123; <span class="hljs-comment">// n 大于 3 的时候终止循环</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    &#125; <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( n ); <span class="hljs-comment">// 分别输出：1, 2, 3 </span><br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="发布-订阅模式"><a href="#发布-订阅模式" class="headerlink" title="发布-订阅模式"></a>发布-订阅模式</h2><blockquote><p>它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">/* 通用发布订阅 */</span><br><span class="hljs-comment">// 时间上解耦、对象之间解耦，对应的会消耗时间和内存</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Event</span> = (<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> clientList = &#123;&#125;,<br>        listen, trigger, remove<br>    listen = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!clientList[key]) &#123;<br>            clientList[key] = []<br>        &#125;<br>        clientList[key].<span class="hljs-title function_">push</span>(fn)<br>    &#125;<br>    trigger = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> key = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-keyword">var</span> fns = clientList[key]<br>        <span class="hljs-keyword">if</span> (!fns || fns.<span class="hljs-property">length</span> === <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, fn; fn = fns[i++];) &#123;<br>            fn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span>)<br>        &#125;<br>    &#125;<br>    remove = <span class="hljs-keyword">function</span> (<span class="hljs-params">key, fn</span>) &#123;<br>        <span class="hljs-keyword">var</span> fns = clientList[key]<br>        <span class="hljs-keyword">if</span> (!fns) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>        &#125;<br>        <span class="hljs-keyword">if</span> (!fn) &#123;<br>            fns &amp;&amp; (fns.<span class="hljs-property">length</span> = <span class="hljs-number">0</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = fns.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>                <span class="hljs-keyword">var</span> _fn = fns[i]<br>                <span class="hljs-keyword">if</span> (_fn === fn) &#123;<br>                    fns.<span class="hljs-title function_">splice</span>(i, <span class="hljs-number">1</span>)<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        listen, trigger, remove<br>    &#125;<br>&#125;)()<br><br><span class="hljs-title class_">Event</span>.<span class="hljs-title function_">listen</span>(<span class="hljs-string">&#x27;square88&#x27;</span> , <span class="hljs-keyword">function</span>(<span class="hljs-params">price</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;price:&#x27;</span> , price);<br>&#125;)<br><br><span class="hljs-title class_">Event</span>.<span class="hljs-title function_">trigger</span>(<span class="hljs-string">&#x27;square88&#x27;</span> , <span class="hljs-number">2000000</span>)<br></code></pre></td></tr></table></figure><h3 id="发布-订阅模式的应用"><a href="#发布-订阅模式的应用" class="headerlink" title="发布-订阅模式的应用"></a>发布-订阅模式的应用</h3><p>书中讲的在这就不多说了，说点书里没有的。</p><p>想要对发布-订阅模式有更加深入的学习，推荐自己动手实现一个vue，vue2的响应式就是通过该模式实现的，接下来我们看看这个特性是如何使用的。</p><h4 id="vue响应式原理"><a href="#vue响应式原理" class="headerlink" title="vue响应式原理"></a>vue响应式原理</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>    <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">a</span>:<span class="hljs-string">&#x27;a&#x27;</span><br>        &#125;<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b327fc81be69401faddd887b6caef99c~tplv-k3u1fbpfcp-zoom-1.image" alt="image"></p><p>官网有一张关于响应式的图，我们来结合图片分析一下。</p><h5 id="数据劫持"><a href="#数据劫持" class="headerlink" title="数据劫持"></a>数据劫持</h5><p>我们都知道，数据劫持的核心是<code>Object.defineProperty</code>将属性转化成对应的<code>getter\setter</code>（vue不支持ie8以下的原因）。在数据传递变更的时候，会进入Dep和Watcher中处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">walk</span>(<span class="hljs-params">obj</span>) &#123;<br>    <span class="hljs-keyword">const</span> keys = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(obj)<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; keys.<span class="hljs-property">length</span>; ++i) &#123;<br>        <span class="hljs-title function_">defineReactive</span>(obj, keys[i], obj[keys[i]])<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>劫持相关函数及订阅发布</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Define a reactive property on an Object.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">defineReactive</span>(<span class="hljs-params"></span><br><span class="hljs-params">  obj: <span class="hljs-built_in">Object</span>,</span><br><span class="hljs-params">  key: string,</span><br><span class="hljs-params">  val: any,</span><br><span class="hljs-params">  customSetter?: <span class="hljs-built_in">Function</span></span><br><span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">/*在闭包中定义一个dep对象*/</span><br>  <span class="hljs-keyword">const</span> dep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dep</span>()<br><br>  <span class="hljs-keyword">const</span> property = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptor</span>(obj, key)<br>  <span class="hljs-keyword">if</span> (property &amp;&amp; property.<span class="hljs-property">configurable</span> === <span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br><br>  <span class="hljs-comment">/*如果之前该对象已经预设了getter以及setter函数则将其取出来，新定义的getter/setter中会将其执行，保证不会覆盖之前已经定义的getter/setter。*/</span><br>  <span class="hljs-comment">// cater for pre-defined getter/setters</span><br>  <span class="hljs-keyword">const</span> getter = property &amp;&amp; property.<span class="hljs-property">get</span><br>  <span class="hljs-keyword">const</span> setter = property &amp;&amp; property.<span class="hljs-property">set</span><br><br>  <span class="hljs-comment">/*对象的子对象递归进行observe并返回子节点的Observer对象*/</span><br>  <span class="hljs-keyword">let</span> childOb = <span class="hljs-title function_">observe</span>(val)<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, key, &#123;<br>    <span class="hljs-attr">enumerable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">configurable</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactiveGetter</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-comment">/*如果原本对象拥有getter方法则执行*/</span><br>      <span class="hljs-keyword">const</span> value = getter ? getter.<span class="hljs-title function_">call</span>(obj) : val<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>) &#123;<br>        <span class="hljs-comment">/*进行依赖收集*/</span><br>        dep.<span class="hljs-title function_">depend</span>()<br>        <span class="hljs-keyword">if</span> (childOb) &#123;<br>          <span class="hljs-comment">/*子对象进行依赖收集，其实就是将同一个watcher观察者实例放进了两个depend中，一个是正在本身闭包中的depend，另一个是子元素的depend*/</span><br>          childOb.<span class="hljs-property">dep</span>.<span class="hljs-title function_">depend</span>()<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value)) &#123;<br>          <span class="hljs-comment">/*是数组则需要对每一个成员都进行依赖收集，如果数组的成员还是数组，则递归。*/</span><br>          <span class="hljs-title function_">dependArray</span>(value)<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">return</span> value<br>    &#125;,<br>    <span class="hljs-attr">set</span>: <span class="hljs-keyword">function</span> <span class="hljs-title function_">reactiveSetter</span>(<span class="hljs-params">newVal</span>) &#123;<br>      <span class="hljs-comment">/*通过getter方法获取当前值，与新值进行比较，一致则不需要执行下面的操作*/</span><br>      <span class="hljs-keyword">const</span> value = getter ? getter.<span class="hljs-title function_">call</span>(obj) : val<br>      <span class="hljs-comment">/* eslint-disable no-self-compare */</span><br>      <span class="hljs-keyword">if</span> (newVal === value || (newVal !== newVal &amp;&amp; value !== value)) &#123;<br>        <span class="hljs-keyword">return</span><br>      &#125;<br>      <span class="hljs-comment">/* eslint-enable no-self-compare */</span><br>      <span class="hljs-keyword">if</span> (process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp; customSetter) &#123;<br>        <span class="hljs-title function_">customSetter</span>()<br>      &#125;<br>      <span class="hljs-keyword">if</span> (setter) &#123;<br>        <span class="hljs-comment">/*如果原本对象拥有setter方法则执行setter*/</span><br>        setter.<span class="hljs-title function_">call</span>(obj, newVal)<br>      &#125; <span class="hljs-keyword">else</span> &#123;<br>        val = newVal<br>      &#125;<br><br>      <span class="hljs-comment">/*新的值需要重新进行observe，保证数据响应式*/</span><br>      childOb = <span class="hljs-title function_">observe</span>(newVal)<br><br>      <span class="hljs-comment">/*dep对象通知所有的观察者*/</span><br>      dep.<span class="hljs-title function_">notify</span>()<br>    &#125;<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><p>在初始化时对data内数据开始劫持监听，初始化时调用<code>observe</code>，返回的是<code>Observer</code>实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Attempt to create an observer instance for a value,</span><br><span class="hljs-comment"> * returns the new observer if successfully observed,</span><br><span class="hljs-comment"> * or the existing observer if the value already has one.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> 尝试创建一个Observer实例（__ob__），如果成功创建Observer实例则返回新的Observer实例，如果已有Observer实例则返回现有的Observer实例。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">observe</span>(<span class="hljs-params">value: any, asRootData: ?boolean</span>): <span class="hljs-title class_">Observer</span> | <span class="hljs-keyword">void</span> &#123;<br>  <span class="hljs-comment">/*判断是否是一个对象*/</span><br>  <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">isObject</span>(value)) &#123;<br>    <span class="hljs-keyword">return</span><br>  &#125;<br>  <span class="hljs-keyword">let</span> <span class="hljs-attr">ob</span>: <span class="hljs-title class_">Observer</span> | <span class="hljs-keyword">void</span><br><br>  <span class="hljs-comment">/*这里用__ob__这个属性来判断是否已经有Observer实例，如果没有Observer实例则会新建一个Observer实例并赋值给__ob__这个属性，如果已有Observer实例则直接返回该Observer实例*/</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-title function_">hasOwn</span>(value, <span class="hljs-string">&#x27;__ob__&#x27;</span>) &amp;&amp; value.<span class="hljs-property">__ob__</span> <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Observer</span>) &#123;<br>    ob = value.<span class="hljs-property">__ob__</span><br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<br>    <span class="hljs-comment">/*这里的判断是为了确保value是单纯的对象，而不是函数或者是Regexp等情况。*/</span><br>    observerState.<span class="hljs-property">shouldConvert</span> &amp;&amp;<br>    !<span class="hljs-title function_">isServerRendering</span>() &amp;&amp;<br>    (<span class="hljs-title class_">Array</span>.<span class="hljs-title function_">isArray</span>(value) || <span class="hljs-title function_">isPlainObject</span>(value)) &amp;&amp;<br>    <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">isExtensible</span>(value) &amp;&amp;<br>    !value.<span class="hljs-property">_isVue</span><br>  ) &#123;<br>    ob = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Observer</span>(value)<br>  &#125;<br>  <span class="hljs-keyword">if</span> (asRootData &amp;&amp; ob) &#123;<br>    <span class="hljs-comment">/*如果是根数据则计数，后面Observer中的observe的asRootData非true*/</span><br>    ob.<span class="hljs-property">vmCount</span>++<br>  &#125;<br>  <span class="hljs-keyword">return</span> ob<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Dep与Watcher"><a href="#Dep与Watcher" class="headerlink" title="Dep与Watcher"></a>Dep与Watcher</h5><p>在数据劫持时，数据的获取和修改都会做出对应操作。操作目的就是为了通知“中转站”，它主要是对数据变更起通知作用及存放依赖这些数据的地方。</p><h6 id="Dep"><a href="#Dep" class="headerlink" title="Dep"></a>Dep</h6><p>Dep用来收集依赖，通知对应的订阅者，让它执行自己的操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * A dep is an observable that can have multiple</span><br><span class="hljs-comment"> * directives subscribing to it.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dep</span> &#123;<br>  <span class="hljs-keyword">static</span> <span class="hljs-attr">target</span>: ?<span class="hljs-title class_">Watcher</span><br>  <span class="hljs-attr">id</span>: number<br>  <span class="hljs-attr">subs</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Watcher</span>&gt;<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = uid++<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span> = []<br>  &#125;<br><br>  <span class="hljs-comment">/*添加一个观察者对象*/</span><br>  <span class="hljs-title function_">addSub</span>(<span class="hljs-params">sub: Watcher</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">push</span>(sub)<br>  &#125;<br><br>  <span class="hljs-comment">/*移除一个观察者对象*/</span><br>  <span class="hljs-title function_">removeSub</span>(<span class="hljs-params">sub: Watcher</span>) &#123;<br>    <span class="hljs-title function_">remove</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>, sub)<br>  &#125;<br><br>  <span class="hljs-comment">/*依赖收集，当存在Dep.target的时候添加观察者对象*/</span><br>  <span class="hljs-title function_">depend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>) &#123;<br>      <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>.<span class="hljs-title function_">addDep</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/*通知所有订阅者*/</span><br>  <span class="hljs-title function_">notify</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// stabilize the subscriber list first</span><br>    <span class="hljs-keyword">const</span> subs = <span class="hljs-variable language_">this</span>.<span class="hljs-property">subs</span>.<span class="hljs-title function_">slice</span>()<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>, l = subs.<span class="hljs-property">length</span>; i &lt; l; i++) &#123;<br>      subs[i].<span class="hljs-title function_">update</span>()<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// the current target watcher being evaluated.</span><br><span class="hljs-comment">// this is globally unique because there could be only one</span><br><span class="hljs-comment">// watcher being evaluated at any time.</span><br><span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span> = <span class="hljs-literal">null</span><br><span class="hljs-comment">/*依赖收集完需要将Dep.target设为null，防止后面重复添加依赖。*/</span><br><span class="hljs-keyword">const</span> targetStack = []<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">pushTarget</span>(<span class="hljs-params">_target: Watcher</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>) targetStack.<span class="hljs-title function_">push</span>(<span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span>)<br>  <span class="hljs-comment">// 改变目标指向</span><br>  <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span> = _target<br>&#125;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">popTarget</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 删除当前目标，重算指向</span><br>  <span class="hljs-title class_">Dep</span>.<span class="hljs-property">target</span> = targetStack.<span class="hljs-title function_">pop</span>()<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码主要进行了两个动作：</p><ul><li>定义subs数组，用来搜集订阅者Watcher。</li><li>劫持数据变更时，通知Watcher进行update操作。</li></ul><h6 id="Watcher"><a href="#Watcher" class="headerlink" title="Watcher"></a>Watcher</h6><p>Watcher是订阅者，主要作用是订阅Dep，当Dep发出消息<code>notify</code>的时候，所有订阅了Dep的Watcher执行自己的update操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Watcher</span> &#123;<br>  <span class="hljs-attr">vm</span>: <span class="hljs-title class_">Component</span><br>  <span class="hljs-attr">expression</span>: string<br>  <span class="hljs-attr">cb</span>: <span class="hljs-title class_">Function</span><br>  <span class="hljs-attr">id</span>: number<br>  <span class="hljs-attr">deep</span>: boolean<br>  <span class="hljs-attr">user</span>: boolean<br>  <span class="hljs-attr">lazy</span>: boolean<br>  <span class="hljs-attr">sync</span>: boolean<br>  <span class="hljs-attr">dirty</span>: boolean<br>  <span class="hljs-attr">active</span>: boolean<br>  <span class="hljs-attr">deps</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Dep</span>&gt;<br>  <span class="hljs-attr">newDeps</span>: <span class="hljs-title class_">Array</span>&lt;<span class="hljs-title class_">Dep</span>&gt;<br>  <span class="hljs-attr">depIds</span>: <span class="hljs-title class_">ISet</span><br>  <span class="hljs-attr">newDepIds</span>: <span class="hljs-title class_">ISet</span><br>  <span class="hljs-attr">getter</span>: <span class="hljs-title class_">Function</span><br>  <span class="hljs-attr">value</span>: any<br><br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span><br><span class="hljs-params">    vm: Component,</span><br><span class="hljs-params">    expOrFn: string | <span class="hljs-built_in">Function</span>,</span><br><span class="hljs-params">    cb: <span class="hljs-built_in">Function</span>,</span><br><span class="hljs-params">    options?: <span class="hljs-built_in">Object</span></span><br><span class="hljs-params">  </span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span> = vm<br>    <span class="hljs-comment">/*_watchers存放订阅者实例*/</span><br>    vm.<span class="hljs-property">_watchers</span>.<span class="hljs-title function_">push</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-comment">// options</span><br>    <span class="hljs-keyword">if</span> (options) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">deep</span> = !!options.<span class="hljs-property">deep</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = !!options.<span class="hljs-property">user</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">lazy</span> = !!options.<span class="hljs-property">lazy</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">sync</span> = !!options.<span class="hljs-property">sync</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">deep</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lazy</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">sync</span> = <span class="hljs-literal">false</span><br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = ++uid <span class="hljs-comment">// uid for batching</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">true</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dirty</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lazy</span> <span class="hljs-comment">// for lazy watchers</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span> = []<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDeps</span> = []<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">depIds</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDepIds</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">expression</span> =<br>      process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span> ? expOrFn.<span class="hljs-title function_">toString</span>() : <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-comment">// parse expression for getter</span><br>    <span class="hljs-comment">/*把表达式expOrFn解析成getter*/</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> expOrFn === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = expOrFn<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = <span class="hljs-title function_">parsePath</span>(expOrFn)<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;&#125;<br>        process.<span class="hljs-property">env</span>.<span class="hljs-property">NODE_ENV</span> !== <span class="hljs-string">&#x27;production&#x27;</span> &amp;&amp;<br>          <span class="hljs-title function_">warn</span>(<br>            <span class="hljs-string">`Failed watching path: &quot;<span class="hljs-subst">$&#123;expOrFn&#125;</span>&quot; `</span> +<br>              <span class="hljs-string">&#x27;Watcher only accepts simple dot-delimited paths. &#x27;</span> +<br>              <span class="hljs-string">&#x27;For full control, use a function instead.&#x27;</span>,<br>            vm<br>          )<br>      &#125;<br>    &#125;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">lazy</span> ? <span class="hljs-literal">undefined</span> : <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>()<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Evaluate the getter, and re-collect dependencies.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">/*获得getter的值并且重新进行依赖收集*/</span><br>  <span class="hljs-title function_">get</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/*将自身watcher观察者实例设置给Dep.target，用以依赖收集。*/</span><br>    <span class="hljs-title function_">pushTarget</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">let</span> value<br>    <span class="hljs-keyword">const</span> vm = <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span><br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    执行了getter操作，看似执行了渲染操作，其实是执行了依赖收集。</span><br><span class="hljs-comment">    在将Dep.target设置为自生观察者实例以后，执行getter操作。</span><br><span class="hljs-comment">    譬如说现在的的data中可能有a、b、c三个数据，getter渲染需要依赖a跟c，</span><br><span class="hljs-comment">    那么在执行getter的时候就会触发a跟c两个数据的getter函数，</span><br><span class="hljs-comment">    在getter函数中即可判断Dep.target是否存在然后完成依赖收集，</span><br><span class="hljs-comment">    将该观察者对象放入闭包中的Dep的subs中去。</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>) &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>        value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span>.<span class="hljs-title function_">call</span>(vm, vm)<br>      &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>        <span class="hljs-title function_">handleError</span>(e, vm, <span class="hljs-string">`getter for watcher &quot;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.expression&#125;</span>&quot;`</span>)<br>      &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      value = <span class="hljs-variable language_">this</span>.<span class="hljs-property">getter</span>.<span class="hljs-title function_">call</span>(vm, vm)<br>    &#125;<br>    <span class="hljs-comment">// &quot;touch&quot; every property so they are all tracked as</span><br>    <span class="hljs-comment">// dependencies for deep watching</span><br>    <span class="hljs-comment">/*如果存在deep，则触发每个深层对象的依赖，追踪其变化*/</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">deep</span>) &#123;<br>      <span class="hljs-comment">/*递归每一个对象或者数组，触发它们的getter，使得对象或数组的每一个成员都被依赖收集，形成一个“深（deep）”依赖关系*/</span><br>      <span class="hljs-title function_">traverse</span>(value)<br>    &#125;<br><br>    <span class="hljs-comment">/*将观察者实例从target栈中取出并设置给Dep.target*/</span><br>    <span class="hljs-title function_">popTarget</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">cleanupDeps</span>()<br>    <span class="hljs-keyword">return</span> value<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Add a dependency to this directive.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">/*添加一个依赖关系到Deps集合中*/</span><br>  <span class="hljs-title function_">addDep</span>(<span class="hljs-params">dep: Dep</span>) &#123;<br>    <span class="hljs-keyword">const</span> id = dep.<span class="hljs-property">id</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">newDepIds</span>.<span class="hljs-title function_">has</span>(id)) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDepIds</span>.<span class="hljs-title function_">add</span>(id)<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDeps</span>.<span class="hljs-title function_">push</span>(dep)<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">depIds</span>.<span class="hljs-title function_">has</span>(id)) &#123;<br>        dep.<span class="hljs-title function_">addSub</span>(<span class="hljs-variable language_">this</span>)<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Clean up for dependency collection.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">/*清理依赖收集*/</span><br>  <span class="hljs-title function_">cleanupDeps</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/*移除所有观察者对象*/</span><br>    <span class="hljs-keyword">let</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">while</span> (i--) &#123;<br>      <span class="hljs-keyword">const</span> dep = <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>[i]<br>      <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">newDepIds</span>.<span class="hljs-title function_">has</span>(dep.<span class="hljs-property">id</span>)) &#123;<br>        dep.<span class="hljs-title function_">removeSub</span>(<span class="hljs-variable language_">this</span>)<br>      &#125;<br>    &#125;<br>    <span class="hljs-keyword">let</span> tmp = <span class="hljs-variable language_">this</span>.<span class="hljs-property">depIds</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">depIds</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDepIds</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDepIds</span> = tmp<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDepIds</span>.<span class="hljs-title function_">clear</span>()<br>    tmp = <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDeps</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDeps</span> = tmp<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">newDeps</span>.<span class="hljs-property">length</span> = <span class="hljs-number">0</span><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Subscriber interface.</span><br><span class="hljs-comment">   * Will be called when a dependency changes.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">  调度者接口，当依赖发生改变的时候进行回调。</span><br><span class="hljs-comment">  */</span><br>  <span class="hljs-title function_">update</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">/* istanbul ignore else */</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">lazy</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">dirty</span> = <span class="hljs-literal">true</span><br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">sync</span>) &#123;<br>      <span class="hljs-comment">/*同步则执行run直接渲染视图*/</span><br>      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">run</span>()<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">/*异步推送到观察者队列中，由调度者调用。*/</span><br>      <span class="hljs-title function_">queueWatcher</span>(<span class="hljs-variable language_">this</span>)<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Scheduler job interface.</span><br><span class="hljs-comment">   * Will be called by the scheduler.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">/*</span><br><span class="hljs-comment">        调度者工作接口，将被调度者回调。</span><br><span class="hljs-comment">        */</span><br>  <span class="hljs-title function_">run</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">active</span>) &#123;<br>      <span class="hljs-keyword">const</span> value = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>()<br>      <span class="hljs-keyword">if</span> (<br>        value !== <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> ||<br>        <span class="hljs-comment">// Deep watchers and watchers on Object/Arrays should fire even</span><br>        <span class="hljs-comment">// when the value is the same, because the value may</span><br>        <span class="hljs-comment">// have mutated.</span><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">          即便值相同，拥有Deep属性的观察者以及在对象／数组上的观察者应该被触发更新，因为它们的值可能发生改变。</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-title function_">isObject</span>(value) ||<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">deep</span><br>      ) &#123;<br>        <span class="hljs-comment">// set new value</span><br>        <span class="hljs-keyword">const</span> oldValue = <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span><br>        <span class="hljs-comment">/*设置新的值*/</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = value<br><br>        <span class="hljs-comment">/*触发回调渲染视图*/</span><br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">user</span>) &#123;<br>          <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>, value, oldValue)<br>          &#125; <span class="hljs-keyword">catch</span> (e) &#123;<br>            <span class="hljs-title function_">handleError</span>(e, <span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>, <span class="hljs-string">`callback for watcher &quot;<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.expression&#125;</span>&quot;`</span>)<br>          &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>, value, oldValue)<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Evaluate the value of the watcher.</span><br><span class="hljs-comment">   * This only gets called for lazy watchers.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">/*获取观察者的值*/</span><br>  <span class="hljs-title function_">evaluate</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">get</span>()<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">dirty</span> = <span class="hljs-literal">false</span><br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Depend on all deps collected by this watcher.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">/*收集该watcher的所有deps依赖*/</span><br>  <span class="hljs-title function_">depend</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>.<span class="hljs-property">length</span><br>    <span class="hljs-keyword">while</span> (i--) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>[i].<span class="hljs-title function_">depend</span>()<br>    &#125;<br>  &#125;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * Remove self from all dependencies&#x27; subscriber list.</span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-comment">/*将自身从所有依赖收集订阅列表删除*/</span><br>  <span class="hljs-title function_">teardown</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">active</span>) &#123;<br>      <span class="hljs-comment">// remove self from vm&#x27;s watcher list</span><br>      <span class="hljs-comment">// this is a somewhat expensive operation so we skip it</span><br>      <span class="hljs-comment">// if the vm is being destroyed.</span><br>      <span class="hljs-comment">/*从vm实例的观察者列表中将自身移除，由于该操作比较耗费资源，所以如果vm实例正在被销毁则跳过该步骤。*/</span><br>      <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>.<span class="hljs-property">_isBeingDestroyed</span>) &#123;<br>        <span class="hljs-title function_">remove</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vm</span>.<span class="hljs-property">_watchers</span>, <span class="hljs-variable language_">this</span>)<br>      &#125;<br>      <span class="hljs-keyword">let</span> i = <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>.<span class="hljs-property">length</span><br>      <span class="hljs-keyword">while</span> (i--) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">deps</span>[i].<span class="hljs-title function_">removeSub</span>(<span class="hljs-variable language_">this</span>)<br>      &#125;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">active</span> = <span class="hljs-literal">false</span><br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><blockquote><p>命令模式是最简单和优雅的模式之一，命令模式中的命令（command）指的是一个执行某些特定事情的指令。</p></blockquote><p>命令模式是一种松耦合的方式，使请求发送者和接收者消除彼此的耦合关系。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* </span><br><span class="hljs-comment">    本质是对命令封装，拆分发出命令的责任和执行命令的责任</span><br><span class="hljs-comment">    优点：降低对象耦合度，易扩展组合命令，调用同一方法实现不同功能</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">// 命令</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">CreateCommand</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">receiver</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span> = receiver<br>&#125;<br><span class="hljs-title class_">CreateCommand</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">execute</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-title function_">action</span>()<br>&#125;<br><br><span class="hljs-comment">// 接收者</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">TVOn</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;<br><span class="hljs-title class_">TVOn</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">action</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;TV on now&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">TVOff</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; &#125;<br><span class="hljs-title class_">TVOff</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">action</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;TV off now&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">// 调用者</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Invoker</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">tvOnCommand, tvOffCommand</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tvOnCommand</span> = tvOnCommand<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tvOffCommand</span> = tvOffCommand<br>&#125;<br><span class="hljs-title class_">Invoker</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">tvOn</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tvOnCommand</span>.<span class="hljs-title function_">execute</span>()<br>&#125;<br><span class="hljs-title class_">Invoker</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">tvOff</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">tvOffCommand</span>.<span class="hljs-title function_">execute</span>()<br>&#125;<br><br><span class="hljs-keyword">var</span> tvOnCommand = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateCommand</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TVOn</span>())<br><span class="hljs-keyword">var</span> tvOffCommand = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CreateCommand</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TVOff</span>())<br><br><span class="hljs-keyword">var</span> myInvoker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Invoker</span>(tvOnCommand, tvOffCommand)<br>myInvoker.<span class="hljs-title function_">tvOn</span>()<br>myInvoker.<span class="hljs-title function_">tvOff</span>()<br></code></pre></td></tr></table></figure><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><blockquote><p>组合模式就是用小的子对象来构建更大的对象，而这些小的子对象本身也许是由更小的“孙对象”构成的。</p></blockquote><h3 id="组合模式用途"><a href="#组合模式用途" class="headerlink" title="组合模式用途"></a>组合模式用途</h3><p>组合模式将对象组合成树型结构，以表示“部分-整体”的层级结构。组合模式的另一个好处是通过对象的多态性表现，使得用户对单个对象和组合对象的使用具有一致性。</p><p>以宏命令为例，请求从树最顶端的对象往下传递，如果当前处理请求的对象是叶对象（普通子命令），叶对象自身会对请求作出相应的处理；如果当前处理请求的对象是组合对象（宏命令），组合对象则会遍历它属下的子节点，将请求继续传递给这些子节点。</p><p>请求从上至下传递直到尽头，用户只需要关心最顶层的组合对象，请求该对象请求便会向下传递。</p><p>角色：<br>（1）子对象<br>（2）组合对象<br>（3）抽象类：主要定义了参与组合的对象的公共接口，也可以直接在组合对象中定义</p><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><p>github上原有<a href="https://github.com/sohamkamani/javascript-design-patterns-for-humans#-bridge">例子</a></p><p>场景：组织内有各种员工，员工有不同姓名、工资，可进行添加操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 场景 以员工为例。这里我们有不同的员工类型</span><br><span class="hljs-comment">// 开发者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Developer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, salary</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">salary</span> = salary<br>    &#125;<br>    <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>    &#125;<br>    <span class="hljs-title function_">setSalary</span>(<span class="hljs-params">salary</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">salary</span> = salary<br>    &#125;<br>    <span class="hljs-title function_">getSalary</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">salary</span><br>    &#125;<br>    <span class="hljs-title function_">getRoles</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">roles</span><br>    &#125;<br>    <span class="hljs-title function_">develop</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">/* */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 设计师</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Designer</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, salary</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">salary</span> = salary<br>    &#125;<br>    <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>    &#125;<br>    <span class="hljs-title function_">setSalary</span>(<span class="hljs-params">salary</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">salary</span> = salary<br>    &#125;<br>    <span class="hljs-title function_">getSalary</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">salary</span><br>    &#125;<br>    <span class="hljs-title function_">getRoles</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">roles</span><br>    &#125;<br>    <span class="hljs-title function_">design</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">/* */</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 一个由几种不同类型的员工组成的组织</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Organization</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">employees</span> = []<br>    &#125;<br>    <span class="hljs-comment">// 追加元素</span><br>    <span class="hljs-title function_">addEmployee</span>(<span class="hljs-params">employee</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">employees</span>.<span class="hljs-title function_">push</span>(employee)<br>    &#125;<br>    <span class="hljs-comment">//  叶对象都有一样的getSalary方法。在根对象执行的时候，可以使用leaf.execute的模式来调用对象的方法。</span><br>    <span class="hljs-title function_">getNetSalaries</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">let</span> netSalary = <span class="hljs-number">0</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">employees</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">employee</span> =&gt;</span> &#123;<br>            netSalary += employee.<span class="hljs-title function_">getSalary</span>()<br>        &#125;)<br>        <span class="hljs-keyword">return</span> netSalary<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 调用</span><br><span class="hljs-comment">// Prepare the employees</span><br><span class="hljs-keyword">const</span> john = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Developer</span>(<span class="hljs-string">&#x27;John Doe&#x27;</span>, <span class="hljs-number">12000</span>)<br><span class="hljs-keyword">const</span> jane = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Designer</span>(<span class="hljs-string">&#x27;Jane&#x27;</span>, <span class="hljs-number">10000</span>)<br><span class="hljs-comment">// Add them to organization 优势：无论多少员工类型 对整个组合对象只调用一次</span><br><span class="hljs-keyword">const</span> organization = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Organization</span>()<br>organization.<span class="hljs-title function_">addEmployee</span>(john)<br>organization.<span class="hljs-title function_">addEmployee</span>(jane)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;Net salaries: &quot;</span> , organization.<span class="hljs-title function_">getNetSalaries</span>()) <span class="hljs-comment">// Net Salaries: 22000</span><br></code></pre></td></tr></table></figure><h3 id="需要注意的地方"><a href="#需要注意的地方" class="headerlink" title="需要注意的地方"></a>需要注意的地方</h3><ul><li>组合模式不是父子关系</li><li>对叶对象操作的一致性</li><li>双向映射关系</li><li>用职责链模式提高组合模式性能</li></ul><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>含有某种层级结构的对象集合(具体结构在开发过程中无法确定)</li><li>希望对这些对象或者其中的某些对象执行某种操作</li></ul><p>缺点：因为组合对象的任何操作都会对所有的子对象调用同样的操作，所以当组合的结构很大时会有性能问题。</p>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>w字总结《JavaScript设计模式与开发实践》（基础篇）</title>
    <link href="/2021/11/16/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8AJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/"/>
    <url>/2021/11/16/w%E5%AD%97%E6%80%BB%E7%BB%93%E3%80%8AJavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E3%80%8B%EF%BC%88%E5%9F%BA%E7%A1%80%E7%AF%87%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h1><p><a href="https://juejin.cn/post/7031461636158259214">w字总结《JavaScript设计模式与开发实践》（设计模式）（上）</a></p><p><a href="https://juejin.cn/post/7032152388773675021/">w字总结《JavaScript设计模式与开发实践》（设计模式）（下）</a></p><p><a href="https://juejin.cn/post/7033225292252446727">w字总结《JavaScript设计模式与开发实践》（设计原则和编程技巧）</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为什么我要开始写这类文章了，一切都得从EDG夺冠开始说起，在打完第三局后我发了一条朋友圈……如下图。</p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/d7688362f0b446bfaa951be25da9a265~tplv-k3u1fbpfcp-watermark.image?" alt="" width="400" height="175" align="bottom" /><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9202c2afe9084f09af98fd238a8c65c5~tplv-k3u1fbpfcp-watermark.image?" alt="" width="190" height="320" align="bottom" /><p>我也是没想到EDG韧性这么强，汉子哥这么热爱中国。<br>不管怎么说，恭喜EDG，自己立的flag，哭着也要把它实现。（其实蛮不错的，充实自己。）<br>现在每天和周末空闲时间就读一些，做做笔记，周末整合一下形成文章，往掘金这么一发。</p><h1 id="this，call和apply"><a href="#this，call和apply" class="headerlink" title="this，call和apply"></a>this，call和apply</h1><h2 id="this"><a href="#this" class="headerlink" title="this"></a><a href="http://127.0.0.1:3334/mdEditor/?defaultMode=view&fileId=WEB541c2b212bcf1974b4ee1275b9b7acf2#this"></a>this</h2><blockquote><p>在JavaScript中，this指向的对象是在运行时基于函数的执行环境动态绑定的，而非声明函数时的环境</p></blockquote><h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a><a href="http://127.0.0.1:3334/mdEditor/?defaultMode=view&fileId=WEB541c2b212bcf1974b4ee1275b9b7acf2#this%E6%8C%87%E5%90%91"></a>this指向</h3><p>除去<code>with</code>和<code>eval</code>这两种会“破坏”我们对作用域理解的情况，this的指向大致分为以下几种。</p><ul><li>  作为对象的方法</li><li>  作为普通函数</li><li>  构造器调用</li><li>  <code>Function.prototype.call</code> 或 <code>Function.prototype.apply</code> 调用</li></ul><p><strong>作为对象的方法调用时，this指向该对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;moe&#x27;</span>,<br>    <span class="hljs-attr">getName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span> === obj) <span class="hljs-comment">// true</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>) <span class="hljs-comment">// moe</span><br>    &#125;<br>&#125;<br><br>obj.<span class="hljs-title function_">getName</span>()<br></code></pre></td></tr></table></figure><p><strong>当函数不作为对象属性而作为普通函数调用时，this指向全局对象，在浏览器的JavaScript中，全局对象为window</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;moe&#x27;</span><br><br><span class="hljs-keyword">var</span> getName = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>&#125;<br><br><span class="hljs-keyword">var</span> person = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;kid&#x27;</span>,<br>    <span class="hljs-attr">getName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> globalGetName = person.<span class="hljs-property">getName</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">getName</span>() ) <span class="hljs-comment">// moe</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">globalGetName</span>() ) <span class="hljs-comment">// moe</span><br></code></pre></td></tr></table></figure><p><strong>作为构造器调用</strong></p><ol><li> 用new运算符调用时，该函数返回一个对象，通常情况下，构造器内this指向返回的这个对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;moe&#x27;</span><br>&#125;<br><br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>) <span class="hljs-comment">// moe</span><br></code></pre></td></tr></table></figure><p>但如果构造器显式返回了一个object类型对象，则返回的为该对象，而不是上述的this。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> <span class="hljs-title class_">MyClass</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = <span class="hljs-string">&#x27;moe&#x27;</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;kid&#x27;</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyClass</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>) <span class="hljs-comment">// kid</span><br></code></pre></td></tr></table></figure><blockquote><p>构造器不显式返回数据或返回非对象类型数据，则无上述问题。</p></blockquote><p><strong>Function.prototype.call或Function.prototype.apply调用可以动态改变传入函数的this</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj1 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;a&#x27;</span>,<br>    <span class="hljs-attr">getName</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> obj2 = &#123;<br>    <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;b&#x27;</span><br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-title function_">getName</span>()) <span class="hljs-comment">// a</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj1.<span class="hljs-property">getName</span>.<span class="hljs-title function_">call</span>(obj2)) <span class="hljs-comment">// b</span><br></code></pre></td></tr></table></figure><h2 id="call和apply"><a href="#call和apply" class="headerlink" title="call和apply"></a><a href="http://127.0.0.1:3334/mdEditor/?defaultMode=view&fileId=WEB541c2b212bcf1974b4ee1275b9b7acf2#call%E5%92%8Capply"></a>call和apply</h2><blockquote><p>call和apply都是用来修改this指向，并执行函数，唯一的区别是入参形式不同</p></blockquote><ul><li>  apply接受两个参数，第一个参数指定了函数体内this对象的指向，第二个参数为集合（数组或类数组），apply方法把这个集合中的元素作为参数传递给被调用的函数。</li><li>  call本质上为apply的语法糖，它传入参数数量不定，第一个参数同apply一样，也是代表函数体内this指向，从第二个参数往后，每个参数被依次传入函数。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b, c</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>([a, b, c]) <span class="hljs-comment">// [1, 2, 3]</span><br>&#125;<br>foo.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>])<br>foo.<span class="hljs-title function_">call</span>(<span class="hljs-literal">null</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>上述代码中，我们传入的第一个参数为null，则函数体内的this会指向默认的宿主对象。</p><h3 id="call和apply的用途"><a href="#call和apply的用途" class="headerlink" title="call和apply的用途"></a><a href="http://127.0.0.1:3334/mdEditor/?defaultMode=view&fileId=WEB541c2b212bcf1974b4ee1275b9b7acf2#call%E5%92%8Capply%E7%9A%84%E7%94%A8%E9%80%94"></a>call和apply的用途</h3><ol><li> 改变this指向</li><li> 借用其他对象方法</li></ol><p>利用apply或call，可以实现类似于继承的效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> A = <span class="hljs-keyword">function</span> (<span class="hljs-params">name</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>&#125;<br><br><span class="hljs-keyword">var</span> B = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    A.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span>,<span class="hljs-variable language_">arguments</span>)<br>&#125;<br><br>B.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getName</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>&#125;<br><br><span class="hljs-keyword">var</span> b = <span class="hljs-keyword">new</span> <span class="hljs-title function_">B</span>(<span class="hljs-string">&#x27;newBee&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( b.<span class="hljs-title function_">getName</span>() ) <span class="hljs-comment">// newBee</span><br> <br></code></pre></td></tr></table></figure><p>函数的arguments是一个类数组对象，因为其不是真正的数组，所以无法像数组一样进行排序或向集合中添加删除元素之类的操作。这种情况我们可以借用<code>Array.prototype</code>对象上的方法，比如push。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-number">3</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>); <span class="hljs-comment">// [1, 2, 3]</span><br>&#125;)(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h1 id="闭包和高阶函数"><a href="#闭包和高阶函数" class="headerlink" title="闭包和高阶函数"></a>闭包和高阶函数</h1><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><p>在函数中声明变量，如果该变量前没有关键字var，该变量就会成为全局变量，而在函数中用var关键字声明的变量为该函数的局部变量，只有在该函数内才能访问到该变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;in foo:&#x27;</span> , b) <span class="hljs-comment">// in foo: 2</span><br>&#125;<br><span class="hljs-title function_">foo</span>()<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a ) <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( b ) <span class="hljs-comment">// Uncaught ReferenceError: b is not defined</span><br></code></pre></td></tr></table></figure><p>函数可以用来创造函数作用域，此时函数像一层半透明玻璃，函数内可以看到外面的变量，而函数外无法看到函数内部的变量。这是因为在函数中搜索一个变量时，若函数内没有声明这个变量，搜索则会随着代码执行环境创建的作用域链向外逐层搜索，直到全局对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">var</span> bar = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> c = <span class="hljs-number">3</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( b ) <span class="hljs-comment">// 2</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a ) <span class="hljs-comment">// 1</span><br>    &#125;<br>    <span class="hljs-title function_">foo</span>()<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( c ) <span class="hljs-comment">// Uncaught ReferenceError: c is not defined</span><br>&#125;<br><span class="hljs-title function_">bar</span>()<br></code></pre></td></tr></table></figure><h3 id="变量的生存周期"><a href="#变量的生存周期" class="headerlink" title="变量的生存周期"></a>变量的生存周期</h3><ul><li>全局变量的生存周期为永久，除非主动销毁。</li><li>函数内的局部变量会随着函数调用的结束而被销毁。</li></ul><p>而闭包的存在可以让我们延续函数内局部变量的生命周期</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> func = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        a++<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a)<br>    &#125;<br>&#125;<br><span class="hljs-keyword">var</span> f = <span class="hljs-title function_">func</span>()<br><span class="hljs-title function_">f</span>() <span class="hljs-comment">// 2</span><br><span class="hljs-title function_">f</span>() <span class="hljs-comment">// 3</span><br><span class="hljs-title function_">f</span>() <span class="hljs-comment">// 4</span><br></code></pre></td></tr></table></figure><p>类似的，我们一定遇到过这样的题目</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    以下打印结果是5个5，为什么，如何打印出0到4？</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( i ); <br>    &#125;, <span class="hljs-number">1000</span>); <br>&#125; <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>, i);<br><br></code></pre></td></tr></table></figure><p>在这个函数里面的i其实引用的是最后一次i的值，为什么不是0,1,2,3,4…呢？因为在你for循环的时候，你并没有执行这个函数，你这个函数是过一秒才执行的，当执行这个函数的时候，它发现它自己没有这个变量i，于是向它的作用域链中查找这个变量i，因为这个时候已经for循环完了，所以储存在作用域链里面的i的值就是5，最后就打印出来5了。</p><p>利用闭包解决，通过自执行函数，将变量i保存到该函数的参数中，延长其生命周期。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123; <br>    (<span class="hljs-keyword">function</span>(<span class="hljs-params">j</span>) &#123;  <br>    <span class="hljs-built_in">setTimeout</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(j);<br>        &#125;, <span class="hljs-number">1000</span>); <br>    &#125;)(i); <br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i);<br></code></pre></td></tr></table></figure><h3 id="闭包的更多作用"><a href="#闭包的更多作用" class="headerlink" title="闭包的更多作用"></a>闭包的更多作用</h3><ol><li>封装变量</li></ol><p>如果一大块代码中中存在可独立的小代码块，我们通常将其封装在独立的小函数中，独立出来的小函数有助于复用，如果它们不需要在程序的其他地方使用，最好用闭包将它们封闭。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> mult = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> cache = &#123;&#125;<br>    <span class="hljs-keyword">var</span> calculate = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; l; i++ ) &#123;<br>            a = a * <span class="hljs-variable language_">arguments</span>[i]<br>        &#125;<br>        <span class="hljs-keyword">return</span> a<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> args = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">join</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>, <span class="hljs-string">&#x27;,&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(args <span class="hljs-keyword">in</span> cache) &#123;<br>            <span class="hljs-keyword">return</span> cache[args]<br>        &#125;<br>        <span class="hljs-keyword">return</span> cache[args] = calculate.<span class="hljs-title function_">apply</span>(<span class="hljs-literal">null</span>, <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><ol start="2"><li>延续局部变量寿命</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> report = (<span class="hljs-title function_">fucntion</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> imgs = []<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params">src</span>) &#123;<br>        <span class="hljs-keyword">var</span> img = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Image</span>()<br>        imgs.<span class="hljs-title function_">push</span>(img)<br>        img.<span class="hljs-property">src</span> = src<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="闭包和面向对象设计"><a href="#闭包和面向对象设计" class="headerlink" title="闭包和面向对象设计"></a>闭包和面向对象设计</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 闭包写法</span><br><span class="hljs-keyword">var</span> extent = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> value = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> &#123;<br>        <span class="hljs-attr">call</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>            value++<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value)<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> extent = <span class="hljs-title function_">extent</span>();<br>extent.<span class="hljs-title function_">call</span>(); <span class="hljs-comment">// 输出：1 </span><br>extent.<span class="hljs-title function_">call</span>(); <span class="hljs-comment">// 输出：2 </span><br>extent.<span class="hljs-title function_">call</span>(); <span class="hljs-comment">// 输出：3</span><br><br><span class="hljs-comment">// 面向对象</span><br><span class="hljs-keyword">var</span> extent2 = &#123;<br>    <span class="hljs-attr">value</span>:<span class="hljs-number">0</span>,<br>    <span class="hljs-attr">call</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>++<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">value</span>)<br>    &#125;<br>&#125;<br><br>extent2.<span class="hljs-title function_">call</span>(); <span class="hljs-comment">// 输出：1 </span><br>extent2.<span class="hljs-title function_">call</span>(); <span class="hljs-comment">// 输出：2 </span><br>extent2.<span class="hljs-title function_">call</span>(); <span class="hljs-comment">// 输出：3</span><br></code></pre></td></tr></table></figure><h3 id="用闭包实现命令模式"><a href="#用闭包实现命令模式" class="headerlink" title="用闭包实现命令模式"></a>用闭包实现命令模式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;undo&quot;</span>&gt;</span>点击我执行命令<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;execute&quot;</span>&gt;</span>点击我执行命令<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"> </span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> <span class="hljs-title class_">Tv</span> = &#123; </span><br><span class="language-javascript">                 <span class="hljs-attr">open</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; </span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;打开电视机&#x27;</span> ); </span><br><span class="language-javascript">                 &#125;, </span><br><span class="language-javascript">                 <span class="hljs-attr">close</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; </span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-string">&#x27;关上电视机&#x27;</span> ); </span><br><span class="language-javascript">                 &#125; </span><br><span class="language-javascript">            &#125;; </span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> <span class="hljs-title class_">OpenTvCommand</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"> receiver </span>)&#123; </span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span> = receiver; </span><br><span class="language-javascript">            &#125;; </span><br><span class="language-javascript">            <span class="hljs-title class_">OpenTvCommand</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">execute</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; </span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-title function_">open</span>(); <span class="hljs-comment">// 执行命令，打开电视机</span></span><br><span class="language-javascript">            &#125;; </span><br><span class="language-javascript">            <span class="hljs-title class_">OpenTvCommand</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">undo</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; </span><br><span class="language-javascript">                <span class="hljs-variable language_">this</span>.<span class="hljs-property">receiver</span>.<span class="hljs-title function_">close</span>(); <span class="hljs-comment">// 撤销命令，关闭电视机</span></span><br><span class="language-javascript">            &#125;; </span><br><span class="language-javascript">            <span class="hljs-keyword">var</span> setCommand = <span class="hljs-keyword">function</span>(<span class="hljs-params"> command </span>)&#123; </span><br><span class="language-javascript">                 <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>( <span class="hljs-string">&#x27;execute&#x27;</span> ).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; </span><br><span class="language-javascript">                    command.<span class="hljs-title function_">execute</span>(); <span class="hljs-comment">// 输出：打开电视机</span></span><br><span class="language-javascript">                 &#125; </span><br><span class="language-javascript">                 <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>( <span class="hljs-string">&#x27;undo&#x27;</span> ).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; </span><br><span class="language-javascript">                    command.<span class="hljs-title function_">undo</span>(); <span class="hljs-comment">// 输出：关闭电视机</span></span><br><span class="language-javascript">                 &#125; </span><br><span class="language-javascript">            &#125;; </span><br><span class="language-javascript">            <span class="hljs-title function_">setCommand</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">OpenTvCommand</span>( <span class="hljs-title class_">Tv</span> ) ); </span><br><span class="language-javascript">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h2><blockquote><p>即函数柯里化，指函数作为参数或函数作为返回值输出的函数。</p></blockquote><h3 id="函数作为参数传递"><a href="#函数作为参数传递" class="headerlink" title="函数作为参数传递"></a>函数作为参数传递</h3><ol><li><p>回调函数</p><ul><li>异步回调</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><br><span class="hljs-keyword">var</span> getUserInfo = <span class="hljs-keyword">function</span>(<span class="hljs-params">userId, cb</span>) &#123;<br>    $.<span class="hljs-title function_">ajax</span>(<span class="hljs-string">&#x27;http://xxx.com/getUserInfo?&#x27;</span> + userId , <span class="hljs-keyword">function</span>(<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">typeof</span> cb === <span class="hljs-string">&#x27;function&#x27;</span>) &#123;<br>            <span class="hljs-title function_">cb</span>(data)<br>        &#125;<br>    &#125;)<br>&#125;<br><br><span class="hljs-title function_">getUserInfo</span>(<span class="hljs-number">10086</span>, <span class="hljs-function">(<span class="hljs-params">data</span>)=&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;)<br><br></code></pre></td></tr></table></figure><ul><li>事件委托</li></ul> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> appendDiv = <span class="hljs-keyword">function</span>(<span class="hljs-params"> callback </span>)&#123; <br>    <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++ )&#123; <br>        <span class="hljs-keyword">var</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>( <span class="hljs-string">&#x27;div&#x27;</span> ); <br>        div.<span class="hljs-property">innerHTML</span> = i; <br>        <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>( div ); <br>        <span class="hljs-keyword">if</span> ( <span class="hljs-keyword">typeof</span> callback === <span class="hljs-string">&#x27;function&#x27;</span> )&#123; <br>        <span class="hljs-title function_">callback</span>( div ); <br>        &#125; <br>    &#125; <br>&#125;; <br><span class="hljs-title function_">appendDiv</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"> node </span>)&#123; <br>    node.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&#x27;none&#x27;</span>; <br>&#125;);<br></code></pre></td></tr></table></figure></li><li><p>Array.prototype.sort</p></li></ol><p>Array.prototype.sort接受一个函数当作参数，函数内封装了数组元素的排序规则，我们只需要关注用什么规则排序，这是可变的，而对数组排序则是不变的。把可变的部分封装在函数参数里，动态传入Array.prototype.sort，使之更加灵活。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 从小到大</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> a - b<br>&#125;)<br><span class="hljs-comment">// 从大到小</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>].<span class="hljs-title function_">sort</span>(<span class="hljs-function">(<span class="hljs-params">a, b</span>)=&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> b - a<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="函数作为返回值输出"><a href="#函数作为返回值输出" class="headerlink" title="函数作为返回值输出"></a>函数作为返回值输出</h3><ol><li>判断数据类型</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> isType = <span class="hljs-keyword">function</span>(<span class="hljs-params"> type </span>)&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"> obj </span>)&#123; <br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Object</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">toString</span>.<span class="hljs-title function_">call</span>( obj ) === <span class="hljs-string">&#x27;[object &#x27;</span>+ type +<span class="hljs-string">&#x27;]&#x27;</span>; <br>    &#125; <br>&#125;;<br><br><span class="hljs-keyword">var</span> isString = <span class="hljs-title function_">isType</span>( <span class="hljs-string">&#x27;String&#x27;</span> ); <br><span class="hljs-keyword">var</span> isArray = <span class="hljs-title function_">isType</span>( <span class="hljs-string">&#x27;Array&#x27;</span> ); <br><span class="hljs-keyword">var</span> isNumber = <span class="hljs-title function_">isType</span>( <span class="hljs-string">&#x27;Number&#x27;</span> ); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">isArray</span>( [ <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> ] ) ); <span class="hljs-comment">// 输出：true</span><br></code></pre></td></tr></table></figure><ol start="2"><li>getSingle</li></ol><p>单例模式，后续设计模式章节会有详细介绍</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getSingle = <span class="hljs-keyword">function</span> (<span class="hljs-params"> fn </span>) &#123; <br>    <span class="hljs-keyword">var</span> ret; <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>        <span class="hljs-keyword">return</span> ret || ( ret = fn.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, <span class="hljs-variable language_">arguments</span> ) ); <br>    &#125;; <br>&#125;;<br></code></pre></td></tr></table></figure><p>这里getSingle是一个高阶函数，将函数作为参数传递，又让函数执行后返回另一个函数，看看效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> getScript = <span class="hljs-title function_">getSingle</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>( <span class="hljs-string">&#x27;script&#x27;</span> ); <br>&#125;); <br><span class="hljs-keyword">var</span> script1 = <span class="hljs-title function_">getScript</span>(); <br><span class="hljs-keyword">var</span> script2 = <span class="hljs-title function_">getScript</span>(); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( script1 === script2 ); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="高阶函数实现AOP"><a href="#高阶函数实现AOP" class="headerlink" title="高阶函数实现AOP"></a>高阶函数实现AOP</h3><p>AOP即面向切面编程，主要作用是将一些与核心业务逻辑无关的代码抽离，通常包括日志统计、安全控制、异常处理等。把这些功能抽离出来后，再通过“动态织入”的方式掺入业务逻辑模块，这样做的好处是可以保持业务逻辑的纯净与高内聚，且可以方便的复用抽离的功能模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">before</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">beforeFn</span>) &#123;<br>    <span class="hljs-keyword">var</span> _self = <span class="hljs-variable language_">this</span> <span class="hljs-comment">// 保存原函数的引用</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-comment">// 返回包含原函数和新函数的代理函数</span><br>        beforeFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span> , <span class="hljs-variable language_">arguments</span>) <span class="hljs-comment">// 执行新函数，修正this</span><br>        <span class="hljs-keyword">return</span> _self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span> , <span class="hljs-variable language_">arguments</span>) <span class="hljs-comment">// 执行原函数</span><br>    &#125;<br>&#125;<br><br><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">after</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">afterFn</span>) &#123;<br>    <span class="hljs-keyword">var</span> _self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> ret = _self.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span> , <span class="hljs-variable language_">arguments</span>)<br>        afterFn.<span class="hljs-title function_">apply</span>(<span class="hljs-variable language_">this</span> , <span class="hljs-variable language_">arguments</span>)<br>        <span class="hljs-keyword">return</span> ret<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;函数执行&#x27;</span>)<br>&#125;<br><br>foo = foo.<span class="hljs-title function_">before</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;before&#x27;</span>)<br>&#125;).<span class="hljs-title function_">after</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;after&#x27;</span>)<br>&#125;)<br><br><span class="hljs-title function_">foo</span>()<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fa517e1c9c7149c5b640782e6afff01c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="高阶函数的其他应用"><a href="#高阶函数的其他应用" class="headerlink" title="高阶函数的其他应用"></a>高阶函数的其他应用</h3><ol><li>函数柯里化（currying）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> currying = <span class="hljs-keyword">function</span>(<span class="hljs-params"> fn </span>)&#123; <br>    <span class="hljs-keyword">var</span> args = []; <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>            <span class="hljs-keyword">if</span> ( <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span> === <span class="hljs-number">0</span> )&#123; <br>                <span class="hljs-keyword">return</span> fn.<span class="hljs-title function_">apply</span>( <span class="hljs-variable language_">this</span>, args ); <br>            &#125;<span class="hljs-keyword">else</span>&#123; <br>                [].<span class="hljs-property">push</span>.<span class="hljs-title function_">apply</span>( args, <span class="hljs-variable language_">arguments</span> ); <br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">callee</span>; <br>            &#125; <br>        &#125; <br>    &#125;; <br>    <span class="hljs-keyword">var</span> cost = (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-keyword">var</span> money = <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>        <span class="hljs-keyword">for</span> ( <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>, l = <span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>; i &lt; l; i++ )&#123; <br>            money += <span class="hljs-variable language_">arguments</span>[ i ]; <br>        &#125; <br>        <span class="hljs-keyword">return</span> money; <br>    &#125; <br>&#125;)(); <br><span class="hljs-keyword">var</span> cost = <span class="hljs-title function_">currying</span>( cost ); <span class="hljs-comment">// 转化成 currying 函数</span><br><span class="hljs-title function_">cost</span>( <span class="hljs-number">100</span> ); <span class="hljs-comment">// 未真正求值</span><br><span class="hljs-title function_">cost</span>( <span class="hljs-number">200</span> ); <span class="hljs-comment">// 未真正求值 </span><br><span class="hljs-title function_">cost</span>( <span class="hljs-number">300</span> ); <span class="hljs-comment">// 未真正求值</span><br>alert ( <span class="hljs-title function_">cost</span>() ); <span class="hljs-comment">// 求值并输出：600</span><br></code></pre></td></tr></table></figure><ol start="2"><li>uncurrying</li></ol><p>简单来说，uncurrying函数是实现从别的对象中赋值方法，比如我们常常让类数组对象去借用Array.prototype上的方法，这是call和apply最常见的应用场景之一。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span>.<span class="hljs-title function_">call</span>( <span class="hljs-variable language_">arguments</span>, <span class="hljs-number">4</span> ); <span class="hljs-comment">// arguments 借用 Array.prototype.push 方法</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">arguments</span> ); <span class="hljs-comment">// 输出：[1, 2, 3, 4] </span><br>&#125;)( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> );<br></code></pre></td></tr></table></figure><p>uncurrying用来解决将泛化this的过程提取出来的问题。下面是uncurrying的实现方式之一。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">uncurrying</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">arguments</span>);<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">apply</span>(obj , <span class="hljs-variable language_">arguments</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先来看看它的作用是什么，在类数组对象arguments借用Array.prototype的方法之前，先把Array.prototype.push.call转换为一个通用的push函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> push = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span>.<span class="hljs-title function_">uncurrying</span>(); <br>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123; <br>    <span class="hljs-title function_">push</span>( <span class="hljs-variable language_">arguments</span>, <span class="hljs-number">4</span> ); <br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">arguments</span> ); <span class="hljs-comment">// 输出：[1, 2, 3, 4] </span><br>&#125;)( <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> );<br></code></pre></td></tr></table></figure><p>通过uncurrying，将Array.prototype.push.call变成了一个通用函数，这样push的作用与Array.prototype.push相同，不仅仅局限于智能操作数组，而使用者对方法也更简洁和意图明了。现在通过push来看看调用uncurrying时发生了什么。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Function</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">uncurrying</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123; <br>    <span class="hljs-keyword">var</span> self = <span class="hljs-variable language_">this</span>; <span class="hljs-comment">// self 此时是 Array.prototype.push </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <br>        <span class="hljs-keyword">var</span> obj = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">shift</span>.<span class="hljs-title function_">call</span>( <span class="hljs-variable language_">arguments</span> ); <br>        <span class="hljs-comment">// obj 是&#123; </span><br>        <span class="hljs-comment">// &quot;length&quot;: 1, </span><br>        <span class="hljs-comment">// &quot;0&quot;: 1 </span><br>        <span class="hljs-comment">// &#125; </span><br>        <span class="hljs-comment">// arguments 对象的第一个元素被截去，剩下[2] </span><br>        <span class="hljs-keyword">return</span> self.<span class="hljs-title function_">apply</span>( obj, <span class="hljs-variable language_">arguments</span> ); <br>        <span class="hljs-comment">// 相当于 Array.prototype.push.apply( obj, 2 ) </span><br>    &#125;; <br>&#125;; <br><span class="hljs-keyword">var</span> push = <span class="hljs-title class_">Array</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">push</span>.<span class="hljs-title function_">uncurrying</span>(); <br><span class="hljs-keyword">var</span> obj = &#123; <br>    <span class="hljs-string">&quot;length&quot;</span>: <span class="hljs-number">1</span>, <br>    <span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-number">1</span> <br>&#125;; <br><span class="hljs-title function_">push</span>( obj, <span class="hljs-number">2</span> ); <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( obj ); <span class="hljs-comment">// 输出：&#123;0: 1, 1: 2, length: 2&#125;</span><br></code></pre></td></tr></table></figure><ol start="3"><li>函数节流（不展开说了，八股文系列）</li></ol>]]></content>
    
    
    <categories>
      
      <category>读书笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>读书笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【三维GIS可视化】基于Vue+Cesium+Supermap实现智慧城市（二）</title>
    <link href="/2021/06/21/Cesium%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84/"/>
    <url>/2021/06/21/Cesium%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84/</url>
    
    <content type="html"><![CDATA[<h3 id="Web-Worker"><a href="#Web-Worker" class="headerlink" title="Web Worker"></a>Web Worker</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>众所周知，JavaScript是单线程模型，所有的任务只能在同一条线程上进行完成，前边的任务未完成则后续任务只能等待，所以在H中引入了Web Worker，为JavaScript创建一个多线程的环境，将部分任务提供给它在后台运行，前台后台同时运行。</p><p>Web Worker是后台运行的JavaScript，它独立于其他脚本且不会影响页面的性能。引入Web Worker的好处是一些计算密集型或高延迟的任务，被 Web Worker 线程所处理，主线程就会很流畅，不会被阻塞或拖慢，而此时 Web Worker 在后台运行。但是这也正是 Web Worker 比较耗费资源的原因。</p><h4 id="浏览器支持及使用"><a href="#浏览器支持及使用" class="headerlink" title="浏览器支持及使用"></a>浏览器支持及使用</h4><p>除了IE外所有主流浏览器均支持Web Worker。</p><p>可在创建Worker之前检测是否支持</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span>(<span class="hljs-title function_">typeof</span>(<span class="hljs-title class_">Worker</span>)!==<span class="hljs-string">&quot;undefined&quot;</span>) &#123;<br>    <span class="hljs-comment">// 支持.....</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">// 不支持..</span><br>&#125;<br></code></pre></td></tr></table></figure><p>Web Worker在一个独立的线程中运行，所以代码需要放在一个单独的文件中。加载时如果存在指定文件，浏览器会在文件下载完毕后执行，生成新的Worker线程，如果加载文件失败不会有任何提示。</p><p>创建Worker后利用<code>postMessage()</code>启动</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> worker = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Worker</span>(<span class="hljs-string">&#x27;worker.js&#x27;</span>);<br><span class="hljs-keyword">var</span> info = <span class="hljs-string">&#x27;start worker!&#x27;</span><br>worker.<span class="hljs-title function_">postMessage</span>(info);<br></code></pre></td></tr></table></figure><p>在Worker中使用<code>onmessge</code>事件接收主线程的消息来实现一些操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">onmessage = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> data = e.<span class="hljs-property">data</span><br>&#125;<br></code></pre></td></tr></table></figure><p>同样的，从Worker发消息到主线程也采用同样方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// Receive the message from the main thread</span><br>onmessage = <span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>) &#123;<br>    <span class="hljs-keyword">var</span> info = e.<span class="hljs-property">data</span>;<br>    <span class="hljs-keyword">var</span> result = info + <span class="hljs-string">&#x27; get&#x27;</span>;<br>    <span class="hljs-title function_">postMessage</span>(result);<br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>可以使用<code>addEventListener</code>来替换<code>onmessage</code></p></blockquote><p>停止Worker有两种方法，在主线程中调用<code>worker.terminate()</code>或在内部调用<code>self.close()</code>均可。在任务结束后一定要停止，因为Worker会一直在后台运行耗费资源，不应该过度使用。</p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ul><li>主线程与Worker之间传递的消息不是共享的，因为系统将消息对象传递给Worker后会将其序列化，在另一端再取消序列化。大部分浏览器通过JSON的编码解码实现。</li><li>Worker的self和this都是Worker的全局作用域。</li><li>Worker无法处理DOM，无法使用window对象、document对象等。</li><li>Worker可以生成子Worker,但需要注意：子Worker必须和父线程处在相同origin中，其中的URI应相对于父Worker位置解析。</li></ul><h3 id="Cesium的异步＋多线程"><a href="#Cesium的异步＋多线程" class="headerlink" title="Cesium的异步＋多线程"></a>Cesium的异步＋多线程</h3><p>Cesium中涉及到大量三维球计算和大数据量交互，比如三角网，参数化Geometry等，都是在Worker中实现的，参数的传递以及不同类型对应的不同算法。</p><p>Cesium源码中<code>Source\Core\TaskProcessor.js</code>内为Cesium封装的Worker。我们简单来看一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">TaskProcessor</span>(<span class="hljs-params">workerPath, maximumActiveTasks</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_workerPath</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uri</span>(workerPath).<span class="hljs-title function_">isAbsolute</span>()<br>        ? workerPath<br>    : <span class="hljs-title class_">TaskProcessor</span>.<span class="hljs-property">_workerModulePrefix</span> + workerPath;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_maximumActiveTasks</span> = <span class="hljs-title function_">defaultValue</span>(<br>        maximumActiveTasks,<br>        <span class="hljs-title class_">Number</span>.<span class="hljs-property">POSITIVE_INFINITY</span><br>    );<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_activeTasks</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_deferreds</span> = &#123;&#125;;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_nextID</span> = <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-title class_">TaskProcessor</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">scheduleTask</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span><br><span class="hljs-params">parameters,</span><br><span class="hljs-params"> transferableObjects</span><br><span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">defined</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_worker</span>)) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_worker</span> = <span class="hljs-title function_">createWorker</span>(<span class="hljs-variable language_">this</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// ……</span><br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">when</span>(<span class="hljs-title function_">canTransferArrayBuffer</span>(), <span class="hljs-keyword">function</span> (<span class="hljs-params">canTransferArrayBuffer</span>) &#123;<br>        <span class="hljs-comment">// ……</span><br><br>        <span class="hljs-keyword">return</span> deferred.<span class="hljs-property">promise</span>;<br>    &#125;);<br>&#125;;<br></code></pre></td></tr></table></figure><p>我们使用时只需要创建一个TaskProcessor，指定类型，然后调用scheduleTask，接收对应具体参数，然后返回一个Promise对象，我们可以异步的获取的对应结果。</p><p>使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> taskProcessor = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TaskProcessor</span>(<span class="hljs-string">&#x27;myWorkerPath&#x27;</span>);<br><span class="hljs-keyword">var</span> promise = taskProcessor.<span class="hljs-title function_">scheduleTask</span>(&#123;<br>    someParameter : <span class="hljs-literal">true</span>,<br>    another : <span class="hljs-string">&#x27;hello&#x27;</span><br>&#125;);<br><span class="hljs-keyword">if</span> (!<span class="hljs-title class_">Cesium</span>.<span class="hljs-title function_">defined</span>(promise)) &#123;<br>    <span class="hljs-comment">// too many active tasks - try again later</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-title function_">when</span>(promise, <span class="hljs-keyword">function</span>(<span class="hljs-params">result</span>) &#123;<br>        <span class="hljs-comment">// use the result of the task</span><br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cesium | Primitive图元介绍及与Entity对比</title>
    <link href="/2021/06/17/Cesium%E4%B8%ADPrimitive%E5%9B%BE%E5%85%83%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%B8%8EEntity%E5%AF%B9%E6%AF%94/"/>
    <url>/2021/06/17/Cesium%E4%B8%ADPrimitive%E5%9B%BE%E5%85%83%E4%BB%8B%E7%BB%8D%E5%8F%8A%E4%B8%8EEntity%E5%AF%B9%E6%AF%94/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的文章中，我们大部分使用的添加实体的方式都是entity添加，而在性能优化中我们提到了primitive添加的方式，entity在本文就不多做介绍了，本文主要介绍一下primitive相关知识。</p><h2 id="什么是Primitive"><a href="#什么是Primitive" class="headerlink" title="什么是Primitive"></a>什么是Primitive</h2><p>首先我们在Cesium API文档中搜索primitive，看文档中对Primitive类的介绍，翻译过来大致如下：</p><blockquote><p>图元代表场景中的几何体。 几何可以来自单个 GeometryInstance，也可以来自实例数组，即使geometry 来自不同的几何类型。图元将geometry 实例与描述完整着色的 Appearance 相结合，包括 Material 和 RenderState。 粗略地说，geometry 实例定义了结构和位置，appearance 定义了视觉特征。 解耦geometry 和appearance 允许我们混合和匹配它们中的大部分，并相互独立地添加新的geometry 或appearance 。</p><p>将多个实例组合成一个原语称为批处理，可显着提高静态数据的性能。 实例可以单独挑选； Scene#pick 返回它们的 GeometryInstance#id。 使用 PerInstanceColorAppearance 等每个实例的外观，每个实例也可以具有唯一的颜色。</p><p><code>Geometry</code>可以在 web worker 或主线程上创建和批处理。</p></blockquote><p>通过阅读我们可以知道，primitive主要由两部分组成：Geometry和Appearance。</p><p>Geometry主要定义了primitive的几何结构，而Appearance主要负责定义primitive的着色，包括GLSL顶点着色器、片段着色器和渲染状态。</p><p>我们可以通过Primitive API来操控几何图形及其外观，绘制各种形状。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">GeometryInstance</span>(&#123;<br>  geometry : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">EllipseGeometry</span>(&#123;<br>      center : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(-<span class="hljs-number">100.0</span>, <span class="hljs-number">20.0</span>),<br>      semiMinorAxis : <span class="hljs-number">500000.0</span>,<br>      semiMajorAxis : <span class="hljs-number">1000000.0</span>,<br>      rotation : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-property">PI_OVER_FOUR</span>,<br>      vertexFormat : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">VertexFormat</span>.<span class="hljs-property">POSITION_AND_ST</span><br>  &#125;),<br>  id : <span class="hljs-string">&#x27;object returned when this instance is picked and to get/set per-instance attributes&#x27;</span><br>&#125;);<br>scene.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Primitive</span>(&#123;<br>  geometryInstances : instance,<br>  appearance : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">EllipsoidSurfaceAppearance</span>(&#123;<br>    material : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Material</span>.<span class="hljs-title function_">fromType</span>(<span class="hljs-string">&#x27;Checkerboard&#x27;</span>)<br>  &#125;)<br>&#125;));<br></code></pre></td></tr></table></figure><h3 id="Geometry"><a href="#Geometry" class="headerlink" title="Geometry"></a>Geometry</h3><p>在Cesium中，支持以下几种Geometry几何图形</p><table><thead><tr><th>几何图形</th><th>说明</th></tr></thead><tbody><tr><td>BoxGeometry</td><td>立方体</td></tr><tr><td>BoxOutlineGeometry</td><td>仅有轮廓的立方体，只有外部线条的的盒子</td></tr><tr><td>CircleGeometry</td><td>圆形或者拉伸的圆形，圆圈或挤压圆</td></tr><tr><td>CircleOutlineGeometry</td><td>只有轮廓的圆形</td></tr><tr><td>CorridorGeometry</td><td>走廊：沿着地表的多段线(垂直于表面的折线)，且具有一定的宽度，可以拉伸到一定的高度</td></tr><tr><td>CorridorOutlineGeometry</td><td>只有轮廓的走廊</td></tr><tr><td>CylinderGeometry</td><td>圆柱、圆锥或者截断的圆锥</td></tr><tr><td>CylinderOutlineGeometry</td><td>只有轮廓的圆柱、圆锥或者截断的圆锥</td></tr><tr><td>EllipseGeometry</td><td>椭圆或者拉伸的椭圆</td></tr><tr><td>EllipseOutlineGeometry</td><td>只有轮廓的椭圆或者拉伸的椭圆</td></tr><tr><td>EllipsoidGeometry</td><td>椭球体</td></tr><tr><td>EllipsoidOutlineGeometry</td><td>只有轮廓的椭球体</td></tr><tr><td>RectangleGeometry</td><td>矩形或者拉伸的矩形</td></tr><tr><td>RectangleOutlineGeometry</td><td>只有轮廓的矩形或者拉伸的矩形</td></tr><tr><td>PolygonGeometry</td><td>多边形，可以具有空洞或者拉伸一定的高度</td></tr><tr><td>PolygonOutlineGeometry</td><td>只有轮廓的多边形</td></tr><tr><td>PolylineGeometry</td><td>多段线，可以具有一定的宽度</td></tr><tr><td>SimplePolylineGeometry</td><td>简单的多段线</td></tr><tr><td>PolylineVolumeGeometry</td><td>多段线柱体</td></tr><tr><td>PolylineVolumeOutlineGeometry</td><td>只有轮廓的多段线柱体</td></tr><tr><td>SphereGeometry</td><td>球体</td></tr><tr><td>SphereOutlineGeometry</td><td>只有轮廓的球体</td></tr><tr><td>WallGeometry</td><td>墙</td></tr><tr><td>WallOutlineGeometry</td><td>只有轮廓的墙</td></tr></tbody></table><h4 id="Geometry-Instances-几何图形实例"><a href="#Geometry-Instances-几何图形实例" class="headerlink" title="Geometry Instances - 几何图形实例"></a>Geometry Instances - 几何图形实例</h4><p>在前边的示例代码中，我们已经用到了它，它相当于Geometry的容器，而多个Instance可以公用一个Geomotry并利用<code>GeometryInstance.modelMatrix</code>提供多种属性信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> geometry = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">BoxGeometry</span>.<span class="hljs-title function_">fromDimensions</span>(&#123;<br>  vertexFormat : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">VertexFormat</span>.<span class="hljs-property">POSITION_AND_NORMAL</span>,<br>  dimensions : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">1000000.0</span>, <span class="hljs-number">1000000.0</span>, <span class="hljs-number">500000.0</span>)<br>&#125;);<br><span class="hljs-keyword">var</span> instanceBottom = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">GeometryInstance</span>(&#123;<br>  geometry : geometry,<br>  modelMatrix : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">multiplyByTranslation</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Transforms</span>.<span class="hljs-title function_">eastNorthUpToFixedFrame</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(-<span class="hljs-number">75.59777</span>, <span class="hljs-number">40.03883</span>)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">1000000.0</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Matrix4</span>()),<br>  attributes : &#123;<br>    color : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ColorGeometryInstanceAttribute</span>.<span class="hljs-title function_">fromColor</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">AQUA</span>)<br>  &#125;,<br>  id : <span class="hljs-string">&#x27;bottom&#x27;</span><br>&#125;);<br><span class="hljs-keyword">var</span> instanceTop = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">GeometryInstance</span>(&#123;<br>  geometry : geometry,<br>  modelMatrix : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Matrix4</span>.<span class="hljs-title function_">multiplyByTranslation</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Transforms</span>.<span class="hljs-title function_">eastNorthUpToFixedFrame</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(-<span class="hljs-number">75.59777</span>, <span class="hljs-number">40.03883</span>)), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">3000000.0</span>), <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Matrix4</span>()),<br>  attributes : &#123;<br>    color : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ColorGeometryInstanceAttribute</span>.<span class="hljs-title function_">fromColor</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">AQUA</span>)<br>  &#125;,<br>  id : <span class="hljs-string">&#x27;top&#x27;</span><br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="Combing-Geometries-合并几何图形"><a href="#Combing-Geometries-合并几何图形" class="headerlink" title="Combing Geometries - 合并几何图形"></a>Combing Geometries - 合并几何图形</h4><p>我们可以合并多个Instance为一个Primitive，提高我们的性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> instances = [<span class="hljs-title class_">Instance1</span>, <span class="hljs-title class_">Instance2</span>, <span class="hljs-title class_">Instance3</span>, ……];<br>scene.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Primitive</span>( &#123;<br>    geometryInstances : instances, <span class="hljs-comment">//合并</span><br>    <span class="hljs-comment">//某些外观允许每个几何图形实例分别指定某个属性，例如：</span><br>    appearance : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PerInstanceColorAppearance</span>(&#123;translucent : <span class="hljs-literal">false</span>,closed : <span class="hljs-literal">true</span>&#125;)<br>&#125; ) );<br></code></pre></td></tr></table></figure><h4 id="更新单个Instance属性"><a href="#更新单个Instance属性" class="headerlink" title="更新单个Instance属性"></a>更新单个Instance属性</h4><p>在添加到Primitive后，我们仍然可以通过Id获取指定Instance并修改其属性。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> circleInstance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">GeometryInstance</span>( &#123;<br>    geometry : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">CircleGeometry</span>( &#123;<br>        center : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>( -<span class="hljs-number">95.0</span>, <span class="hljs-number">43.0</span> ),<br>        radius : <span class="hljs-number">250000.0</span>,<br>        vertexFormat : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">PerInstanceColorAppearance</span>.<span class="hljs-property">VERTEX_FORMAT</span><br>    &#125; ),<br>    attributes : &#123;<br>        color : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ColorGeometryInstanceAttribute</span>.<span class="hljs-title function_">fromColor</span>( <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Color</span>( <span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.5</span> ) ),<br>        show : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ShowGeometryInstanceAttribute</span>( <span class="hljs-literal">true</span> ) <span class="hljs-comment">//显示或者隐藏</span><br>    &#125;,<br>    id : <span class="hljs-string">&#x27;circle&#x27;</span><br>&#125; );<br><span class="hljs-keyword">var</span> primitive = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Primitive</span>( &#123;<br>    geometryInstances : circleInstance,<br>    appearance : <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PerInstanceColorAppearance</span>( &#123;<br>        translucent : <span class="hljs-literal">false</span>,<br>        closed : <span class="hljs-literal">true</span><br>    &#125; )<br>&#125; );<br>scene.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>( primitive );<br><br><span class="hljs-keyword">var</span> attributes = primitive.<span class="hljs-title function_">getGeometryInstanceAttributes</span>( <span class="hljs-string">&#x27;circle&#x27;</span> );<span class="hljs-comment">//获取某个实例的属性集</span><br>attributes.<span class="hljs-property">color</span> = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ColorGeometryInstanceAttribute</span>.<span class="hljs-title function_">toValue</span>( <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-title function_">fromRandom</span>( &#123;<br>    alpha : <span class="hljs-number">1.0</span><br>&#125; ) );<br></code></pre></td></tr></table></figure><h3 id="Appearance"><a href="#Appearance" class="headerlink" title="Appearance"></a>Appearance</h3><p>Cesium支持以下列出的Appearance</p><table><thead><tr><th>外观</th><th>描述</th></tr></thead><tbody><tr><td>MaterialAppearance</td><td>支持各种Geometry类型的外观，支持使用材质来定义着色。支持材料描述阴影。</td></tr><tr><td>EllipsoidSurfaceAppearance</td><td>MaterialAppearance的一个版本。假设几何图形与地表是平行的，并且依此来进行顶点属性（vertex attributes）的计算。和Material Appearance一样，就像一个多边形，并且使用这个假设来通过程序上计算许多顶点属性来节省内存。</td></tr><tr><td>PerInstanceColorAppearance</td><td>让每个实例使用自定义的颜色来着色，使用每个实例的颜色来遮蔽每个实例。</td></tr><tr><td>PolylineMaterialAppearance</td><td>支持使用材质来着色多段线。支持材料遮蔽Polyline。</td></tr><tr><td>PolylineColorAppearance</td><td>使用每顶点或者每片段（per-vertex or per-segment ）的颜色来着色多段线—使用每顶点或每段着色来遮蔽折线</td></tr></tbody></table><p>Appearance定义了需要在GPU上执行的GLSL着色器，这部分一般只有在自定义外观时需要修改。</p><p><code>render state</code>用来在绘制Primitive的时候控制GPU状态，一旦外观被创建，<code>render state</code>就不能再改变了，但是我们可以修改其材质。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//下面的外观可用于定义一个Viewer不可进入的不透明盒子</span><br><span class="hljs-keyword">var</span> appearance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PerInstanceColorAppearance</span>( &#123;<br>    translucent : <span class="hljs-literal">false</span>,<br>    closed : <span class="hljs-literal">true</span><br>&#125; );<br><span class="hljs-comment">//下面的代码效果同上</span><br><span class="hljs-keyword">var</span> translucent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PerInstanceColorAppearance</span>( &#123;<br>    renderState : &#123;<br>        depthTest : &#123;<br>            enabled : <span class="hljs-literal">true</span><br>        &#125;,<br>        cull : &#123;<br>            enabled : <span class="hljs-literal">true</span>,<br>            face : <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">CullFace</span>.<span class="hljs-property">BACK</span><br>        &#125;<br>    &#125;<br>&#125; );<br></code></pre></td></tr></table></figure><h2 id="Primitive与Entity对比"><a href="#Primitive与Entity对比" class="headerlink" title="Primitive与Entity对比"></a>Primitive与Entity对比</h2><p>看过上边对Primitive相关接口的用法，我们会有这样的疑惑：entity调用方便，封装完美，为什么还要使用Primitive？区别就是记载的效率问题。Primitve更接近webGL的底层，没有entity一样的附加属性，加载时效率会更高。在前文<a href="https://juejin.cn/post/6972420331982028837">性能优化</a>中已经体现出Primitive的优势了，所以在加载几何体时二者都有优有劣，需要根据具体情况进行选择。</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cesium | 海量点的加载与性能优化</title>
    <link href="/2021/06/11/Cesium%E6%B5%B7%E9%87%8F%E7%82%B9%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <url>/2021/06/11/Cesium%E6%B5%B7%E9%87%8F%E7%82%B9%E7%9A%84%E5%8A%A0%E8%BD%BD%E4%B8%8E%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在Cesium中我们可能会遇到加载海量数据的情况，但当我们进行实现的时候会发现页面渲染会因为数据量过大而变得迟缓，十分影响用户体验。接下来我将先通过大数量的点进行性能检测，然后对其进行优化。</p><blockquote><p>本文利用Turf进行海量随机点的生成</p></blockquote><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>首先我们通过Turf生成万量级的点位信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> points = turf.<span class="hljs-title function_">randomPoint</span>(<span class="hljs-number">10000</span>, &#123; <span class="hljs-attr">bbox</span>: [<span class="hljs-number">40</span>, <span class="hljs-number">20</span>, <span class="hljs-number">255</span>, <span class="hljs-number">60</span>] &#125;);<br><span class="hljs-keyword">let</span> features = points.<span class="hljs-property">features</span>;<br><span class="hljs-keyword">let</span> feature, geom, coordinates, position;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; features.<span class="hljs-property">length</span>; i++) &#123;<br>    feature = features[i];<br>    geom = feature.<span class="hljs-property">geometry</span>;<br>    coordinates = geom.<span class="hljs-property">coordinates</span>;<br>    position = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(<br>        coordinates[<span class="hljs-number">0</span>],<br>        coordinates[<span class="hljs-number">1</span>],<br>        <span class="hljs-number">0</span><br>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addEntities</span>(position);<br></code></pre></td></tr></table></figure><p><code>addEntities</code>方法中进行我们的<code>billboard</code>添加</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js">viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>    <span class="hljs-attr">position</span>: position,<br>    <span class="hljs-attr">billboard</span>: &#123;<br>        <span class="hljs-attr">image</span>: <span class="hljs-string">&quot;./static/blueCamera.png&quot;</span>,<br>        <span class="hljs-attr">verticalOrigin</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">VerticalOrigin</span>.<span class="hljs-property">BOTTOM</span>,<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后我们打开我们的项目……天啊真是肉眼可见的卡住了，接下来我们用performance来分析一下。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b71dc400ca24286b82189d24c873d01~tplv-k3u1fbpfcp-watermark.image" alt="image-20210607164830355.png"></p><p>我们点击左上角的刷新按钮，reload一下页面，等待分析报告的生成。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aea2c3b87ecf4f48a2e2a7769bbd6ab1~tplv-k3u1fbpfcp-watermark.image" alt="image-20210609141301351.png"></p><p>可以看到我们万级别的<code>billboard</code>在以<code>entity</code>为载体的情况下添加花费了近30s的时间非常之长。</p><p>我们上述是通过加载本地图片资源，然后给Cesium生成对应的billboard去利用<code>entity</code>进行渲染，慢会不会是因为通过<code>entity</code>生成的原因？，如果我们用<code>primitive</code>呢，这里简单讲一下<code>primitve</code>和<code>entity</code>的区别，详细的描述后续会单独写一篇文章作述。</p><h3 id="primitive和entity"><a href="#primitive和entity" class="headerlink" title="primitive和entity"></a><code>primitive</code>和<code>entity</code></h3><ul><li><code>primitive</code>更多的是面向图形开发人员的底层API，暴露最小限度的抽象，更多使用图形学术语，具有更大的灵活性。</li><li><code>entity</code>是更高级别的数据驱动API，它使用一致性设计的、高级别对象来管理一组相关性的可视化对象，其底层也是使用的<code>primitive</code>。</li></ul><p><code>primitive</code>利用<code>Geometry</code>和<code>Appearance</code>构建，其具有以下优势：</p><ol><li>性能：绘制大量Primitive时，可以将其合并为单个<code>Geometry</code>，减轻CPU负担，更好使用GPU。</li><li>灵活：<code>Geometry</code>和<code>Appearance</code>解耦，两者可独立修改。</li></ol><p>同样的，使用<code>primitive</code>就意味着需要编写更多代码，以及对图形学深入的了解。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>Cesium内部为我们提供了几个可渲染的集合像<code>PointPrimitiveCollection</code>、<code>BillboardCollection</code>等等，这里我们就可以用到<code>BillboardCollection</code>，官方API是这样讲关于它的性能的（自己根据理解翻译的可能有错，所以这里把原文也放上吧）：</p><blockquote><h5 id="Performance"><a href="#Performance" class="headerlink" title="Performance:"></a>Performance:</h5><p>For best performance, prefer a few collections, each with many billboards, to many collections with only a few billboards each. Organize collections so that billboards with the same update frequency are in the same collection, i.e., billboards that do not change should be in one collection; billboards that change every frame should be in another collection; and so on.</p></blockquote><p>为了获得最佳性能，最好使用更少的内部拥有更多billboard的集合，而不是每个集合里只有零星的billboard，而对于集合的组织上，让拥有同样更新频率（即不会变化）的billboard存在于一个集合中，而把每一帧都变化的billboard放到另一个集合当中。</p><p>接下来我们使用<code>BillboardCollection</code>生成10000个点并利用控制台分析一下性能。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">billboards</span> = viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">primitives</span>.<span class="hljs-title function_">add</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">BillboardCollection</span>()<br>);<br><span class="hljs-comment">// ...</span><br><br><span class="hljs-title function_">addPrimitive</span>(<span class="hljs-params">position</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">billboards</span>.<span class="hljs-title function_">add</span>(&#123;<br>        <span class="hljs-attr">position</span>: position,<br>        <span class="hljs-attr">image</span>:  <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./images/blueCamera.png&quot;</span>),<br>        <span class="hljs-attr">verticalOrigin</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">VerticalOrigin</span>.<span class="hljs-property">BOTTOM</span>,<br>    &#125;);<br>&#125;,<br><br></code></pre></td></tr></table></figure><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b7df04ec763f46f09d1c4f248edb32b0~tplv-k3u1fbpfcp-watermark.image" alt="image-20210609162506922.png"></p><p>可以看到生成速度提高了许多。</p><p>既然这样那我们再测试一下十万量级的点的加载速度：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/869207da3f7c4edc98ee0130da25eff1~tplv-k3u1fbpfcp-watermark.image" alt="image-20210609162137395.png"><br>两者竟然不分上下，可见<code>primitive</code>有多么强大。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>后续其实我们可以进行更深层的优化，比如图片我们现在是从本地获取的，能不能将它存到数据库或者浏览器中快速取出节省时间等等。像我们如果做地级市的系统，那房屋、道路这些要素都是至少万以上量级，这些又该怎么优化，如何保证用户体验等等。<a href="https://echarts.apache.org/examples/zh/editor.html?c=scatterGL-gps&gl=1">Echart</a>都可以实现千万级别量级的点展示，说明性能优化这里的水很深啊哈哈。</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cesium | 利用Property机制实现轨迹回放</title>
    <link href="/2021/06/10/Cesium%E5%88%A9%E7%94%A8Property%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%BD%A8%E8%BF%B9%E5%9B%9E%E6%94%BE/"/>
    <url>/2021/06/10/Cesium%E5%88%A9%E7%94%A8Property%E6%9C%BA%E5%88%B6%E5%AE%9E%E7%8E%B0%E8%BD%A8%E8%BF%B9%E5%9B%9E%E6%94%BE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在前面的<a href="https://juejin.cn/post/6970884378759004174">文章</a>中介绍过Cesium的Property机制，了解了它的作用以及它的用法，这篇文章我们通过一个实际场景来深入学习和复习一下Property机制。</p><p>在智慧城市系统中，必不可少的就是轨迹回放或者让模型沿着指定路径行走，而Cesium提供的Property机制能够在很好的实现这样的场景的同时保证性能。下面简单来讲一下Property，更多的知识可以阅读<a href="https://juejin.cn/post/6970884378759004174">Cesium的Property机制究竟有多香</a></p><h2 id="property"><a href="#property" class="headerlink" title="property"></a>property</h2><p>简单来说，Property就是Cesium提供的一种机制，可以让指定的属性随时间自动变化并赋值，操作便捷的同时能够节省性能。在Cesium中Property可以与时间轴进行关联，并根据时间返回对应的属性，我们再通过返回的值去改变我i们想要修改的状态值。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>一样的，首先我们整理思路，想要实现轨迹回放，我们需要一组轨迹坐标串、一个定义好时间点状态的Property，以及一个用来在轨迹上行走的model（本文用billboard代替）。</p><p>我们拿到了轨迹坐标串后，需要通过计算获得几个关键节点的距离、时间，生成完整的property作为我们实体的position属性。</p><p>基本思路如上，接下来我们开始动手实现。思路只提供大致方向，在实现中可能会对某些方面进行部分修改。一般场景下我们得到的都是经纬度坐标，而操作时需要使用笛卡尔坐标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> lnglatArr = [<br>    [<span class="hljs-number">121.527589</span>, <span class="hljs-number">38.957547</span>],<br>    [<span class="hljs-number">121.527825</span>, <span class="hljs-number">38.960166</span>],<br>    [<span class="hljs-number">121.536472</span>, <span class="hljs-number">38.959098</span>],<br>    [<span class="hljs-number">121.540442</span>, <span class="hljs-number">38.958464</span>],<br>    [<span class="hljs-number">121.543489</span>, <span class="hljs-number">38.958131</span>],<br>    [<span class="hljs-number">121.542888</span>, <span class="hljs-number">38.955861</span>],<br>    [<span class="hljs-number">121.542266</span>, <span class="hljs-number">38.953325</span>],<br>]<br><br><span class="hljs-keyword">let</span> positions = lnglatArr.<span class="hljs-title function_">map</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(item[<span class="hljs-number">0</span>] , item[<span class="hljs-number">1</span>] , <span class="hljs-number">0.5</span>);<br>&#125;)<br></code></pre></td></tr></table></figure><p>接下来我们需要获取回放中每段的时间以及总时间，这里我们需要通过速度和坐标点之间的距离算出所需时间（这是小学知识吧，t = l/s）。</p><p>我们需要记录每个点位的时间，用来为property添加节点，这里我们将它写成一个方法方便调用。入参就是我们的坐标串与速度。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 计算每个点位时间和总时间</span><br><span class="hljs-title function_">getSiteTimes</span>(<span class="hljs-params">positions, speed</span>) &#123;<br>    <span class="hljs-keyword">let</span> timeSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">let</span> times = [];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; positions.<span class="hljs-property">length</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i === <span class="hljs-number">0</span>) &#123;<br>            times.<span class="hljs-title function_">push</span>(<span class="hljs-number">0</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        timeSum += <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">spaceDistance</span>([positions[i - <span class="hljs-number">1</span>], positions[i]]) / speed;<br>        times.<span class="hljs-title function_">push</span>(timeSum);<br>    &#125;<br>    <span class="hljs-keyword">return</span> &#123;<br>        timeSum,<br>        <span class="hljs-attr">siteTimes</span>: times,<br>    &#125;;<br>&#125;,<br></code></pre></td></tr></table></figure><p>可以看到我们在循环内又定义了一个方法<code>spaceDisatance</code>，这个方法用来计算传入的两个点之间的距离。Cesium为我们提供了相关方法计算两点之间的距离。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 计算距离</span><br><span class="hljs-title function_">spaceDistance</span>(<span class="hljs-params">positions</span>) &#123;<br>    <span class="hljs-keyword">let</span> distance = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; positions.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> point1cartographic = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartographic</span>.<span class="hljs-title function_">fromCartesian</span>(<br>            positions[i]<br>        );<br>        <span class="hljs-keyword">let</span> point2cartographic = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartographic</span>.<span class="hljs-title function_">fromCartesian</span>(<br>            positions[i + <span class="hljs-number">1</span>]<br>        );<br>        <span class="hljs-comment">/**根据经纬度计算出距离**/</span><br>        <span class="hljs-keyword">let</span> geodesic = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">EllipsoidGeodesic</span>();<br>        geodesic.<span class="hljs-title function_">setEndPoints</span>(point1cartographic, point2cartographic);<br>        <span class="hljs-keyword">let</span> s = geodesic.<span class="hljs-property">surfaceDistance</span>;<br>        <span class="hljs-comment">//返回两点之间的距离 如果带高度的话</span><br>        s = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(<br>            <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(s, <span class="hljs-number">2</span>) +<br>            <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(point2cartographic.<span class="hljs-property">height</span> - point1cartographic.<span class="hljs-property">height</span>, <span class="hljs-number">2</span>)<br>        );<br>        distance = distance + s;<br>    &#125;<br>    <span class="hljs-keyword">return</span> distance.<span class="hljs-title function_">toFixed</span>(<span class="hljs-number">2</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><p>现在我们拿到了总时间和每两个点之间的时间，现在可以开始构建property和时间轴了。首先我们需要定义开始时间结束时间并给到<code>viewer</code>的<code>clock</code>实例上代表时间段，接着构筑Property实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> timeObj = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSiteTimes</span>(positions, speed);<br><span class="hljs-keyword">let</span> startTime = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><span class="hljs-keyword">let</span> stopTime = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>    startTime,<br>    timeObj.<span class="hljs-property">timeSum</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>);<br><br>viewer.<span class="hljs-property">clock</span>.<span class="hljs-property">startTime</span> = startTime.<span class="hljs-title function_">clone</span>();<br>viewer.<span class="hljs-property">clock</span>.<span class="hljs-property">stopTime</span> = stopTime.<span class="hljs-title function_">clone</span>();<br>viewer.<span class="hljs-property">clock</span>.<span class="hljs-property">currentTime</span> = startTime.<span class="hljs-title function_">clone</span>();<br><br><span class="hljs-comment">// 生成property</span><br><span class="hljs-keyword">var</span> property = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">SampledPositionProperty</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; positions.<span class="hljs-property">length</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> time = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>        startTime,<br>        timeObj.<span class="hljs-property">siteTimes</span>[i],<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>    );<br>    property.<span class="hljs-title function_">addSample</span>(time, positions[i]);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后一步，我们添加一个Entity实体，做轨迹回放的物体，这里可以使用任何实体。添加到场景中后需要利用<code>viewer.trackedEntity</code>动态追踪实体。我们的轨迹回放就大功告成了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">animateEntity</span> = viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>    <span class="hljs-comment">// 实体可用性，在指定时间内返回有效数据</span><br>    <span class="hljs-attr">availability</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeIntervalCollection</span>([<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeInterval</span>(&#123;<br>            <span class="hljs-attr">start</span>: startTime,<br>            <span class="hljs-attr">stop</span>: stopTime,<br>        &#125;),<br>    ]),<br>    <span class="hljs-comment">// 位置信息随时间变化property</span><br>    <span class="hljs-attr">position</span>: property,<br>    <span class="hljs-comment">// 实体方向</span><br>    <span class="hljs-attr">orientation</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">VelocityOrientationProperty</span>(property),<br>    <span class="hljs-attr">billboard</span>: &#123;<br>        <span class="hljs-attr">image</span>: <span class="hljs-string">&quot;./static/blueCamera.png&quot;</span>,<br>        <span class="hljs-attr">verticalOrigin</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">VerticalOrigin</span>.<span class="hljs-property">BOTTOM</span>,<br>    &#125;,<br>    <span class="hljs-comment">// 轨迹路径</span><br>    <span class="hljs-attr">path</span>: &#123;<br>        <span class="hljs-attr">resolution</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">width</span>: <span class="hljs-number">10</span>,<br>        <span class="hljs-attr">material</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">RED</span>,<br>    &#125;,<br>&#125;);<br><br>viewer.<span class="hljs-property">trackedEntity</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">animateEntity</span>;<br></code></pre></td></tr></table></figure><p>效果如下：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f95ccb3b7f66409aabca65f4ea854d82~tplv-k3u1fbpfcp-watermark.image" alt="animate1.gif"></p><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>这里简单提一下利用Class进行封装吧，没有什么大的难点，就是把实现步骤拆分，选定参数进行暴露。这里简单书写一下代码结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrackedAnimate</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">viewer, cb</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span> = viewer;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">cb</span> = cb;<br>    &#125;<br><br>    <span class="hljs-title function_">startRoam</span>(<span class="hljs-params">positions, speed</span>) &#123;<br>        <span class="hljs-keyword">let</span> newPositions = positions.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(item[<span class="hljs-number">0</span>], item[<span class="hljs-number">1</span>], <span class="hljs-number">0.5</span>);<br>        &#125;);<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addRoamLine</span>(newPositions, speed);<br>    &#125;<br><br>    <span class="hljs-comment">//添加漫游路线</span><br>    <span class="hljs-title function_">addRoamLine</span>(<span class="hljs-params">positions, speed</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">endRoam</span>();<br><br>        <span class="hljs-keyword">let</span> timeObj = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSiteTimes</span>(positions, speed);<br>        <span class="hljs-keyword">let</span> startTime = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()); <br>        <span class="hljs-keyword">let</span> stopTime = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            startTime,<br>            timeObj.<span class="hljs-property">timeSum</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        );<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">clock</span>.<span class="hljs-property">startTime</span> = startTime.<span class="hljs-title function_">clone</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">clock</span>.<span class="hljs-property">stopTime</span> = stopTime.<span class="hljs-title function_">clone</span>();<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">clock</span>.<span class="hljs-property">currentTime</span> = startTime.<span class="hljs-title function_">clone</span>();<br><br>        <span class="hljs-keyword">let</span> property = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getSampledPositionProperty</span>(<br>            positions,<br>            startTime,<br>            timeObj.<span class="hljs-property">siteTimes</span><br>        );<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addModel</span>(startTime, stopTime, property);<br><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">trackedEntity</span> = <span class="hljs-variable language_">this</span>.<span class="hljs-property">animateEntity</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">timoutId</span> = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">endRoam</span>();<br>        &#125;, timeObj.<span class="hljs-property">timeSum</span> * <span class="hljs-number">1000</span>);<br>    &#125;<br><br>    <span class="hljs-title function_">addModel</span>(<span class="hljs-params">startTime, stopTime, property</span>) &#123;<br>        <span class="hljs-comment">//……</span><br>    &#125;<br><br>    <span class="hljs-title function_">endRoam</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//……</span><br>    &#125;<br><br>    <span class="hljs-title function_">getSampledPositionProperty</span>(<span class="hljs-params">positions, startTime, siteTimes</span>) &#123;<br>        <span class="hljs-comment">//……</span><br>    &#125;<br><br>    <span class="hljs-comment">//计算每个点位时间与总时间</span><br>    <span class="hljs-title function_">getSiteTimes</span>(<span class="hljs-params">positions, speed</span>) &#123;<br>        <span class="hljs-comment">//……</span><br>    &#125;<br><br>    <span class="hljs-comment">//计算距离</span><br>    <span class="hljs-title function_">spaceDistance</span>(<span class="hljs-params">positions</span>) &#123;<br>        <span class="hljs-comment">//……</span><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">trackEntity</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrackedAnimate</span>(viewer , <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;moe_&#x27;</span>);<br>&#125;);<br><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">trackEntity</span>.<span class="hljs-title function_">startRoam</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">movePositions</span>, <span class="hljs-number">25</span>);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">trackEntity</span>.<span class="hljs-title function_">endRoam</span>();<br></code></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>上述我们简单实现了轨迹回放的场景，可以看到在封装中我们还设置了回调函数的参数，后续可以进行很多扩展比如多视角回放，特定位置做特定功能等等，都可以进行扩展。Property的使用场景有很多，这只是其中一部分，感兴趣的可以深入研究共同探讨。</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Electron实现启动Loading动画效果</title>
    <link href="/2021/06/09/Electron%E5%AE%9E%E7%8E%B0%E5%90%AF%E5%8A%A8Loading%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/"/>
    <url>/2021/06/09/Electron%E5%AE%9E%E7%8E%B0%E5%90%AF%E5%8A%A8Loading%E5%8A%A8%E7%94%BB%E6%95%88%E6%9E%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="Electron是什么"><a href="#Electron是什么" class="headerlink" title="Electron是什么"></a>Electron是什么</h2><blockquote><p>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序 ——官网</p></blockquote><blockquote><p>Electron是GitHub开发的一个开源框架。它允许使用Node.js（作为后端）和Chromium（作为前端）完成桌面GUI应用程序的开发。Electron现已被多个开源Web应用程序用于前端与后端的开发，著名项目包括GitHub的Atom和微软的Visual Studio Code。——知乎</p></blockquote><p>Electron负责搞定棘手的部分，而我们只需要利用我们的web技术构建应用程序即可。</p><h2 id="搭建Electron项目"><a href="#搭建Electron项目" class="headerlink" title="搭建Electron项目"></a>搭建Electron项目</h2><p>最方便的就是使用脚手架搭建，现在市面上比较成熟的脚手架例如<a href="https://www.electronforge.io/">electronforge</a>，electron-vue等等，或者自己搭建一个拥有自己文档结构的项目，这里提供一个快速启动的方式。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment"># 克隆示例项目的仓库</span><br>$ git <span class="hljs-keyword">clone</span> <span class="hljs-title">https</span>://github.com/electron/electron-quick-<span class="hljs-literal">start</span><br><br><span class="hljs-comment"># 进入这个仓库</span><br>$ cd electron-quick-<span class="hljs-literal">start</span><br><br><span class="hljs-comment"># 安装依赖并运行</span><br>$ npm install &amp;&amp; npm <span class="hljs-literal">start</span><br></code></pre></td></tr></table></figure><h2 id="为什么要添加启动动画"><a href="#为什么要添加启动动画" class="headerlink" title="为什么要添加启动动画"></a>为什么要添加启动动画</h2><p>当然是为了优化用户的使用体验（掩盖自己项目启动慢的事实）。项目业务不同则在启动时候的需求也不同，比如有的应用需要检测升级状态、登录状态或一些附加业务检测比如麦克风和摄像头，有些应用需要在在开始加载大量数据做支撑等等。我们当然想实现用户双击图标后立即进入应用，但代码的运行和数据加载等是需要时间的。既然这样，与其我们给用户展示代码运行的过程，何不给用户展示一张图片，这也是用户体验。让用户明白此时此刻是应用在加载，而不是认为应用卡死或者崩溃的猜测。</p><h2 id="思路及实现"><a href="#思路及实现" class="headerlink" title="思路及实现"></a>思路及实现</h2><p>说白了，启动窗口它也是一个窗口，我们想让它在项目尚未准备完毕时出现在用户的视界中告诉用户我正在启动，准备完毕后关闭。而我们也无需使用多么复杂的手段，主要方法是监听我们主窗口进程，准备就绪后关闭启动窗口即可。</p><p>首先我们需要创建一个loading的HTML页面，其中可以对我们的启动窗口进行绘制以及各种平滑的等待效果。接着在主进程中创建生成Loading窗口的方法，同时接收一个回调函数在Loading窗口生成时触发。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">showLoading</span> = (<span class="hljs-params">cb</span>) =&gt; &#123;<br>    loading = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>        <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">frame</span>: <span class="hljs-literal">false</span>, <span class="hljs-comment">// 无边框（窗口、工具栏等），只包含网页内容</span><br>        <span class="hljs-attr">width</span>: <span class="hljs-number">160</span>,<br>        <span class="hljs-attr">height</span>: <span class="hljs-number">180</span>,<br>        <span class="hljs-attr">resizable</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">transparent</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 窗口是否支持透明，如果想做高级效果最好为true</span><br>    &#125;);<br><br>    loading.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;show&quot;</span>, cb);<br>    loading.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&quot;loading.html&quot;</span>);<br>    loading.<span class="hljs-title function_">show</span>();<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后我们在项目启动时调用<code>showLoading</code>方法，并传入创建主窗口的方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title function_">createWindow</span> = (<span class="hljs-params"></span>) =&gt; &#123;<br>  <span class="hljs-variable language_">window</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>(&#123;<br>    <span class="hljs-attr">webPreferences</span>: &#123;<br>      <span class="hljs-attr">nativeWindowOpen</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&quot;主窗口&quot;</span>,<br>    &#125;,<br>    <span class="hljs-attr">width</span>: <span class="hljs-number">800</span>,<br>    <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>,<br>    <span class="hljs-attr">show</span>: <span class="hljs-literal">false</span>,<br>  &#125;);<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">loadFile</span>(<span class="hljs-string">&quot;index.html&quot;</span>);  <span class="hljs-comment">// 模拟启动准备时间</span><br>  &#125;, <span class="hljs-number">2000</span>);<br>  <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">once</span>(<span class="hljs-string">&quot;ready-to-show&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>    loading.<span class="hljs-title function_">hide</span>();<br>    loading.<span class="hljs-title function_">close</span>();<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">show</span>();<br>  &#125;);<br>&#125;;<br><br>app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&quot;ready&quot;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-title function_">showLoading</span>(createWindow);<br>&#125;);<br></code></pre></td></tr></table></figure><p>在我们的主窗口准备就绪的时候关闭我们的启动窗口并展示我们的主窗口。注意，如果直接关闭启动窗口可能会存在闪烁现象，所以我们先将窗口隐藏再进行关闭。</p><p>看效果:</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/507edb8d6e3d496e9f74ef6aa9193efb~tplv-k3u1fbpfcp-watermark.image" alt="electron1.gif"></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>通过这个例子我们可以了解关于<code>BrowerWindow</code>的实例事件，并能通过这些对应的事件实现我们想要的一些效果，比如用户鼠标聚焦、失焦应用的时候，显示、隐藏窗口的时候的操作等。</p>]]></content>
    
    
    <categories>
      
      <category>Electron</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Electron</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cesium的Property机制究竟有多香</title>
    <link href="/2021/06/07/Cesium%E7%9A%84Property%E6%9C%BA%E5%88%B6%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%A4%9A%E9%A6%99/"/>
    <url>/2021/06/07/Cesium%E7%9A%84Property%E6%9C%BA%E5%88%B6%E7%A9%B6%E7%AB%9F%E6%9C%89%E5%A4%9A%E9%A6%99/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这两天在研究Cesium中如何实现沿线飞行或漫游功能，上网查资料发现有好多博主的解决办法都包含了什么什么Property……勾起了我强烈的好奇心，遂去了<a href="https://cesium.com/docs/tutorials/creating-entities/#the-property-system">Cesium官网</a>一探究竟，一下我就被第一句话震惊到了。</p><blockquote><p>All values we define for our entities are stored as <code>Property</code> objects.</p></blockquote><p>实体的所有值都被维护成了<code>Property</code>对象，这让我不得不往下看，但我越看越气，这么重要的东西，你这啥也没讲啊。算了还是我自己研究吧。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9a6b5c8b8dff453ab719bee1f111e456~tplv-k3u1fbpfcp-watermark.image" alt="image-20210603163511040.png"></p><h2 id="什么是Property机制"><a href="#什么是Property机制" class="headerlink" title="什么是Property机制"></a>什么是Property机制</h2><p>个人感觉Cesium的Property本质上与<code>Object.defineProperties</code>类似，<code>defineProperties</code>直接封装了基本类型，如果是Object，则是引用形式。通过Property的封装，将引用或复制的权力交给了设计者，同时提供一些特殊的功能以满足需求。</p><h2 id="为什么要用Property"><a href="#为什么要用Property" class="headerlink" title="为什么要用Property"></a>为什么要用Property</h2><p>首先用一个例子来简单展示一下Property的作用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 创建盒子</span><br><span class="hljs-keyword">var</span> box = viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>    <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;box&quot;</span>,<br>    <span class="hljs-attr">position</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(<span class="hljs-number">121.54035</span>, <span class="hljs-number">38.92146</span>, <span class="hljs-number">2000</span>),<br>    <span class="hljs-attr">box</span>: &#123;<br>        <span class="hljs-attr">dimensions</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">1000.0</span>, <span class="hljs-number">1000.0</span>, <span class="hljs-number">1000.0</span>),<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>假如我们想实现盒子的大小随时间变化而变化，第一想到的应该就是用<code>setInterval</code>去改变盒子的<code>dimensions</code>，但这样对性能是个不小的挑战。而Cesium提供一种机制，可以让其随时间自动变化并赋值，这就是Property。以下代码是在5秒内让盒子大小变化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> property = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">SampledProperty</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>);<br><br>property.<span class="hljs-title function_">addSample</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">1000.0</span>, <span class="hljs-number">1000.0</span>, <span class="hljs-number">1000.0</span>)<br>);<br><br>property.<span class="hljs-title function_">addSample</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>        <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>        <span class="hljs-number">5</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>    ),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">2000.0</span>, <span class="hljs-number">2000.0</span>, <span class="hljs-number">2000.0</span>)<br>);<br><br>box.<span class="hljs-property">box</span>.<span class="hljs-property">dimensions</span> = property;<br></code></pre></td></tr></table></figure><p>我们通过<code>addSample</code>向Property实例添加关键帧并定义想要修改的属性，最后赋值给box的<code>dimensions</code>，效果如下</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dde462283c494bd1a7feee67cb351356~tplv-k3u1fbpfcp-watermark.image" alt="property1.gif"></p><p>所以说，<strong>Property可以和时间轴进行关联，并根据时间返回对应的属性值</strong>，而Entity则可以通过返回的值动态改变实体的位置、大小等。</p><h2 id="Property分类及使用方法"><a href="#Property分类及使用方法" class="headerlink" title="Property分类及使用方法"></a>Property分类及使用方法</h2><p>上文中我们举例使用的<code>SampledProperty</code>提供了插值功能，还有很多Property的类型，我们可以在<a href="https://cesium.com/docs/cesiumjs-ref-doc/">API文档</a>中搜索一下Property，整整有29个之多。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/eb8bd5dc606949e8a060baf0f1f06f63~tplv-k3u1fbpfcp-watermark.image" alt="image-20210604095802707.png"></p><p>简单归类一下可以分为几类：</p><ul><li>基本类型：<code>ConstantProperty</code>，<code>SampledProperty</code>，<code>TimeIntervalCollectionProperty</code>，<code>CompositeProperty</code></li><li>其他类型：<code>CallbackProperty</code>，<code>ReferenceProperty</code>，<code>PropertyArray</code>，<code>PropertyBag</code>，<code>VelocityOrientationProperty</code>，<code>VelocityVectorProperty</code></li><li>材质类型：<code>MaterialProperty</code>及带material字样的</li><li>位置类型：带Position字样的</li></ul><p>同时Cesium提供了一个<code>Property</code>类作为所有类型的基类，并定义了几个公共属性及接口。</p><p><strong>getValue(time, result) → Cartesian3</strong></p><p>获取特定时间点下的属性值</p><table><thead><tr><th align="left">Name</th><th align="left">Type</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><code>time</code></td><td align="left"><a href="https://cesium.com/docs/cesiumjs-ref-doc/JulianDate.html">JulianDate</a></td><td align="left">检索值的时间</td></tr><tr><td align="left"><code>result</code></td><td align="left"><a href="https://cesium.com/docs/cesiumjs-ref-doc/Cartesian3.html">Cartesian3</a></td><td align="left">将值存储到的对象。若缺省则创建并返回新实例</td></tr></tbody></table><p><strong>equal</strong></p><p>用来判断属性值是否相等。</p><p>接下来我们就一些常用的Property做一下讲解和代码实现。</p><h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><h4 id="SampledProperty"><a href="#SampledProperty" class="headerlink" title="SampledProperty"></a>SampledProperty</h4><p>第一个例子中我们使用的就是它，通过添加不同时间点的Sample，在每两个时间点之间进行线性插值，这里不做演示，代码和效果都在第一个例子中了。</p><h4 id="TimeIntervalCollectionProperty"><a href="#TimeIntervalCollectionProperty" class="headerlink" title="TimeIntervalCollectionProperty"></a>TimeIntervalCollectionProperty</h4><p>用来指定具体时间段内的属性值，每个时间段内属性值不变。所以和<code>SampledProperty</code>不同，它呈现出的变化为跳跃式。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3831511fc064adda66b8eac39162d2e~tplv-k3u1fbpfcp-watermark.image" alt="property2.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> property = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeIntervalCollectionProperty</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span><br>);<br><br><br>property.<span class="hljs-property">intervals</span>.<span class="hljs-title function_">addInterval</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeInterval</span>(&#123;<br>        <span class="hljs-attr">start</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">2</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">stop</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">20</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">isStartIncluded</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">isStopIncluded</span>:<span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">1000.0</span>, <span class="hljs-number">1000.0</span>, <span class="hljs-number">1000.0</span>),<br>    &#125;)<br>);<br>property.<span class="hljs-property">intervals</span>.<span class="hljs-title function_">addInterval</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeInterval</span>(&#123;<br>        <span class="hljs-attr">start</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">6</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">stop</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">20</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">isStartIncluded</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">isStopIncluded</span>:<span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">2000.0</span>, <span class="hljs-number">2000.0</span>, <span class="hljs-number">2000.0</span>),<br>    &#125;)<br>);<br>property.<span class="hljs-property">intervals</span>.<span class="hljs-title function_">addInterval</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeInterval</span>(&#123;<br>        <span class="hljs-attr">start</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">10</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">stop</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">20</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">isStartIncluded</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">isStopIncluded</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">3000.0</span>, <span class="hljs-number">3000.0</span>, <span class="hljs-number">3000.0</span>),<br>    &#125;)<br>);<br><br>box.<span class="hljs-property">box</span>.<span class="hljs-property">dimensions</span> = property;<br></code></pre></td></tr></table></figure><h4 id="ConstantProperty"><a href="#ConstantProperty" class="headerlink" title="ConstantProperty"></a>ConstantProperty</h4><p>不随时间的变化而变化的属性。</p><p>相对于上述两种Property，更加常用的可能就是这个<code>ConstantProperty</code>了，在我们平常设置实体的属性时一般都是如下设置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">box.<span class="hljs-property">box</span>.<span class="hljs-property">dimensions</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>但是实际上其实完整的写法应该是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">box.<span class="hljs-property">box</span>.<span class="hljs-property">dimensions</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConstantProperty</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>));<br></code></pre></td></tr></table></figure><p>这么看我们可以发现，box中的<code>dismensions</code>属性其实是<code>Property</code>类型，在Cesium内部偷偷的将我们传入的Cartesian3转化成了<code>ConstantProperty</code>类型。</p><p><code>ConstantProperty</code>也并非不能更改，它提供了<code>setValue</code>方法去修改属性值，利用<code>setValue</code>会修改原有的属性值，而非创建新的<code>ConstantProperty</code>。</p><h4 id="CompositeProperty"><a href="#CompositeProperty" class="headerlink" title="CompositeProperty"></a>CompositeProperty</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7c16a6acef6647d9a2f98852d276c413~tplv-k3u1fbpfcp-watermark.image" alt="property3.gif"></p><p>顾名思义这是个复合属性，它可以将多种Property进行组合操作，例如在一段时间内需要跳跃性变化，然后进行平滑变化，则可以使用这种类型。看代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> lineProperty = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">SampledProperty</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>);<br><br>lineProperty.<span class="hljs-title function_">addSample</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">1000.0</span>, <span class="hljs-number">1000.0</span>, <span class="hljs-number">1000.0</span>)<br>);<br><br>lineProperty.<span class="hljs-title function_">addSample</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>        <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>        <span class="hljs-number">5</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>    ),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">3000.0</span>, <span class="hljs-number">3000.0</span>, <span class="hljs-number">3000.0</span>)<br>);<br><br><span class="hljs-keyword">var</span> timeProperty = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeIntervalCollectionProperty</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span><br>);<br><br>timeProperty.<span class="hljs-property">intervals</span>.<span class="hljs-title function_">addInterval</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeInterval</span>(&#123;<br>        <span class="hljs-attr">start</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">5</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">stop</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">20</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">isStartIncluded</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">isStopIncluded</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">3000.0</span>, <span class="hljs-number">3000.0</span>, <span class="hljs-number">3000.0</span>),<br>    &#125;)<br>);<br>timeProperty.<span class="hljs-property">intervals</span>.<span class="hljs-title function_">addInterval</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeInterval</span>(&#123;<br>        <span class="hljs-attr">start</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">10</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">stop</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">20</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">isStartIncluded</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">isStopIncluded</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">4000.0</span>, <span class="hljs-number">4000.0</span>, <span class="hljs-number">4000.0</span>),<br>    &#125;)<br>);<br>timeProperty.<span class="hljs-property">intervals</span>.<span class="hljs-title function_">addInterval</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeInterval</span>(&#123;<br>        <span class="hljs-attr">start</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">15</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">stop</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">20</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">isStartIncluded</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">isStopIncluded</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">data</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">5000.0</span>, <span class="hljs-number">5000.0</span>, <span class="hljs-number">5000.0</span>),<br>    &#125;)<br>);<br><br><span class="hljs-keyword">var</span> compositeProperty = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">CompositeProperty</span>();<br>compositeProperty.<span class="hljs-property">intervals</span>.<span class="hljs-title function_">addInterval</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeInterval</span>(&#123;<br>        <span class="hljs-attr">start</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>        <span class="hljs-attr">stop</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">5</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">isStartIncluded</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">isStopIncluded</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">data</span>: lineProperty,<br>    &#125;)<br>);<br>compositeProperty.<span class="hljs-property">intervals</span>.<span class="hljs-title function_">addInterval</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">TimeInterval</span>(&#123;<br>        <span class="hljs-attr">start</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">5</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">stop</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>            <span class="hljs-number">20</span>,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>        ),<br>        <span class="hljs-attr">isStartIncluded</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">isStopIncluded</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">data</span>: timeProperty,<br>    &#125;)<br>);<br><br>box.<span class="hljs-property">box</span>.<span class="hljs-property">dimensions</span> = compositeProperty;<br></code></pre></td></tr></table></figure><h3 id="位置类型"><a href="#位置类型" class="headerlink" title="位置类型"></a>位置类型</h3><h4 id="PositionProperty"><a href="#PositionProperty" class="headerlink" title="PositionProperty"></a>PositionProperty</h4><p>同Property，PositionProperty是一个虚基类，不能直接实例化，它增加了<code>referenceFrame</code>，只能表示<code>position</code>。</p><p><code>referenceFrame</code>用来获取position的参考系，目前Cesium提供两种参考系<code>FIXED</code>和<code>INERTIAL</code>。默认使用的<code>FIXED</code>参考系，即坐标在地球上的位置是固定的。</p><p>基于PositionProperty的类型有以下几种：</p><ul><li>CompositePositionProperty</li><li>ConstantPositionProperty</li><li>PositionProperty</li><li>PositionPropertyArray</li><li>SampledPositionProperty</li><li>TimeIntervalCollectionPositionProperty</li></ul><p>用法上和基本类型基本相同，只不过它们专门用来表示位置信息。这里不做举例。</p><h3 id="材质类型"><a href="#材质类型" class="headerlink" title="材质类型"></a>材质类型</h3><h4 id="MaterialProperty"><a href="#MaterialProperty" class="headerlink" title="MaterialProperty"></a>MaterialProperty</h4><p>专门用来表示材质，扩展了<code>getType</code>方法来获取材质类型。</p><p>同样它也有很多派生类，比如<code>ColorMaterialProperty</code>，<code>ImageMaterialProperty</code>等等，我们在平时的demo和项目中也都有使用。</p><p>我们可以利用基本类型和材质类型实现一个颜色的动态效果。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0ffdccbf9898430c8b462b9ef48220f1~tplv-k3u1fbpfcp-watermark.image" alt="property4.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> colorProperty = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">SampledProperty</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>);<br><br>colorProperty.<span class="hljs-title function_">addSample</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>)<br>);<br><br>colorProperty.<span class="hljs-title function_">addSample</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>        <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>        <span class="hljs-number">5</span>,<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>    ),<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)<br>);<br><br>box.<span class="hljs-property">box</span>.<span class="hljs-property">material</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ColorMaterialProperty</span>(colorProperty);<br><br></code></pre></td></tr></table></figure><h3 id="其他类型"><a href="#其他类型" class="headerlink" title="其他类型"></a>其他类型</h3><h4 id="CallbackProperty"><a href="#CallbackProperty" class="headerlink" title="CallbackProperty"></a>CallbackProperty</h4><p>这里主要介绍一下<code>CallbackProperty</code>，它是自由度最高的一种类型，我们只需要提供一个回调函数来返回我们需要的值即可，在回调函数中我们可以随意进行操作。在这我们实现一个随机变化颜色并且不断增高的box。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e7314edd2e84eccb663544a1245136d~tplv-k3u1fbpfcp-watermark.image" alt="property5.gif"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> l = <span class="hljs-number">2000.0</span>;<br>box.<span class="hljs-property">box</span>.<span class="hljs-property">dimensions</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">CallbackProperty</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">time, result</span>) &#123;<br>    result = result || <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><br>    l += <span class="hljs-number">20.0</span>;<br>    <span class="hljs-keyword">if</span> (l &gt; <span class="hljs-number">7000.0</span>) &#123;<br>        l = <span class="hljs-number">2000.0</span>;<br>    &#125;<br><br>    result.<span class="hljs-property">x</span> = <span class="hljs-number">4000.0</span>;<br>    result.<span class="hljs-property">y</span> = <span class="hljs-number">3000.0</span>;<br>    result.<span class="hljs-property">z</span> = l;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;, <span class="hljs-literal">false</span>);<br>box.<span class="hljs-property">box</span>.<span class="hljs-property">material</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ColorMaterialProperty</span>(<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">CallbackProperty</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-title function_">fromRandom</span>(&#123;<br>            <span class="hljs-attr">alpha</span>: <span class="hljs-number">1.0</span>,<br>        &#125;);<br>    &#125;, <span class="hljs-literal">false</span>)<br>);<br></code></pre></td></tr></table></figure><h4 id="ReferenceProperty"><a href="#ReferenceProperty" class="headerlink" title="ReferenceProperty"></a>ReferenceProperty</h4><p>该property可以直接链接到另一个对象的Property，做引用效果。</p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>targetCollection</code></td><td align="left">EntityCollection</td><td align="left">将用于解析引用的实体集合。</td></tr><tr><td align="left"><code>targetId</code></td><td align="left">String</td><td align="left">被引用的实体的 id。</td></tr><tr><td align="left"><code>targetPropertyNames</code></td><td align="left">Array.<String></td><td align="left">将使用的目标实体上的属性名称。</td></tr></tbody></table><h4 id="PropertyBag"><a href="#PropertyBag" class="headerlink" title="PropertyBag"></a>PropertyBag</h4><p>它用来对一个对象进行包装，使得该对象的每一个属性都可作为一个动态的Property进行修改。比如之前修改dimensions的话，dimensions是作为一个Cartesian3类型变量整体封装到Property中去的，如果我们只想修改dimensions的x。则可以使用PropertyBag来实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> zp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">SampledProperty</span>(<span class="hljs-title class_">Number</span>);<br>zp.<span class="hljs-title function_">addSample</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()), <span class="hljs-number">2000.0</span>);<br>zp.<span class="hljs-title function_">addSample</span>(<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">addSeconds</span>(<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">fromDate</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()),<br>    <span class="hljs-number">5</span>,<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">JulianDate</span>()<br>),, <span class="hljs-number">7000.0</span>);<br><br>box.<span class="hljs-property">box</span>.<span class="hljs-property">dimensions</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PropertyBag</span>(&#123;<br>    <span class="hljs-attr">x</span>: <span class="hljs-number">4000.0</span>,<br>    <span class="hljs-attr">y</span>: <span class="hljs-number">3000.0</span>,<br>    <span class="hljs-attr">z</span>: zp<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="VelocityOrientationProperty"><a href="#VelocityOrientationProperty" class="headerlink" title="VelocityOrientationProperty"></a>VelocityOrientationProperty</h4><p>该Property用来Entity的position的位置变化，来计算出移动的方向，最后把速度方向输出成Orientation。Cesium自带的示例中有一个<a href="https://sandcastle.cesium.com/?src=Interpolation.html">Interpolation</a>中有其用法，不再赘述。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>Property机制很强大，我们可以在很多场景中使用它，比如实现一些沿线飞行、路径漫游或者实体的大小属性变化等。可以说只要有修改属性的地方我们都可以用到它。</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【三维GIS可视化】基于Vue+Cesium+Supermap实现智慧城市（五）</title>
    <link href="/2021/06/03/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E4%BA%94%EF%BC%89/"/>
    <url>/2021/06/03/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E4%BA%94%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd9637ac16fa465d88ec4ece08f0ae58~tplv-k3u1fbpfcp-watermark.image" alt="分层展示.gif"></p><p>这个效果也是我偶然间在一个视频中看到的，然后开始逐步理清思路动手开始实现，简单来讲就是利用Entity的显示隐藏以及坐标的转换实现。因为是野路子所以可能实现过程略显粗糙或冗余，接下来来我们开始。</p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>我们需要利用点击事件获取我们选中的这个实体，隐藏当前实体并获取到它的外围坐标集来生成新的多边形，并且要对这个多边形进行放大平移等操作。同时我们需要提供一个关闭按钮让其能够退出所谓的分层模式。</p><p>我们如何对一个坐标集进行操作让它所代表的多边形能够缩放或平移呢？这就要用到我们的地理分析库<code>Turf.js</code>了，关于Turf的介绍及基本使用方法我在<a href="https://juejin.cn/post/6968626897156603918">Turf.js—让你在浏览器上实现地理分析</a>里做了相关介绍，需要的小伙伴可以进行浏览。</p><p>关闭按钮该如何实现呢？还记得前面的文章中我们进行的简单的文本标记类封装吗，道理是一样的，将我们指定的div元素渲染到Cesium的容器中，并在类中指定所需的逻辑、方法等即可。</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><h4 id="分层效果"><a href="#分层效果" class="headerlink" title="分层效果"></a>分层效果</h4><p>思路清晰后我们可以开始功能实现。同样的，我们可以先实现功能后对其封装，在本文中我们只贴出关键代码，小伙伴们可以读完文章后亲自动手实现。</p><p>首先我们肯定是加载一个<code>entity</code>实体，这里老生常谈，我就不多做说明了，然后我们需要注册一个点击事件，用来触发点击实体后的响应函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ScreenSpaceEventHandler</span>(viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>);<br><br>handler.<span class="hljs-title function_">setInputAction</span>(<span class="hljs-function">(<span class="hljs-params">movement</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> pick = viewer.<span class="hljs-property">scene</span>.<span class="hljs-title function_">pick</span>(movement.<span class="hljs-property">position</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Cesium</span>.<span class="hljs-title function_">defined</span>(pick)) &#123;<br>        <span class="hljs-keyword">if</span>(!pick.<span class="hljs-property">id</span>.<span class="hljs-property">isFloor</span>) &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">showFloor</span>(pick.<span class="hljs-property">id</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">selectFloor</span>(pick.<span class="hljs-property">id</span>);<br>        &#125;<br>    &#125;<br>&#125;, <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ScreenSpaceEventType</span>.<span class="hljs-property">LEFT_CLICK</span>);<br></code></pre></td></tr></table></figure><p>在响应函数中我们首先隐藏点击的这个实体，为我们的分层实体集腾位置，接着获取到这个实体的外围坐标集，并用它作为我们的分层实体的坐标集。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">showFloor</span>(<span class="hljs-params">entity</span>) &#123;<br>    viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">getById</span>(entity.<span class="hljs-property">id</span>).<span class="hljs-property">show</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">let</span> height = <span class="hljs-number">30</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; entity.<span class="hljs-property">floor</span>; i++) &#123;<br>        <span class="hljs-keyword">let</span> floor = &#123;<br>            <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;floor&quot;</span> + i,<br>            <span class="hljs-attr">id</span>: entity.<span class="hljs-property">id</span> + <span class="hljs-string">&quot;F&quot;</span> + i,<br>            <span class="hljs-attr">isFloor</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">floor</span>: i + <span class="hljs-number">1</span>,<br>          <span class="hljs-attr">positions</span>: entity.<span class="hljs-property">positions</span>,<br>            <span class="hljs-attr">polygon</span>: &#123;<br>                <span class="hljs-comment">// hierarchy: Cesium.Cartesian3.fromDegreesArray(floorPos),</span><br>                <span class="hljs-attr">hierarchy</span>: entity.<span class="hljs-property">polygon</span>.<span class="hljs-property">hierarchy</span>.<span class="hljs-property">_value</span>,<br>                <span class="hljs-attr">material</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">YELLOW</span>.<span class="hljs-title function_">withAlpha</span>(<span class="hljs-number">0.4</span>),<br>                height,<br>                <span class="hljs-attr">outline</span>: <span class="hljs-literal">true</span>,<br>                <span class="hljs-attr">ouelineColor</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">BLACK</span>,<br>            &#125;,<br>        &#125;;<br>        height += <span class="hljs-number">60</span>;<br>        viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(floor);<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><p>这样我们基本的分层效果就做出来了。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7dc64dfc11b4473e8822fa53baf471a2~tplv-k3u1fbpfcp-watermark.image" alt="分层展示1.gif"></p><h4 id="选中效果"><a href="#选中效果" class="headerlink" title="选中效果"></a>选中效果</h4><p>接下来我们实现选中效果，选中效果我们可以使用高亮、平移、放大以及它们的组合展示，高亮这里不做阐述，效果在我们网格实现那篇文章已经实现，本文主要实现放大效果。</p><p>想实现放大效果我们需要利用<code>Turf.js</code>进行坐标的变换，所以我们首先在项目中安装Turf</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm i @turf/turf<br></code></pre></td></tr></table></figure><p>我们需要利用<code>Turf.js</code>中的<code>polygon</code>和<code>transformScale</code>实现。为了方便，在最开始<code>Entity</code>生成的时候我将它的二维坐标组作为一个属性绑定到实体上，以便后续使用。在实际项目中根据具体的情况进行调整，比如利用三维坐标转换或根据实体<code>ID</code>调取接口获取等。</p><p>我们想使用Turf就要遵循它的格式。所以首先我们需要生成Turf承认的Polygon实体，然后将其进行放大或缩小并获取其放大后的坐标数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> poly = turf.<span class="hljs-title function_">polygon</span>([positions]);<br><span class="hljs-keyword">let</span> translatedPoly = turf.<span class="hljs-title function_">transformScale</span>(poly, <span class="hljs-number">1.4</span>);<br><span class="hljs-keyword">let</span> transPoints = translatedPoly.<span class="hljs-property">geometry</span>.<span class="hljs-property">coordinates</span>[<span class="hljs-number">0</span>];<br></code></pre></td></tr></table></figure><p>然后生成一个实体并添加到实体集中即可。</p><p>这里只是做了最基本的实现，完整的思考下来其实会发现还有很多需要完善的地方。比如：点击已选中楼层后取消选中、选中楼层的唯一性等等。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ac587743c20942a3aadc5fd6fe8285d3~tplv-k3u1fbpfcp-watermark.image" alt="分层展示2.gif"></p><p>完整方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">selectFloor</span>(<span class="hljs-params">floor</span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(floor);<br>    <span class="hljs-keyword">let</span> positions = floor.<span class="hljs-property">positions</span>;<br>    <span class="hljs-keyword">let</span> poly, translatedPoly, transPoints, floorPosSingle = [];<br>    poly = turf.<span class="hljs-title function_">polygon</span>([positions]);<br>    translatedPoly = turf.<span class="hljs-title function_">transformScale</span>(poly, <span class="hljs-number">1.4</span>);<br>    transPoints = translatedPoly.<span class="hljs-property">geometry</span>.<span class="hljs-property">coordinates</span>[<span class="hljs-number">0</span>];<br>    transPoints.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">item</span>) =&gt;</span> &#123;<br>        floorPosSingle.<span class="hljs-title function_">push</span>(item[<span class="hljs-number">0</span>], item[<span class="hljs-number">1</span>]);<br>    &#125;);<br><br>    <span class="hljs-keyword">let</span> selectFloor = &#123;<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;select_floor&quot;</span>,<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;active_&#x27;</span> + floor.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">isFloor</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">isActive</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">polygon</span>: &#123;<br>            <span class="hljs-attr">hierarchy</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>(floorPosSingle),<br>            <span class="hljs-attr">material</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">RED</span>.<span class="hljs-title function_">withAlpha</span>(<span class="hljs-number">0.4</span>),<br>            <span class="hljs-attr">height</span>: floor.<span class="hljs-property">polygon</span>.<span class="hljs-property">height</span>.<span class="hljs-property">_value</span>,<br>            <span class="hljs-attr">outline</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">outlineColor</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">BLACK</span>,<br>        &#125;,<br>    &#125;;<br><br>    viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">getById</span>(floor.<span class="hljs-property">id</span>).<span class="hljs-property">show</span> = <span class="hljs-literal">false</span><br>    viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(selectFloor)<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="关闭按钮"><a href="#关闭按钮" class="headerlink" title="关闭按钮"></a>关闭按钮</h4><p>关闭按钮这里也不做过多说明，和动态文本标记的思路大致相同，唯一的区别是现在的DOM中绑定一个点击事件，需要通过这个事件触发删除分层实体集和恢复显示楼层。这里我简单说明一下如何在封装的类中调用vue文件下的方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// class类中</span><br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_vmInstance</span>.<span class="hljs-property">closeEvent</span> = <span class="hljs-function"><span class="hljs-params">e</span> =&gt;</span> &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">close</span>();<br>&#125;;<br><br><span class="hljs-title function_">close</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">_vmInstance</span>.<span class="hljs-property">show</span> = <span class="hljs-literal">false</span>; <span class="hljs-comment">//删除dom</span><br>    <span class="hljs-comment">// do something……</span><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vue">// vue文件中<br>&lt;div :id=&quot;id&quot; class=&quot;close-container&quot; v-if=&quot;show&quot; @click=&quot;closeClick&quot;&gt;&lt;/div&gt;<br><br>closeClick() &#123;<br>    if (this.closeEvent) &#123;<br>    this.closeEvent();<br>    &#125;<br>&#125;,<br></code></pre></td></tr></table></figure><h4 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h4><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/20d92729e36846688dfe0fe31e94a514~tplv-k3u1fbpfcp-watermark.image" alt="分层展示3.gif"></p><p>有时候我们会发现，我们的实体并不是一个完整的多边形体，有可能是环状或带洞的多边形，这时候利用上述的方法会发现疯狂报错。原因是无论是Ceisum中还是Turf中，带洞多边形的坐标格式都和普通的多边形是不一样的，下面简单说明一下两个库中带洞多边形的生成方式。</p><h5 id="Cesium"><a href="#Cesium" class="headerlink" title="Cesium"></a>Cesium</h5><p>在Ceisum中，<code>entity.polygon.hierarchy</code>作为多边形的外围坐标集，提供了两种写法，上文中的写法为简写，默认不带洞，而带洞多边形则需要提供一个对象，其中包含两个字段<code>positions</code>和<code>holes</code>。顾名思义，一个是外围坐标集，一个是洞坐标集。其中<code>holes</code>可以提供多个坐标集，相当于挖多个洞。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> entity = &#123;<br>    <span class="hljs-attr">polygon</span>:&#123;<br>        <span class="hljs-attr">hierarchy</span>:&#123;<br>            <span class="hljs-attr">positions</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>(outPos),<br>            <span class="hljs-attr">holes</span>: [<br>                &#123; <span class="hljs-attr">positions</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>(inPos) &#125;<br>            ]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="Turf-js"><a href="#Turf-js" class="headerlink" title="Turf.js"></a>Turf.js</h5><p>而在Turf中，我们无法实现直接掏洞，只能曲线救国，将洞的坐标集和外围坐标集生成多边形并分别进行放大操作，获取坐标后进行我们想要的实现。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>这个例子结合了前面的封装DOM类以及点击事件的运用，例子虽然粗糙但是能够帮我们巩固相关知识。这篇文章也会收录到我的专栏中，里面也有其他效果的实现，感兴趣的小伙伴可以点击订阅。如果有好的建议或提醒欢迎评论区浏览或添加联系方式共同学习进步。</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cesium源码跟读之CesiumWidget的实现</title>
    <link href="/2021/06/02/Cesium%E6%BA%90%E7%A0%81%E8%B7%9F%E8%AF%BB%E4%B9%8BCesiumWidget%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <url>/2021/06/02/Cesium%E6%BA%90%E7%A0%81%E8%B7%9F%E8%AF%BB%E4%B9%8BCesiumWidget%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>没错，我也来读源码了，因为之前的文章中简单提到了一下Cesium的渲染机制，所以我索性一咬牙将这块的源码通读一遍，自己也能更深入的了解Cesium，这篇文章也就作为我的一个记录。准备工作只有一步：从GitHub上拉取一份Cesium最新的代码，找到<code>Source\Widgets\CesiumWidget\CesiumWidget.js</code>文件。</p><blockquote><p>文章中代码仅为涉及到讲解部分的代码，未全部放出</p></blockquote><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><p>CesiumWidget的用法和Viewer的用法类似，都是通过一个id来生成容器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> widget = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">CesiumWidget</span>(<span class="hljs-string">&#x27;id&#x27;</span>);<br><span class="hljs-keyword">const</span> viewer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Viewer</span>(<span class="hljs-string">&#x27;id&#x27;</span>);<br></code></pre></td></tr></table></figure><p>两者的区别是，只要实例化了Viewer则必定会实例化一个CesiumWidget。Viewer除了可视区域外还囊括了各种控件，比如时间轴、时间拨盘、搜索框等。</p><blockquote><p>Cesium中使用WebGL进行绘图的是实例化的Scene模块。CesiumWidget更像一个桥梁，把构造时传递的DOM元素（或ID选择器）再内嵌了一个canvas元素，再将此canvas元素传递给Scene让其绘图。</p></blockquote><h3 id="内部方法"><a href="#内部方法" class="headerlink" title="内部方法"></a>内部方法</h3><ul><li>[24行]<code>getDefaultSkyBoxUrl</code>：获取默认天空盒资源地址</li><li>[30行]<code>startRenderLoop</code>：开启渲染循环，这也是我们上一篇中提到的Cesium的渲染机制。利用<code>requestAnimationFrame</code>来不停的刷新渲染页面。</li><li>[71行]<code>configurePixelRatio</code>：配置像素比。</li><li>[86行]<code>configureCanvasSize</code>：配置画布大小。</li><li>[105行]<code>configureCameraFrustum</code>：配置相机视锥。</li></ul><h3 id="构造"><a href="#构造" class="headerlink" title="构造"></a>构造</h3><h4 id="DOM构造"><a href="#DOM构造" class="headerlink" title="DOM构造"></a>DOM构造</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">CesiumWidget</span>(<span class="hljs-params">container, options</span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_">defined</span>(container)) &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DeveloperError</span>(<span class="hljs-string">&quot;container is required.&quot;</span>);<br>    &#125;<br>    <br>  container = <span class="hljs-title function_">getElement</span>(container);<br>  options = <span class="hljs-title function_">defaultValue</span>(options, defaultValue.<span class="hljs-property">EMPTY_OBJECT</span>);<br>    <span class="hljs-comment">//Configure the widget DOM elements</span><br>    <span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    element.<span class="hljs-property">className</span> = <span class="hljs-string">&quot;cesium-widget&quot;</span>;<br>    container.<span class="hljs-title function_">appendChild</span>(element);<br>    <span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    <br>    <span class="hljs-comment">// ……</span><br>    <br>  element.<span class="hljs-title function_">appendChild</span>(canvas);<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分代码完成了Viewer实例的DOM元素判断、本级DOM元素创建和下级DOM（<code>canvas</code>）的创建，以及传入的<code>options</code>是否为空。</p><p>如此DOM的层级便生成完毕了，下方代码（227~263行）主要是像商标这种部分以及分辨率等设置、将CesiumWidget的私有变量赋值并调用<code>configureCanvasSize</code>来修改<code>canvas</code>的大小。</p><h4 id="场景构造"><a href="#场景构造" class="headerlink" title="场景构造"></a>场景构造</h4><p>从265行开始我们会看到一个巨大的<code>try/catch</code>模块。这部分代码完成了<code>Scene</code>、<code>Globe</code>、<code>SkyBox</code>、<code>SkyAtmosphere</code>四个模块的实例化。</p><p>这里我们会发现一个问题，在使用<code>CesiumWidget</code>的时候，明明有像<code>Camera</code>、<code>ImageryLayers</code>之类的API，是从哪来的呢。这里先卖个关子，我们先专注于<code>Scene</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> scene = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scene</span>(&#123;<br>    <span class="hljs-attr">canvas</span>: canvas,<br>    <span class="hljs-attr">contextOptions</span>: options.<span class="hljs-property">contextOptions</span>,<br>    <span class="hljs-attr">creditContainer</span>: innerCreditContainer,<br>    <span class="hljs-attr">creditViewport</span>: creditViewport,<br>    <span class="hljs-attr">mapProjection</span>: options.<span class="hljs-property">mapProjection</span>,<br>    <span class="hljs-attr">orderIndependentTranslucency</span>: options.<span class="hljs-property">orderIndependentTranslucency</span>,<br>    <span class="hljs-attr">scene3DOnly</span>: <span class="hljs-title function_">defaultValue</span>(options.<span class="hljs-property">scene3DOnly</span>, <span class="hljs-literal">false</span>),<br>    <span class="hljs-attr">terrainExaggeration</span>: options.<span class="hljs-property">terrainExaggeration</span>,<br>    <span class="hljs-attr">shadows</span>: options.<span class="hljs-property">shadows</span>,<br>    <span class="hljs-attr">mapMode2D</span>: options.<span class="hljs-property">mapMode2D</span>,<br>    <span class="hljs-attr">requestRenderMode</span>: options.<span class="hljs-property">requestRenderMode</span>,<br>    <span class="hljs-attr">maximumRenderTimeChange</span>: options.<span class="hljs-property">maximumRenderTimeChange</span>,<br>&#125;);<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">_scene</span> = scene;<br></code></pre></td></tr></table></figure><p>实例化Scene对象，传递构造的参数（绝大部分来自于options）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">scene.<span class="hljs-property">camera</span>.<span class="hljs-property">constrainedAxis</span> = <span class="hljs-title class_">Cartesian3</span>.<span class="hljs-property">UNIT_Z</span>;<br><br><span class="hljs-title function_">configurePixelRatio</span>(<span class="hljs-variable language_">this</span>);<br><span class="hljs-title function_">configureCameraFrustum</span>(<span class="hljs-variable language_">this</span>);<br></code></pre></td></tr></table></figure><p>指定<code>camera</code>的约束轴为Z轴，调用函数来配置像素比、相机视锥体。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> ellipsoid = <span class="hljs-title function_">defaultValue</span>(<br>    scene.<span class="hljs-property">mapProjection</span>.<span class="hljs-property">ellipsoid</span>,<br>    <span class="hljs-title class_">Ellipsoid</span>.<span class="hljs-property">WGS84</span><br>);<br><span class="hljs-keyword">var</span> globe = options.<span class="hljs-property">globe</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">defined</span>(globe)) &#123;<br>    globe = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Globe</span>(ellipsoid);<br>&#125;<br><span class="hljs-keyword">if</span> (globe !== <span class="hljs-literal">false</span>) &#123;<br>    scene.<span class="hljs-property">globe</span> = globe;<br>    scene.<span class="hljs-property">globe</span>.<span class="hljs-property">shadows</span> = <span class="hljs-title function_">defaultValue</span>(<br>        options.<span class="hljs-property">terrainShadows</span>,<br>        <span class="hljs-title class_">ShadowMode</span>.<span class="hljs-property">RECEIVE_ONLY</span><br>    );<br>&#125;<br></code></pre></td></tr></table></figure><p>创建<code>ellipsoid</code>和<code>globe</code>并传递给<code>scene</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> skyBox = options.<span class="hljs-property">skyBox</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">defined</span>(skyBox)) &#123;<br>    skyBox = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkyBox</span>(&#123;<br>        <span class="hljs-attr">sources</span>: &#123;<br>            <span class="hljs-attr">positiveX</span>: <span class="hljs-title function_">getDefaultSkyBoxUrl</span>(<span class="hljs-string">&quot;px&quot;</span>),<br>            <span class="hljs-attr">negativeX</span>: <span class="hljs-title function_">getDefaultSkyBoxUrl</span>(<span class="hljs-string">&quot;mx&quot;</span>),<br>            <span class="hljs-attr">positiveY</span>: <span class="hljs-title function_">getDefaultSkyBoxUrl</span>(<span class="hljs-string">&quot;py&quot;</span>),<br>            <span class="hljs-attr">negativeY</span>: <span class="hljs-title function_">getDefaultSkyBoxUrl</span>(<span class="hljs-string">&quot;my&quot;</span>),<br>            <span class="hljs-attr">positiveZ</span>: <span class="hljs-title function_">getDefaultSkyBoxUrl</span>(<span class="hljs-string">&quot;pz&quot;</span>),<br>            <span class="hljs-attr">negativeZ</span>: <span class="hljs-title function_">getDefaultSkyBoxUrl</span>(<span class="hljs-string">&quot;mz&quot;</span>),<br>        &#125;,<br>    &#125;);<br>&#125;<br><span class="hljs-keyword">if</span> (skyBox !== <span class="hljs-literal">false</span>) &#123;<br>    scene.<span class="hljs-property">skyBox</span> = skyBox;<br>    scene.<span class="hljs-property">sun</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sun</span>();<br>    scene.<span class="hljs-property">moon</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Moon</span>();<br>&#125;<br><br><span class="hljs-comment">// Blue sky, and the glow around the Earth&#x27;s limb.</span><br><span class="hljs-keyword">var</span> skyAtmosphere = options.<span class="hljs-property">skyAtmosphere</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">defined</span>(skyAtmosphere)) &#123;<br>    skyAtmosphere = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SkyAtmosphere</span>(ellipsoid);<br>&#125;<br><span class="hljs-keyword">if</span> (skyAtmosphere !== <span class="hljs-literal">false</span>) &#123;<br>    scene.<span class="hljs-property">skyAtmosphere</span> = skyAtmosphere;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>创建天空盒、大气环境等环境因素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//Set the base imagery layer</span><br><span class="hljs-keyword">var</span> imageryProvider =<br>    options.<span class="hljs-property">globe</span> === <span class="hljs-literal">false</span> ? <span class="hljs-literal">false</span> : options.<span class="hljs-property">imageryProvider</span>;<br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_">defined</span>(imageryProvider)) &#123;<br>    imageryProvider = <span class="hljs-title function_">createWorldImagery</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (imageryProvider !== <span class="hljs-literal">false</span>) &#123;<br>    scene.<span class="hljs-property">imageryLayers</span>.<span class="hljs-title function_">addImageryProvider</span>(imageryProvider);<br>&#125;<br><br><span class="hljs-comment">//Set the terrain provider if one is provided.</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_">defined</span>(options.<span class="hljs-property">terrainProvider</span>) &amp;&amp; options.<span class="hljs-property">globe</span> !== <span class="hljs-literal">false</span>) &#123;<br>    scene.<span class="hljs-property">terrainProvider</span> = options.<span class="hljs-property">terrainProvider</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置影像数据源，如果没有配置，则调用<code>createWorldImagery</code>模块创建世界影像并传递给<code>scene</code>，如果配置中有地形数据源，则将其传递给<code>scene</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">_screenSpaceEventHandler</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScreenSpaceEventHandler</span>(canvas);<br></code></pre></td></tr></table></figure><p>创建事件处理器，用于下方暴露在原型中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">if</span> (<span class="hljs-title function_">defined</span>(options.<span class="hljs-property">sceneMode</span>)) &#123;    <span class="hljs-keyword">if</span> (options.<span class="hljs-property">sceneMode</span> === <span class="hljs-title class_">SceneMode</span>.<span class="hljs-property">SCENE2D</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_scene</span>.<span class="hljs-title function_">morphTo2D</span>(<span class="hljs-number">0</span>);    &#125;    <span class="hljs-keyword">if</span> (options.<span class="hljs-property">sceneMode</span> === <span class="hljs-title class_">SceneMode</span>.<span class="hljs-property">COLUMBUS_VIEW</span>) &#123;        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_scene</span>.<span class="hljs-title function_">morphToColumbusView</span>(<span class="hljs-number">0</span>);    &#125;&#125;<br></code></pre></td></tr></table></figure><p>判断<code>scene</code>的视图模式是二维、三维还是2.5的。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span>;<span class="hljs-variable language_">this</span>.<span class="hljs-property">_onRenderError</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">scene, error</span>) &#123;    that.<span class="hljs-property">_useDefaultRenderLoop</span> = <span class="hljs-literal">false</span>;    that.<span class="hljs-property">_renderLoopRunning</span> = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">if</span> (that.<span class="hljs-property">_showRenderLoopErrors</span>) &#123;        <span class="hljs-keyword">var</span> title =            <span class="hljs-string">&quot;An error occurred while rendering.  Rendering has stopped.&quot;</span>;        that.<span class="hljs-title function_">showErrorPanel</span>(title, <span class="hljs-literal">undefined</span>, error);    &#125;&#125;;scene.<span class="hljs-property">renderError</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_onRenderError</span>);<br></code></pre></td></tr></table></figure><p>给<code>scene</code>绑定了渲染错误事件的处理函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-variable language_">this</span>.<span class="hljs-property">_useDefaultRenderLoop</span> = <span class="hljs-literal">undefined</span>;<span class="hljs-variable language_">this</span>.<span class="hljs-property">useDefaultRenderLoop</span> = <span class="hljs-title function_">defaultValue</span>(    options.<span class="hljs-property">useDefaultRenderLoop</span>,    <span class="hljs-literal">true</span>);<span class="hljs-variable language_">this</span>.<span class="hljs-property">_targetFrameRate</span> = <span class="hljs-literal">undefined</span>;<span class="hljs-variable language_">this</span>.<span class="hljs-property">targetFrameRate</span> = options.<span class="hljs-property">targetFrameRate</span>;<br></code></pre></td></tr></table></figure><p>确认是否使用默认循环机制，如果配置为false则需要手动调用<code>render()</code>方法，否则使用目标帧速率进行渲染。</p><h4 id="原型定义"><a href="#原型定义" class="headerlink" title="原型定义"></a>原型定义</h4><p>我们在上边提过，<code>CesiumWidget</code>那么多的API都是从哪来的，代码读到这里我们就会发现，从390行向下，都是利用<code>Object.defineProperties()</code>在CesiumWidget的原型上添加属性以及方法。</p><h5 id="属性定义"><a href="#属性定义" class="headerlink" title="属性定义"></a>属性定义</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperties</span>(<span class="hljs-title class_">CesiumWidget</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>, &#123;    <span class="hljs-attr">container</span>: &#123;        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_container</span>;        &#125;,    &#125;,    <span class="hljs-attr">canvas</span>: &#123;        <span class="hljs-attr">get</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_canvas</span>;        &#125;,    &#125;,    <span class="hljs-comment">// ……&#125;</span><br></code></pre></td></tr></table></figure><h5 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h5><ul><li>[640行] <code>CesiumWidget.prototype.showErrorPanel</code>：向用户显示错误面板，其中包含标题和较长的错误消息，可以使用’确定’按钮将其关闭。该面板自动显示发生渲染循环错误时，如果showRenderLoopErrors不为false，则当小部件已构建。</li><li>[740行]<code>CesiumWidget.prototype.isDestroyed</code>：返回<code>CesiumWidget</code>是否被销毁。</li><li>[748行]<code>CesiumWidget.prototype.destroy</code>：销毁视图。</li><li>[763行]<code>CesiumWidget.prototype.resize</code>：更新画布大小、相机纵横比和视口大小。这个函数默认会自动调用，除非<code>useDefaultRenderLoop</code>设置为<code>false</code>。</li><li>[785行]<code>CesiumWidget.prototype.render</code>：渲染场景，同样的它也会自动调用，除非<code>useDefaultRenderLoop</code>设置为<code>false</code>。</li></ul><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title class_">CesiumWidget</span>;<br></code></pre></td></tr></table></figure><p>最后对整个模块进行导出。</p><h3 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h3><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6be7ebf0514d4f2b92013e23418e3c42~tplv-k3u1fbpfcp-watermark.image" alt="image-20210531155553870.png"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>我们只是针对这个文件中的私有函数以及构造函数进行阅读和分析，并未对其引用的模块比如<code>Scene</code>、<code>Globe</code>等进行阅读。感兴趣的小伙伴可以针对其中一个引入的模块进行更深入的阅读。如果是想在Cesium上深入研究的话我认为有些功能和实现的源码大概通读一下，了解一下实现原理是有必要的。</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Turf.js—让你在浏览器上实现地理分析</title>
    <link href="/2021/06/01/Turf.js%E2%80%94%E8%AE%A9%E4%BD%A0%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E5%AE%9E%E7%8E%B0%E5%9C%B0%E7%90%86%E5%88%86%E6%9E%90/"/>
    <url>/2021/06/01/Turf.js%E2%80%94%E8%AE%A9%E4%BD%A0%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8A%E5%AE%9E%E7%8E%B0%E5%9C%B0%E7%90%86%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们在地图相关系统中必不可少的就是空间分析操作相关需求，例如缓冲区、计算等高线等。凭借简单的js我们无法将点线面进行结合分析，而<code>Turf.js</code>的出现帮我们解决了这一难题，让我们在浏览器中也可以轻松的使用以前只属于桌面GIS的分析功能。</p><h2 id="Turf-js简介及其意义"><a href="#Turf-js简介及其意义" class="headerlink" title="Turf.js简介及其意义"></a>Turf.js简介及其意义</h2><p>Turf.js是MapBox公司研发的基于浏览器端的空间分析库，它使用JavaScript进行编写，通过npm进行包管理。值得一提的是，良好的模块化设计使其不仅能够作用于浏览器端、还可通过Node.js在服务端使用。Turf 原生支持 GeoJSON 矢量数据。GeoJSON 的优点是结构简单，并且得到了所有网页地图API的支持；但 GeoJSON 不支持空间索引，这个缺点可能会限制 Turf 处理大型文件的能力效率。其适用于轻量级（数据轻量而非功能轻量）的WebGIS应用。</p><p>浏览器端支持空间分析的意义在于，通过网页地图的不仅可提供地名搜索与路径查询（目前 Google Maps 的功能其实与十年前并没有太大区别），而且可以在浏览器中分享空间分析模型。以前的 WebGIS 功能当然也支持空间分析，但是分析过程需要在服务器端进行，本地能够进行的设置有限，现在使用 Turf.js 可以将分析过程完全移到本地，如果页面中提供了参数设置的话，可以在本地对模型进行修改并立即看到分析结果。这样的直接好处有两个方面：更渲的数据展示，以及更加复杂的用户交互（复杂交互本身需要空间分析作为基础）。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>引入全部功能</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">// 下载</span><br>$ npm install <span class="hljs-meta">@turf</span>/turf<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 引入</span><br><span class="hljs-keyword">import</span> * <span class="hljs-keyword">as</span> turf <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@turf/turf&#x27;</span><br><span class="hljs-keyword">import</span> &#123; lineString, along &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@turf/turf&#x27;</span><br></code></pre></td></tr></table></figure><p>如果想引用指定模块，可以下载功能名称对应的npm包（功能名称对应其包的名称）</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> install @turf/collect<br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> collect <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@turf/collect&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>Turf 有着质量极高的<a href="http://turfjs.org/examples/turf-within/">官方文档</a>，详细介绍了每个功能模块的使用，并有在线示例可以直接上手试用。</p><p>Turf的功能分为几大类，我们列举几个常用类并抽出一两个常用方法做展示。</p><h3 id="MEASUREMENT"><a href="#MEASUREMENT" class="headerlink" title="MEASUREMENT"></a>MEASUREMENT</h3><h4 id="area（计算区域面积）"><a href="#area（计算区域面积）" class="headerlink" title="area（计算区域面积）"></a>area（计算区域面积）</h4><blockquote><p>获取一个或多个<code>feature</code>，并返回其面积平方米。</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">geojson</td><td align="left">GeoJSON</td><td align="left">input GeoJSON feature(s)</td></tr></tbody></table><p><strong>返回</strong></p><p>number - area in square meters</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> polygon = turf.<span class="hljs-title function_">polygon</span>([[<br>        [<span class="hljs-number">108.09876</span>, <span class="hljs-number">37.200787</span>],<br>        [<span class="hljs-number">106.398901</span>, <span class="hljs-number">33.648651</span>],<br>        [<span class="hljs-number">114.972103</span>, <span class="hljs-number">33.340483</span>],<br>        [<span class="hljs-number">113.715685</span>, <span class="hljs-number">37.845557</span>],<br>        [<span class="hljs-number">108.09876</span>, <span class="hljs-number">37.200787</span>]<br>      ]]);<br><br><span class="hljs-keyword">var</span> area = turf.<span class="hljs-title function_">area</span>(polygon);<br></code></pre></td></tr></table></figure><p><code>npm install @turf/area</code></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e425077a384a4c5a9d942a0899e09367~tplv-k3u1fbpfcp-watermark.image" alt="image-20210531171407541.png"></p><h4 id="centerOfMass（计算多边形质心）"><a href="#centerOfMass（计算多边形质心）" class="headerlink" title="centerOfMass（计算多边形质心）"></a>centerOfMass（计算多边形质心）</h4><blockquote><p>取任何<code>Feature</code>或<code>FeatureCollection</code>，并利用这个公式返回其质心:多边形质心。</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">geojson</td><td align="left">GeoJSON</td><td align="left">GeoJSON to be centered</td></tr><tr><td align="left">properties</td><td align="left">Object</td><td align="left">an Object that is used as the Feature ‘s properties</td></tr></tbody></table><p><strong>返回</strong></p><p>Feature <Point> - the center of mass</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> polygon = turf.<span class="hljs-title function_">polygon</span>([[[-<span class="hljs-number">81</span>, <span class="hljs-number">41</span>], [-<span class="hljs-number">88</span>, <span class="hljs-number">36</span>], [-<span class="hljs-number">84</span>, <span class="hljs-number">31</span>], [-<span class="hljs-number">80</span>, <span class="hljs-number">33</span>], [-<span class="hljs-number">77</span>, <span class="hljs-number">39</span>], [-<span class="hljs-number">81</span>, <span class="hljs-number">41</span>]]]);<br><br><span class="hljs-keyword">var</span> center = turf.<span class="hljs-title function_">centerOfMass</span>(polygon);<br></code></pre></td></tr></table></figure><p><code>npm install @turf/center-of-mass</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a7db45453f044f983729f314cba06d7~tplv-k3u1fbpfcp-watermark.image" alt="image-20210531171328729.png"></p><h3 id="TRANSFORMATION"><a href="#TRANSFORMATION" class="headerlink" title="TRANSFORMATION"></a>TRANSFORMATION</h3><h4 id="buffer（计算缓冲区）"><a href="#buffer（计算缓冲区）" class="headerlink" title="buffer（计算缓冲区）"></a>buffer（计算缓冲区）</h4><blockquote><p>为给定半径的<code>Feature</code>计算一个缓冲区。支持的单位是英里、公里和度数。</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">geojson</td><td align="left">(FeatureCollection|Geometry|Feature )</td><td align="left">input to be buffered</td></tr><tr><td align="left">radius</td><td align="left">number</td><td align="left">distance to draw the buffer (negative values are allowed)</td></tr><tr><td align="left">options</td><td align="left">Object</td><td align="left">Optional parameters: see below</td></tr></tbody></table><p><strong>options选项</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">units</td><td align="left">string</td><td align="left">kilometers</td><td align="left">any of the options supported by turf units</td></tr><tr><td align="left">steps</td><td align="left">number</td><td align="left">64</td><td align="left">number of steps</td></tr></tbody></table><p><strong>返回</strong></p><p>(FeatureCollection|Feature &lt;(Polygon|MultiPolygon)&gt;|undefined) - buffered features</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> point = turf.<span class="hljs-title function_">point</span>([-<span class="hljs-number">90.548630</span>, <span class="hljs-number">14.616599</span>]);<br><span class="hljs-keyword">var</span> buffered = turf.<span class="hljs-title function_">buffer</span>(point, <span class="hljs-number">500</span>, &#123;<span class="hljs-attr">units</span>: <span class="hljs-string">&#x27;miles&#x27;</span>&#125;);<br></code></pre></td></tr></table></figure><p><code>npm install @turf/buffer</code></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a01bb688c6f74483a33a52aa505a5ec1~tplv-k3u1fbpfcp-watermark.image" alt="image-20210531171448035.png"></p><h4 id="transformTranslate（平移）"><a href="#transformTranslate（平移）" class="headerlink" title="transformTranslate（平移）"></a>transformTranslate（平移）</h4><blockquote><p>在给定的方向角上沿沿恒向线移动指定距离的任何geojson<code>Feature</code>或几何图形。</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">geojson</td><td align="left">GeoJSON</td><td align="left">object to be translated</td></tr><tr><td align="left">distance</td><td align="left">number</td><td align="left">length of the motion; negative values determine motion in opposite direction</td></tr><tr><td align="left">direction</td><td align="left">number</td><td align="left">of the motion; angle from North in decimal degrees, positive clockwise</td></tr><tr><td align="left">options</td><td align="left">Object</td><td align="left">Optional parameters: see below</td></tr></tbody></table><p><strong>options选项</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">units</td><td align="left">string</td><td align="left">kilometers</td><td align="left">in which</td></tr><tr><td align="left">zTranslation</td><td align="left">number</td><td align="left">0</td><td align="left">length of the vertical motion, same unit of distance</td></tr><tr><td align="left">mutate</td><td align="left">boolean</td><td align="left">false</td><td align="left">allows GeoJSON input to be mutated (significant performance increase if true)</td></tr></tbody></table><p><strong>返回</strong></p><p>GeoJSON - the translated GeoJSON object</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> poly = turf.<span class="hljs-title function_">polygon</span>([[[<span class="hljs-number">0</span>,<span class="hljs-number">29</span>],[<span class="hljs-number">3.5</span>,<span class="hljs-number">29</span>],[<span class="hljs-number">2.5</span>,<span class="hljs-number">32</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">29</span>]]]);<br><span class="hljs-keyword">var</span> translatedPoly = turf.<span class="hljs-title function_">transformTranslate</span>(poly, <span class="hljs-number">100</span>, <span class="hljs-number">35</span>);<br></code></pre></td></tr></table></figure><p><code>npm install @turf/transform-translate</code></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ea6705e11a7c4529a5fef7e5e1f09177~tplv-k3u1fbpfcp-watermark.image" alt="image-20210531171535520.png"></p><h3 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h3><h4 id="lineIntersect（计算两端线段相交点）"><a href="#lineIntersect（计算两端线段相交点）" class="headerlink" title="lineIntersect（计算两端线段相交点）"></a>lineIntersect（计算两端线段相交点）</h4><blockquote><p>获取任何<code>LineString</code>或<code>Polygon</code>GeoJSON，并返回相交点。</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">line1</td><td align="left">(Geometry|FeatureCollection|Feature &lt;(LineString|MultiLineString|Polygon|MultiPolygon)&gt;)</td><td align="left">any LineString or Polygon</td></tr><tr><td align="left">line2</td><td align="left">(Geometry|FeatureCollection|Feature &lt;(LineString|MultiLineString|Polygon|MultiPolygon)&gt;)</td><td align="left">any LineString or Polygon</td></tr></tbody></table><p><strong>返回</strong></p><p>FeatureCollection <Point> - point(s) that intersect both</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> line1 = turf.<span class="hljs-title function_">lineString</span>([[<span class="hljs-number">126</span>, -<span class="hljs-number">11</span>], [<span class="hljs-number">129</span>, -<span class="hljs-number">21</span>]]);<span class="hljs-keyword">var</span> line2 = turf.<span class="hljs-title function_">lineString</span>([[<span class="hljs-number">123</span>, -<span class="hljs-number">18</span>], [<span class="hljs-number">131</span>, -<span class="hljs-number">14</span>]]);<span class="hljs-keyword">var</span> intersects = turf.<span class="hljs-title function_">lineIntersect</span>(line1, line2);<br></code></pre></td></tr></table></figure><p><code>npm install @turf/line-intersect</code></p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5aab8d3e07a14080a2062f5c8f7b2700~tplv-k3u1fbpfcp-watermark.image" alt="image-20210531171642600.png"></p><h4 id="mask-返回非遮罩多边形"><a href="#mask-返回非遮罩多边形" class="headerlink" title="mask(返回非遮罩多边形)"></a>mask(返回非遮罩多边形)</h4><blockquote><p>获取任意类型的多边形和一个可选的遮罩，并返回一个带孔的多边形外部环。</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">polygon</td><td align="left">(FeatureCollection|Feature &lt;(Polygon|MultiPolygon)&gt;)</td><td align="left">GeoJSON Polygon used as interior rings or holes.</td></tr><tr><td align="left">mask</td><td align="left">(Feature <Polygon>)</td><td align="left">GeoJSON Polygon used as the exterior ring (if undefined, the world extent is used)</td></tr></tbody></table><p><strong>返回</strong></p><p>Feature <Polygon> - Masked Polygon (exterior ring with holes).</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> polygon = turf.<span class="hljs-title function_">polygon</span>([[[<span class="hljs-number">112</span>, -<span class="hljs-number">21</span>], [<span class="hljs-number">116</span>, -<span class="hljs-number">36</span>], [<span class="hljs-number">146</span>, -<span class="hljs-number">39</span>], [<span class="hljs-number">153</span>, -<span class="hljs-number">24</span>], [<span class="hljs-number">133</span>, -<span class="hljs-number">10</span>], [<span class="hljs-number">112</span>, -<span class="hljs-number">21</span>]]]);<span class="hljs-keyword">var</span> mask = turf.<span class="hljs-title function_">polygon</span>([[[<span class="hljs-number">90</span>, -<span class="hljs-number">55</span>], [<span class="hljs-number">170</span>, -<span class="hljs-number">55</span>], [<span class="hljs-number">170</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">90</span>, <span class="hljs-number">10</span>], [<span class="hljs-number">90</span>, -<span class="hljs-number">55</span>]]]);<span class="hljs-keyword">var</span> masked = turf.<span class="hljs-title function_">mask</span>(polygon, mask);<br></code></pre></td></tr></table></figure><p><code>npm install @turf/mask</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/285a8c794fb1488e810682ae96929526~tplv-k3u1fbpfcp-watermark.image" alt="image-20210531171716436.png"></p><h3 id="JOINS"><a href="#JOINS" class="headerlink" title="JOINS"></a>JOINS</h3><h4 id="pointsWithinPolygon（返回在多边形内的点）"><a href="#pointsWithinPolygon（返回在多边形内的点）" class="headerlink" title="pointsWithinPolygon（返回在多边形内的点）"></a>pointsWithinPolygon（返回在多边形内的点）</h4><blockquote><p>找到落在(多个)多边形内的点。</p></blockquote><p><strong>参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">points</td><td align="left">(Feauture|FeatureCollection <Point>)</td><td align="left">Points as input search</td></tr><tr><td align="left">polygons</td><td align="left">(FeatureCollection|Geometry|Feature &lt;(Polygon|MultiPolygon)&gt;)</td><td align="left">Points must be within these (Multi)Polygon(s)</td></tr></tbody></table><p><strong>返回</strong></p><p>FeatureCollection <Point> - points that land within at least one polygon</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> points = turf.<span class="hljs-title function_">points</span>([    [-<span class="hljs-number">46.6318</span>, -<span class="hljs-number">23.5523</span>],    [-<span class="hljs-number">46.6246</span>, -<span class="hljs-number">23.5325</span>],    [-<span class="hljs-number">46.6062</span>, -<span class="hljs-number">23.5513</span>],    [-<span class="hljs-number">46.663</span>, -<span class="hljs-number">23.554</span>],    [-<span class="hljs-number">46.643</span>, -<span class="hljs-number">23.557</span>]]);<span class="hljs-keyword">var</span> searchWithin = turf.<span class="hljs-title function_">polygon</span>([[    [-<span class="hljs-number">46.653</span>,-<span class="hljs-number">23.543</span>],    [-<span class="hljs-number">46.634</span>,-<span class="hljs-number">23.5346</span>],    [-<span class="hljs-number">46.613</span>,-<span class="hljs-number">23.543</span>],    [-<span class="hljs-number">46.614</span>,-<span class="hljs-number">23.559</span>],    [-<span class="hljs-number">46.631</span>,-<span class="hljs-number">23.567</span>],    [-<span class="hljs-number">46.653</span>,-<span class="hljs-number">23.560</span>],    [-<span class="hljs-number">46.653</span>,-<span class="hljs-number">23.543</span>]]]);<span class="hljs-keyword">var</span> ptsWithin = turf.<span class="hljs-title function_">pointsWithinPolygon</span>(points, searchWithin);<br></code></pre></td></tr></table></figure><p><code>npm install @turf/points-within-polygon</code></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c98c804ab1c84b7a9393477adac8cf52~tplv-k3u1fbpfcp-watermark.image" alt="image-20210531171955477.png"></p><h3 id="BOOLEANS"><a href="#BOOLEANS" class="headerlink" title="BOOLEANS"></a>BOOLEANS</h3><h4 id="booleanPointInPolygon（判断点是否在多边形内）"><a href="#booleanPointInPolygon（判断点是否在多边形内）" class="headerlink" title="booleanPointInPolygon（判断点是否在多边形内）"></a>booleanPointInPolygon（判断点是否在多边形内）</h4><blockquote><p>取一个点和一个多边形或多多边形，并确定该点是否位于该多边形内。多边形可以是凸的，也可以是凹的。</p></blockquote><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">&gt; npm install @turf/boolean-point-in-polygon<br></code></pre></td></tr></table></figure><p><strong>参数</strong></p><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">point</td><td align="left">Coord</td><td align="left">input point</td></tr><tr><td align="left">polygon</td><td align="left">Feature &lt;(Polygon|MultiPolygon)&gt;</td><td align="left">input polygon or multipolygon</td></tr><tr><td align="left">options</td><td align="left">Object</td><td align="left">Optional parameters: see below</td></tr></tbody></table><p><strong>options选项</strong></p><table><thead><tr><th align="left">属性</th><th align="left">类型</th><th align="left">默认值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ignoreBoundary</td><td align="left">boolean</td><td align="left">false</td><td align="left">True if polygon boundary should be ignored when determining if the point is inside the polygon otherwise false.</td></tr></tbody></table><p><strong>返回</strong></p><p>boolean - true if the Point is inside the Polygon; false if the Point is not inside the Polygon</p><p><strong>示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> pt = turf.<span class="hljs-title function_">point</span>([-<span class="hljs-number">77</span>, <span class="hljs-number">44</span>]);<span class="hljs-keyword">var</span> poly = turf.<span class="hljs-title function_">polygon</span>([[  [-<span class="hljs-number">81</span>, <span class="hljs-number">41</span>],  [-<span class="hljs-number">81</span>, <span class="hljs-number">47</span>],  [-<span class="hljs-number">72</span>, <span class="hljs-number">47</span>],  [-<span class="hljs-number">72</span>, <span class="hljs-number">41</span>],  [-<span class="hljs-number">81</span>, <span class="hljs-number">41</span>]]]);turf.<span class="hljs-title function_">booleanPointInPolygon</span>(pt, poly);<span class="hljs-comment">//= true</span><br></code></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><ul><li><p><a href="http://turfjs.org/">官方文档</a></p></li><li><p><a href="https://turfjs.fenxianglu.cn/">Turf.js中文网</a></p></li><li><p><a href="https://www.mapbox.com/blog/turf-gis-for-web-maps/">Turf: GIS for web maps</a> （这个网页里有 mapbox.com 基于 Turf 开发的精美地图……的截图）</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>GIS</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>GIS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【三维GIS可视化】酷炫自定义动态标记你确定不想学会？</title>
    <link href="/2021/05/28/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E9%85%B7%E7%82%AB%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E6%A0%87%E8%AE%B0%E4%BD%A0%E7%A1%AE%E5%AE%9A%E4%B8%8D%E6%83%B3%E5%AD%A6%E4%BC%9A%EF%BC%9F/"/>
    <url>/2021/05/28/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E9%85%B7%E7%82%AB%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E6%80%81%E6%A0%87%E8%AE%B0%E4%BD%A0%E7%A1%AE%E5%AE%9A%E4%B8%8D%E6%83%B3%E5%AD%A6%E4%BC%9A%EF%BC%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a118da518c034d4597b0a9f09d877db4~tplv-k3u1fbpfcp-watermark.image" alt="1.gif"></p><p>前两天在资料中添加了自己的联系方式后，有些小伙伴加了我一起探讨关于Cesium效果及功能的实现，其中有不少人问到这个文本标记是如何实现的，一个个解答费时费力，索性写一篇文章把我实现的思路提供出来，并简单进行类封装，给大家抛砖引玉。</p><h3 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h3><p>本质上其实就是提供一个笛卡尔坐标，将DOM元素渲染到cesium容器中进行呈现。并利用<code>postRender</code>实时地更新位置，保证其与笛卡尔坐标一致。思路其实很简单，接下来我们进行实现。</p><h3 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h3><p>接下来的篇幅会一步一步完善标记点的方法，想直接看成品的小伙伴可以跳到方法实现的最后。</p><h4 id="参数设定"><a href="#参数设定" class="headerlink" title="参数设定"></a>参数设定</h4><p>首先最基本的就是<code>position</code>坐标、<code>title</code>标记内容和<code>id</code>唯一标识，其次我们可以增加一些参数比如说<code>height</code>标记的高度，以及隐藏高度等，可以根据自己的需求添加。</p><h4 id="方法实现"><a href="#方法实现" class="headerlink" title="方法实现"></a>方法实现</h4><p>同样的，首先我们需要生成一个球体做我们标记的容器。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">viewer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Viewer</span>(<span class="hljs-string">&quot;cesiumContainer&quot;</span>, &#123;&#125;);<br></code></pre></td></tr></table></figure><p>然后我们可以构建基础的添加标记点的方法并设定我们想要配置的参数，这里我只设置了基本的参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">addDynamicLabel</span>(<span class="hljs-params">&#123; position, title = <span class="hljs-string">&quot;文本标记&quot;</span>, id = <span class="hljs-string">&quot;0&quot;</span> &#125;</span>) &#123;<br><span class="hljs-comment">// ……Do SomeThing</span><br>&#125;,<br></code></pre></td></tr></table></figure><p>我们需要动态创建一个div作为标记点，并对其设置样式和内容，并将其添加到球体所在的容器中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">addDynamicLabel</span>(<span class="hljs-params">&#123; position, title = <span class="hljs-string">&quot;文本标记&quot;</span>, id = <span class="hljs-string">&quot;0&quot;</span> &#125;</span>) &#123;<br><span class="hljs-keyword">let</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    div.<span class="hljs-property">id</span> = id;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;absolute&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;100px&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&quot;30px&quot;</span>;<br>    <span class="hljs-keyword">let</span> divHTML = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;div style=&quot;width:100px;height:30px;background:rgba(255,122,0,0.4)&quot;&gt;<span class="hljs-subst">$&#123;title&#125;</span>&lt;/div&gt;</span><br><span class="hljs-string">    `</span>;<br>    div.<span class="hljs-property">innerHTML</span> = divHTML;<br>    viewer.<span class="hljs-property">cesiumWidget</span>.<span class="hljs-property">container</span>.<span class="hljs-title function_">appendChild</span>(div);<br>&#125;,<br></code></pre></td></tr></table></figure><p>现在我们已经把这个标记放到页面中了，虽然是绝对定位，但它并没有对应的<code>top</code>和<code>left</code>值，无法显示在我们想让它出现在的位置。接下来我们需要做的就是根据传入的坐标转换成屏幕的<code>x,y</code>作为标记的偏移量。Cesium提供了一个<code>Cesium.SceneTransforms.wgs84ToWindowCoordinates()</code>的方法供我们进行转换。</p><blockquote><p> Cesium.SceneTransforms.wgs84ToWindowCoordinates(scene, position, result) → Cartesian2</p></blockquote><blockquote><p>将WGS84坐标中的位置转换为窗口坐标。 这通常用于将HTML元素与场景中的对象放置在相同的屏幕位置。</p></blockquote><blockquote><table><thead><tr><th align="left">参数</th><th align="left">类型</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><code>scene</code></td><td align="left"><a href="http://support.supermap.com.cn:8090/webgl/docs/Documentation/Scene.html">Scene</a></td><td align="left">The scene.</td></tr><tr><td align="left"><code>position</code></td><td align="left"><a href="http://support.supermap.com.cn:8090/webgl/docs/Documentation/Cartesian3.html">Cartesian3</a></td><td align="left">WGS84（世界）坐标中的位置。</td></tr><tr><td align="left"><code>result</code></td><td align="left"><a href="http://support.supermap.com.cn:8090/webgl/docs/Documentation/Cartesian2.html">Cartesian2</a></td><td align="left"><code>optional</code> 返回转换为窗口坐标的输入位置的可选对象。</td></tr></tbody></table></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">addDynamicLabel</span>(<span class="hljs-params">&#123; position, title = <span class="hljs-string">&quot;文本标记&quot;</span>, id = <span class="hljs-string">&quot;0&quot;</span> &#125;</span>) &#123;<br><span class="hljs-keyword">let</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    div.<span class="hljs-property">id</span> = id;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;absolute&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;100px&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&quot;30px&quot;</span>;<br>    <span class="hljs-keyword">let</span> divHTML = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;div style=&quot;width:100px;height:30px;background:rgba(255,122,0,0.4)&quot;&gt;<span class="hljs-subst">$&#123;title&#125;</span>&lt;/div&gt;</span><br><span class="hljs-string">    `</span>;<br>    div.<span class="hljs-property">innerHTML</span> = divHTML;<br>    viewer.<span class="hljs-property">cesiumWidget</span>.<span class="hljs-property">container</span>.<span class="hljs-title function_">appendChild</span>(div);<br>    <br>    <span class="hljs-keyword">let</span> vmPosition = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(<br>        position[<span class="hljs-number">0</span>],<br>        position[<span class="hljs-number">1</span>],<br>        <span class="hljs-number">500</span><br>    );<br>    <span class="hljs-keyword">const</span> canvasHeight = viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>;<br>    <span class="hljs-keyword">const</span> windowPosition = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian2</span>();<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">SceneTransforms</span>.<span class="hljs-title function_">wgs84ToWindowCoordinates</span>(<br>        viewer.<span class="hljs-property">scene</span>,<br>        vmPosition,<br>        windowPosition<br>    );<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">bottom</span> = canvasHeight - windowPosition.<span class="hljs-property">y</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>    <span class="hljs-keyword">const</span> elWidth = div.<span class="hljs-property">offsetWidth</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = windowPosition.<span class="hljs-property">x</span> - elWidth / <span class="hljs-number">2</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>&#125;,<br></code></pre></td></tr></table></figure><p>现在我们的标记点已经能够显示在正确的位置了，但是如果我们拖拽或放大缩小球体会发现，标记点它没动！这显然是不对的，标记点应该跟随球体的移动放缩而修改位置。这里简单说一下Cesium的渲染机制，在Cesium内部构建了一个定时器，用来不断的刷新并渲染页面，具体代码在<code>CesiumWidget.js</code>里，这里不赘述了……（其实是因为我没仔细的看过源码）。看了Cesium的机制后我们知道，想让标记跟随球体移动，就需要让标记也不断的刷新渲染。Cesium很贴心的为我们准备了<code>scene.postRender</code>，获取当前场景每帧渲染结束时的事件，监听该事件在每帧渲染结束时触发。我们只要对它进行事件监听就能够获取到每帧的事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">addDynamicLabel</span>(<span class="hljs-params">&#123; position, title = <span class="hljs-string">&quot;文本标记&quot;</span>, id = <span class="hljs-string">&quot;0&quot;</span> &#125;</span>) &#123;<br>    <span class="hljs-keyword">let</span> div = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;div&quot;</span>);<br>    div.<span class="hljs-property">id</span> = id;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">position</span> = <span class="hljs-string">&quot;absolute&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">width</span> = <span class="hljs-string">&quot;100px&quot;</span>;<br>    div.<span class="hljs-property">style</span>.<span class="hljs-property">height</span> = <span class="hljs-string">&quot;30px&quot;</span>;<br>    <span class="hljs-keyword">let</span> divHTML = <span class="hljs-string">`</span><br><span class="hljs-string">&lt;div style=&quot;width:100px;height:30px;background:rgba(255,122,0,0.4)&quot;&gt;<span class="hljs-subst">$&#123;title&#125;</span>&lt;/div&gt;</span><br><span class="hljs-string">`</span>;<br>    div.<span class="hljs-property">innerHTML</span> = divHTML;<br>    viewer.<span class="hljs-property">cesiumWidget</span>.<span class="hljs-property">container</span>.<span class="hljs-title function_">appendChild</span>(div);<br>    <span class="hljs-keyword">let</span> vmPosition = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(<br>        position[<span class="hljs-number">0</span>],<br>        position[<span class="hljs-number">1</span>],<br>        <span class="hljs-number">500</span><br>    );<br>    viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">postRender</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">const</span> canvasHeight = viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>;<br>        <span class="hljs-keyword">const</span> windowPosition = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian2</span>();<br>        <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">SceneTransforms</span>.<span class="hljs-title function_">wgs84ToWindowCoordinates</span>(<br>            viewer.<span class="hljs-property">scene</span>,<br>            vmPosition,<br>            windowPosition<br>        );<br>        div.<span class="hljs-property">style</span>.<span class="hljs-property">bottom</span> = canvasHeight - windowPosition.<span class="hljs-property">y</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>        <span class="hljs-keyword">const</span> elWidth = div.<span class="hljs-property">offsetWidth</span>;<br>        div.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = windowPosition.<span class="hljs-property">x</span> - elWidth / <span class="hljs-number">2</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>    &#125;, <span class="hljs-variable language_">this</span>);<br>&#125;,<br></code></pre></td></tr></table></figure><p>方法构建完毕，我们只需要调用一下就可以看到我们的标记点已经出现在球体上了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> position = [<span class="hljs-number">121.54035</span>, <span class="hljs-number">38.92146</span>],<br>    title = <span class="hljs-string">&quot;moe的标记&quot;</span>,<br>    id = <span class="hljs-number">210204121</span>;<br><span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addDynamicLabel</span>(&#123; position, title, id &#125;);<br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c7ce4e5f7c40483bb1a51eb366e4dd81~tplv-k3u1fbpfcp-watermark.image" alt="动画.gif"></p><p>到这里其实基本的功能我们已经实现了，标记的样式我们可以自己变得酷炫，像我开头的动图那样。</p><h4 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h4><p>在业务中可能很多地方都用到这个标记，最好的办法就是将它封装成一个插件文件即插即用。下面我们尝试把这个功能单独抽出来封装成类。这里我们使用<code>es6</code>的<code>class</code>进行封装。因为最开始我自己摸索封装的时候走了很多弯路，所以我想封装类这里也简单讲一下，以后大家做别的功能的时候也可以举一反三。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@descripion</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Viewer</span>&#125; <span class="hljs-variable">viewer</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Cartesian2</span>&#125; <span class="hljs-variable">position</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; <span class="hljs-variable">title</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; <span class="hljs-variable">id</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">boolean</span>&#125; isHighHidden 是否高度隐藏</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicLabel</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">&#123;viewer , position , height , title , id , isHighHidden = <span class="hljs-literal">true</span>&#125;</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span> = viewer;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> = height;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHighHidden</span> = isHighHidden;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span> = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(<br>          position[<span class="hljs-number">0</span>],<br>          position[<span class="hljs-number">1</span>],<br>          height<br>        );<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addLabel</span>();<br>    &#125;<br>    <span class="hljs-title function_">addLabel</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-title function_">addPostRender</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>    <span class="hljs-title function_">postRender</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正常情况下这样我们就大功告成了，但我们加载DOM的方式显得太过粗鲁，而且不好维护，不能每次我们都通过<code>innerHTML</code>填充DOM元素或在字符串内去对内容及样式进行修改。这时候我们就可以使用<code>Vue.extend</code> + <code>$mount</code>构造器来创建一个”子类”了。这个方法也是我看过别人的开源代码后豁然开朗的，没想到还能这么用！长知识了。</p><p>我们首先创建一个vue文件<code>label.vue</code>，并把我们的标记样式什么的都写进去：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>  &lt;div :id=&quot;id&quot; class=&quot;divlabel-container&quot; v-if=&quot;show&quot; &gt;<br>    &lt;div class=&quot;animate-maker-border&quot;&gt;<br>      &lt;span class=&quot;animate-marker__text&quot;&gt;&#123;&#123; title &#125;&#125;&lt;/span&gt;<br>    &lt;/div&gt;<br>  &lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;script&gt;<br>export default &#123;<br>  name: &quot;DynamicLabel&quot;,<br>  data() &#123;<br>    return &#123;<br>      show: true,<br>    &#125;;<br>  &#125;,<br>  props: &#123;<br>    title: &#123;<br>      type: String,<br>      default: &quot;标题&quot;,<br>    &#125;,<br>    id:&#123;<br>        type:String,<br>        default:&#x27;001&#x27;<br>    &#125;<br>  &#125;,<br>&#125;;<br>&lt;/script&gt;<br><br><br>&lt;style lang=&quot;scss&quot;&gt;<br>.divlabel-container &#123;<br>  position: absolute;<br>  left: 0;<br>  bottom: 0;<br>  pointer-events: none;<br>  cursor: pointer;<br>&#125;<br>.animate-maker-border &#123;<br>  width: 150px;<br>  height: 30px;<br>  margin: 0;<br>  color: #f7ea00;<br>  box-shadow: inset 0 0 0 1px rgba(247, 234, 0, 0.56);<br>&#125;<br>.animate-marker__text &#123;<br>  color: #fff;<br>  font-size: 14px;<br>  display: flex;<br>  width: 100%;<br>  height: 100%;<br>  align-items: center;<br>  justify-content: center;<br>  font-weight: bolder;<br>  user-select: none;<br>  cursor: pointer;<br>  background: rgba(0, 173, 181, 0.32);<br>&#125;<br>&lt;/style&gt;<br></code></pre></td></tr></table></figure><p>接下来改造我们封装的<code>DynamicLabel</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@descripion</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Viewer</span>&#125; <span class="hljs-variable">viewer</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">Cartesian2</span>&#125; <span class="hljs-variable">position</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; <span class="hljs-variable">title</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">String</span>&#125; <span class="hljs-variable">id</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &#123;<span class="hljs-type">boolean</span>&#125; isHighHidden 是否高度隐藏</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> &#123;<span class="hljs-type">*</span>&#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Label</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./label.vue&quot;</span>;<br><span class="hljs-keyword">let</span> <span class="hljs-title class_">WindowVm</span> = <span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">extend</span>(<span class="hljs-title class_">Label</span>);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DynamicLabel</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params">&#123;viewer , position , height , title , id , isHighHidden = <span class="hljs-literal">true</span>&#125;</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span> = viewer;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> = height;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHighHidden</span> = isHighHidden;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span> = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(<br>          position[<span class="hljs-number">0</span>],<br>          position[<span class="hljs-number">1</span>],<br>          height<br>        );<br>        <br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">vmInstance</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowVm</span>(&#123;<br>          <span class="hljs-attr">propsData</span>: &#123;<br>            title,<br>            id<br>          &#125;<br>        &#125;).$mount(); <span class="hljs-comment">//根据模板创建一个面板</span><br>        viewer.<span class="hljs-property">cesiumWidget</span>.<span class="hljs-property">container</span>.<span class="hljs-title function_">appendChild</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">vmInstance</span>.<span class="hljs-property">$el</span>); <span class="hljs-comment">//将字符串模板生成的内容添加到DOM上</span><br>    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addPostRender</span>();<br>    &#125;<br>    <br>  <span class="hljs-comment">//添加场景事件</span><br>  <span class="hljs-title function_">addPostRender</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">postRender</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">postRender</span>, <span class="hljs-variable language_">this</span>);<br>  &#125;<br><br>  <span class="hljs-comment">//场景渲染事件 实时更新窗口的位置 使其与笛卡尔坐标一致</span><br>  <span class="hljs-title function_">postRender</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-variable language_">this</span>.<span class="hljs-property">vmInstance</span>.<span class="hljs-property">$el</span> || !<span class="hljs-variable language_">this</span>.<span class="hljs-property">vmInstance</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">style</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">const</span> canvasHeight = <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>.<span class="hljs-property">height</span>;<br>    <span class="hljs-keyword">const</span> windowPosition = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian2</span>();<br>    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">SceneTransforms</span>.<span class="hljs-title function_">wgs84ToWindowCoordinates</span>(<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">scene</span>,<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">position</span>,<br>      windowPosition<br>    );<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">vmInstance</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">style</span>.<span class="hljs-property">bottom</span> =<br>      canvasHeight - windowPosition.<span class="hljs-property">y</span> + <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>    <span class="hljs-keyword">const</span> elWidth = <span class="hljs-variable language_">this</span>.<span class="hljs-property">vmInstance</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">offsetWidth</span>;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">vmInstance</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = windowPosition.<span class="hljs-property">x</span> - elWidth / <span class="hljs-number">2</span> + <span class="hljs-string">&quot;px&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">viewer</span>.<span class="hljs-property">camera</span>.<span class="hljs-property">positionCartographic</span>.<span class="hljs-property">height</span> &gt; <span class="hljs-number">4000</span> &amp;&amp;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">isHighHidden</span><br>    ) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">vmInstance</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">vmInstance</span>.<span class="hljs-property">$el</span>.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;block&quot;</span>;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>大功告成，现在看这个类是不是十分的清爽，关于<code>Vue.extend</code>的相关原理及操作我这里不多说明，大家可以百度。我在场景渲染方法中通过<code>this.viewer.camera.positionCartographic.height</code>添加了一个判断当前相机高度来决定标签是否显示，让这个插件更灵活。</p><p>最后我们只需要在我们的页面文件中引入并调用，就可以出现和之前方法实现中一样的效果啦~</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-title class_">DynamicLabel</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./plugins/DynamicLabel&#x27;</span><br><br><span class="hljs-title function_">addDynamicLabel</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> label = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DynamicLabel</span>(&#123;<br>        viewer, <br>        <span class="hljs-attr">position</span>:[<span class="hljs-number">121.54035</span>, <span class="hljs-number">38.92146</span>] ,<br>        <span class="hljs-attr">height</span>:<span class="hljs-number">500</span>,<br>        <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;moe的标签&#x27;</span>,<br>        <span class="hljs-attr">id</span>:<span class="hljs-string">&#x27;210201025&#x27;</span> <br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>这篇文章我们通过一个简单的文本标记提供了一个在Cesium场景中对指定功能进行实现以及封装成类的思路，其实很多的功能都可以像这样进行封装，比如自定义弹窗、雷达扫描效果、前一篇文章中的网格渲染，沿线飞行等。只要我们将基本的思路理清，其实都不难。或者可以像我一样，先用方法实现出功能，再一步一步得对其进行封装和暴露。觉得有帮助的兄弟可以点个👍关注一下专栏，Cesium和GIS相关的文章我都会收录进去。</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>GIS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【三维GIS可视化】基于Vue+Cesium+Supermap实现智慧城市（四）</title>
    <link href="/2021/05/23/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <url>/2021/05/23/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前三篇中我们已经能够实现加载地球、加载地图、加载点线面的效果。基本知识也相应介绍过，接下来的文章主要偏重的可能是某个功能的具体实现或某种样式的具体实现。欢迎大家评论区进行讨论。</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>  国家现在大力推行网格化管理，各地也基于网格化管理诞生了很多系统，现如今智慧城市或数字城市中，必不可少的功能就是网格展示及相关功能。今天我们就网格相关的样式和操作来复习一下关于面<code>polygon</code>的点击操作。同样的，行政区划也可以利用这样的效果和操作进行下沉。</p><p>  我们先来看一下效果，实现了面的渐变填充样式，鼠标悬浮效果、点击效果。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aade526c35914ce4b319be056980283b~tplv-k3u1fbpfcp-watermark.image" alt="grid.gif"></p><h3 id="思路及实现"><a href="#思路及实现" class="headerlink" title="思路及实现"></a>思路及实现</h3><p>我们想要实现面的点击、悬浮效果以及样式的修改。需要用到的基本上就是Cesium的<code>ScreenSpaceEventHandler</code>来监听鼠标的操作，而样式修改可能会对填充图片或者<code>material</code>进行处理。好了，既然想到了如何实现我们就开始动手吧！</p><h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><p>网格实质上也是面，所以我们需要首先有网格的面数据，我们可以去 <a href="http://datav.aliyun.com/tools/atlas/#&lat=30.332329214580188&lng=106.72278672066881&zoom=3.5">DataV.Geoatlas</a>地图中获取面的geojson数据。这里我们采用北京市的行政区划数据,地址我这里贴出来，想寻找其他数据的小伙伴可以自行寻找。</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">https://geo.datav.aliyun.com/areas_v2/bound/110000_full.json<br></code></pre></td></tr></table></figure><h4 id="加载geoJSON格式数据"><a href="#加载geoJSON格式数据" class="headerlink" title="加载geoJSON格式数据"></a>加载geoJSON格式数据</h4><p>利用Cesium的<code>GeoJsonDataSource</code>来加载geoJSON数据，注意：它返回的是一个promise对象，所以接收时需要使用<code>.then(cb)</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> promise=<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">GeoJsonDataSource</span>.<span class="hljs-title function_">load</span>(<span class="hljs-string">&#x27;https://geo.datav.aliyun.com/areas_v2/bound/110000_full.json&#x27;</span>)<br>promise.<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">datasource</span>) =&gt;</span> &#123;<br>    viewer.<span class="hljs-property">dataSources</span>.<span class="hljs-title function_">add</span>(datasource);<br>    <span class="hljs-keyword">var</span> entities = datasource.<span class="hljs-property">entities</span>.<span class="hljs-property">values</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; entities.<span class="hljs-property">length</span>; i++)&#123;<br>      <span class="hljs-keyword">var</span> entity = entities[i];<br>      entity.<span class="hljs-property">polygon</span>.<span class="hljs-property">material</span> = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">RED</span>;<br>      entity.<span class="hljs-property">polygon</span>.<span class="hljs-property">extrudedHeight</span> = <span class="hljs-number">100</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>在这里我们看到datasource就是我们通过url获取到的数据集，加载完毕后我们需要通过循环数据集中的实体集来对每一个实体进行样式的修改，这里我们暂时设置了它的颜色为红色，拉伸高度为100。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4e9e1de45ba445880effd74e7769dab~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>可以看到我们的带有高度的面已经渲染出来了，接下来我们可以思考一下如何变成我们最开始的效果图那样半透明渐变的呢？</p><h4 id="polygon样式修改"><a href="#polygon样式修改" class="headerlink" title="polygon样式修改"></a><code>polygon</code>样式修改</h4><p>我们知道，<code>entity</code>是通过<code>matrial</code>材质进行样式的修改。透明度我们可以通过<code>Cesium.Color</code>自带的<code>withAlpha</code>进行修改，但我们想呈现出的效果是区域渐变加透明，我当时的第一想法是既然<code>material</code>可以加载图片，那我们能不能用一张区域渐变的图片对它进行填充呢？结论是可以的。我们只需要<code>           entity.polygon.material = require(&#39;./images/color.jpg&#39;);</code>就可以利用图片填充。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9c1500f8080d4aa3b4f7458f7a931c3c~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>这时候你可能会说，这就好办了，把图片变成半透明的不就实现了吗。这有什么难的。对，但是我们思考一下，如果这时候客户说：不行，这个颜色不好看，给我多换几个我看看效果，你该怎么办？做好几张图片挨个替换吗，这未免也太麻烦了吧。所以我们需要一个能够指定颜色并快速生成图片的方式供我们使用。<code>canvas</code>这时候站出来了，利用<code>canvas</code>，我们可以使用代码来快生成指定样式的图片，这不比制图快多了。</p><p><code>canvas</code>关于渐变、角度的知识在这就不介绍了，网上比比皆是，我们直接通过代码讲解。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title function_">getColorRamp</span>(<span class="hljs-params">rampColor,centerColor</span>) &#123;<br>    <span class="hljs-keyword">var</span> ramp = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;canvas&quot;</span>);<br>    ramp.<span class="hljs-property">width</span> = <span class="hljs-number">50</span>;<br>    ramp.<span class="hljs-property">height</span> = <span class="hljs-number">50</span>;<br>    <span class="hljs-keyword">var</span> ctx = ramp.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br><br>    <span class="hljs-keyword">var</span> grd = ctx.<span class="hljs-title function_">createRadialGradient</span>(<span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">0</span>, <span class="hljs-number">25</span>, <span class="hljs-number">25</span>, <span class="hljs-number">50</span>);<br>    grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>, centerColor); <span class="hljs-comment">// &quot;rgba(255,255,255,0)&quot;</span><br>    grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>, rampColor);<br><br>    ctx.<span class="hljs-property">fillStyle</span> = grd;<br>    ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>);<br><br>    <span class="hljs-comment">// return ramp;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ImageMaterialProperty</span>(&#123;<br>      <span class="hljs-attr">image</span>: ramp,<br>      <span class="hljs-attr">transparent</span>: <span class="hljs-literal">true</span><br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到我们封装了一个函数，入参是渐变两端的颜色（当然如果你的需求中需要改变角度、方向等可以自定义参数），生成一个<code>50*50</code>的canvas画布，<code>createRadialGradient</code>创建一个渐变对象，规定渐变颜色和位置，绘制到画布上，最后返回一个Cesium的<code>ImageMaterialProperty</code>图片材质类，记得配置<code>transparent</code>为<code>true</code>。</p><p>这样我们就可以自定义颜色来生成半透明渐变效果的材质了，看效果！</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/75a5a24c5f554b798c3fb2c8f8eb2320~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>边缘的黄线是面的<code>outline</code>，我们可以将其设置为<code>null</code>以展示更好效果。</p><h4 id="鼠标悬浮及点击事件"><a href="#鼠标悬浮及点击事件" class="headerlink" title="鼠标悬浮及点击事件"></a>鼠标悬浮及点击事件</h4><p>我们想实现的效果为点击高亮和鼠标移入时面外围有动效线的效果，其实很简单，也就是我们点击这个面的时候获取到这个面，改变这个面的材质，利用这个面的外围坐标集生成一个<code>polyline</code>，添加动态线的材质。现在我们来看看代码吧。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs js">handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ScreenSpaceEventHandler</span>(viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>);<br>handler.<span class="hljs-title function_">setInputAction</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">var</span> pick = viewer.<span class="hljs-property">scene</span>.<span class="hljs-title function_">pick</span>(e.<span class="hljs-property">position</span>);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Cesium</span>.<span class="hljs-title function_">defined</span>(pick) &amp;&amp; pick.<span class="hljs-property">id</span>) &#123;<br>    <span class="hljs-keyword">var</span> feature = pick.<span class="hljs-property">id</span>;<br>    viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">removeById</span>(<span class="hljs-string">&quot;select_grid&quot;</span>);<br>    viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">removeById</span>(<span class="hljs-string">`line_<span class="hljs-subst">$&#123;feature.id&#125;</span>`</span>);<br>    <span class="hljs-keyword">let</span> positions = feature.<span class="hljs-property">polygon</span>.<span class="hljs-property">hierarchy</span>.<span class="hljs-title function_">getValue</span>(<br>        <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">now</span>()<br>    ).<span class="hljs-property">positions</span>;<br>    viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;select_grid&quot;</span>,<br>    <span class="hljs-attr">polygon</span>: &#123;<br>      <span class="hljs-attr">hierarchy</span>: positions,<br>      <span class="hljs-attr">material</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getColorRamp</span>(<br>        <span class="hljs-string">&quot;rgba(0, 255, 255,1)&quot;</span>,<br>        <span class="hljs-string">&quot;rgba(255,0,0,0.3)&quot;</span><br>      ),<br>      <span class="hljs-attr">height</span>: <span class="hljs-number">499</span>,<br>    &#125;,<br>    &#125;);<br>  &#125;<br>&#125;, <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ScreenSpaceEventType</span>.<span class="hljs-property">LEFT_CLICK</span>);<br><br>handler.<span class="hljs-title function_">setInputAction</span>(<span class="hljs-function">(<span class="hljs-params">movement</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> pickFeature =<br>      viewer.<span class="hljs-property">scene</span>.<span class="hljs-title function_">pick</span>(movement.<span class="hljs-property">endPosition</span>) &amp;&amp;<br>      viewer.<span class="hljs-property">scene</span>.<span class="hljs-title function_">pick</span>(movement.<span class="hljs-property">endPosition</span>).<span class="hljs-property">id</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title class_">Cesium</span>.<span class="hljs-title function_">defined</span>(pickFeature) &amp;&amp; <span class="hljs-variable language_">this</span>.<span class="hljs-property">preLineId</span> !== pickFeature.<span class="hljs-property">id</span>) &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">preLineId</span> &amp;&amp;viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">removeById</span>(<span class="hljs-string">`line_<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.preLineId&#125;</span>`</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">preLineId</span> = pickFeature.<span class="hljs-property">id</span>;<br>      viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>        <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;line_&quot;</span> + pickFeature.<span class="hljs-property">id</span>,<br>        <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;line_&quot;</span> + pickFeature.<span class="hljs-property">name</span>,<br>        <span class="hljs-attr">polyline</span>: &#123;<br>          <span class="hljs-attr">positions</span>: pickFeature.<span class="hljs-property">polygon</span>.<span class="hljs-property">hierarchy</span>.<span class="hljs-title function_">getValue</span>(<br>            <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">JulianDate</span>.<span class="hljs-title function_">now</span>()<br>          ).<span class="hljs-property">positions</span>,<br>          <span class="hljs-attr">width</span>: <span class="hljs-number">8</span>,<br>          <span class="hljs-attr">material</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PolylineTrailMaterialProperty</span>(&#123;<br>            <span class="hljs-comment">// 尾迹线材质</span><br>            <span class="hljs-attr">color</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">AQUA</span>,<br>            <span class="hljs-attr">trailLength</span>: <span class="hljs-number">0.9</span>,<br>            <span class="hljs-attr">period</span>: <span class="hljs-number">1</span>,<br>          &#125;),<br>        &#125;,<br>      &#125;);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">preLineId</span> &amp;&amp; viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">removeById</span>(<span class="hljs-string">`line_<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.preLineId&#125;</span>`</span>);<br>      <span class="hljs-variable language_">this</span>.<span class="hljs-property">preLineId</span> = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;, <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ScreenSpaceEventType</span>.<span class="hljs-property">MOUSE_MOVE</span>);<br></code></pre></td></tr></table></figure><p>效果：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c23f4fb6f1704739b9a1ddf1a1cb8eaf~tplv-k3u1fbpfcp-watermark.image" alt="6.gif"></p><p>其实总结一下就是获取到当前鼠标位置下的<code>entity</code>，根据面的外围坐标集生成一个新的面和新的线，添加到球体上。就是先我们的效果了。</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【三维GIS可视化】基于Vue+Cesium+Supermap实现智慧城市（三）</title>
    <link href="/2021/05/05/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2021/05/05/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">                                    FBI  WARNING！                                    五一假期已结束               不知道xdm都去哪里玩了？给点游玩的建议，我十一假期参考一下啊哈哈……</code></pre><blockquote><p>复习一下，上一篇我们首先讲了地图上的几大要素，包括点线面，然后了解了二维地图、三维地图中所使用的几大坐标系及其转换方式，最后大致讲了Cesium中的Viewer实体和Camera实体，对应着窗口和摄像机。接下来我们就进行实操，了解如何将点线面要素添加到我们的地球上。如果文章中有错误的话欢迎评论区指出，定当虚心请教并及时修改！</p></blockquote><h3 id="Entity实体"><a href="#Entity实体" class="headerlink" title="Entity实体"></a>Entity实体</h3><hr><p>在Cesium中，有几种添加实体的方式，例如利用Entity添加，以及Primitive添加。后者更接近渲染引擎底层所以今天先不介绍。Cesium中利用Entity可以添加许多形状：点、线、面、管道、圆柱体等等，在Cesium官网的<a href="https://sandcastle.cesium.com/index.html?src=Box.html&label=Geometries">Sandcastle</a>中都有对应的例子，有需要的可以自行查看。</p><h4 id="点Billboard"><a href="#点Billboard" class="headerlink" title="点Billboard"></a>点<code>Billboard</code></h4><p>在Cesium中，点的是通过<code>Billboard</code>的方式呈现的，顾名思义就是广告牌。<code>Billboard</code>会在指定坐标位置生成一个面朝屏幕的指定图片。话不多说，我们通过代码来了解一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js">viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>    <span class="hljs-attr">position</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(<span class="hljs-number">121.54035</span>, <span class="hljs-number">38.92146</span>,<span class="hljs-number">100</span>),<br>    <span class="hljs-attr">billboard</span>: &#123;<br>      <span class="hljs-attr">image</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;@/views/images/blueCamera.png&quot;</span>), <span class="hljs-comment">// default: undefined</span><br>      <span class="hljs-attr">show</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// default</span><br>      <span class="hljs-attr">pixelOffset</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian2</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">50</span>), <span class="hljs-comment">// default: (0, 0)</span><br>      <span class="hljs-attr">eyeOffset</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartesian3</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>), <span class="hljs-comment">// default</span><br>      <span class="hljs-attr">horizontalOrigin</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">HorizontalOrigin</span>.<span class="hljs-property">CENTER</span>, <span class="hljs-comment">// default</span><br>      <span class="hljs-attr">verticalOrigin</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">VerticalOrigin</span>.<span class="hljs-property">BOTTOM</span>, <span class="hljs-comment">// default: CENTER</span><br>      <span class="hljs-attr">scale</span>: <span class="hljs-number">2.0</span>, <span class="hljs-comment">// default: 1.0</span><br>      <span class="hljs-attr">color</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">LIME</span>, <span class="hljs-comment">// default: WHITE</span><br>      <span class="hljs-attr">rotation</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-property">PI_OVER_FOUR</span>, <span class="hljs-comment">// default: 0.0</span><br>      <span class="hljs-attr">alignedAxis</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-property">ZERO</span>, <span class="hljs-comment">// default</span><br>      <span class="hljs-attr">width</span>: <span class="hljs-number">100</span>, <span class="hljs-comment">// default: undefined</span><br>      <span class="hljs-attr">height</span>: <span class="hljs-number">25</span>, <span class="hljs-comment">// default: undefined</span><br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>可以看到在这里我们用了<code>Viewer</code>下<code>entities</code>下的一个方法<code>add</code>，entity通过这个方法添加到<code>viewer</code>内。</p><p>我在坐标转换的时候给了它一点高程值，以便显示的更完整。效果如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/773e0178f68546a8b6b41bba82392299~tplv-k3u1fbpfcp-watermark.image" alt="1.gif"></p><h4 id="线Polyline"><a href="#线Polyline" class="headerlink" title="线Polyline"></a>线<code>Polyline</code></h4><p>同<code>Billboard</code>一样，线也是通过<code>viewer.add()</code>方法进行添加的。接下来先放代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js">viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>        <span class="hljs-comment">// name:entity.name,</span><br>    <span class="hljs-attr">polyline</span>: &#123;<br>      <span class="hljs-attr">positions</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>([<span class="hljs-number">121.534575</span>,<span class="hljs-number">38.926131</span>, <span class="hljs-number">121.537579</span>,<span class="hljs-number">38.92543</span>,<span class="hljs-number">121.541784</span>,<span class="hljs-number">38.924578</span>,<span class="hljs-number">121.543973</span>,<span class="hljs-number">38.924144</span>,<span class="hljs-number">121.545947</span>,<span class="hljs-number">38.923944</span>]),<br>      <span class="hljs-attr">width</span>: <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">material</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">DARKORANGE</span>.<span class="hljs-title function_">withAlpha</span>(<span class="hljs-number">0.7</span>),<br>      <span class="hljs-comment">// clampToGround: true,</span><br>      <span class="hljs-comment">// show: true,</span><br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>positions</code>需要一个笛卡尔做表集用来绘制线，<code>width</code>是线宽，<code>material</code>是线的材质（它就是我们生成动效线的关键），<code>clamToGround</code>是选择线是否贴地渲染，在有地形的底图上贴地模式会贴着地形起伏进行绘制，而绝对高度则会穿过地形，最后的<code>show</code>就是是否显示了。</p><p>基本效果（为了显示效果好，换了一个深色底图）</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/467e77a280b34a81a5fb67d62c2373b7~tplv-k3u1fbpfcp-watermark.image" alt="2.gif"></p><p>这时候你可能就说了，这个线也太丑了吧，我看人家的线都是那种发光的（你说的是奥特曼吗？这个世界上真的有奥特曼吗？）。别急，接下来我提供一种实现发光的思路，当然思路不仅于此，感兴趣的小伙伴可以多上网搜搜。上代码！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在上边添加过的线基础上我们再添加一条动效线</span><br>viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>        <span class="hljs-comment">// name:entity.name,</span><br>    <span class="hljs-attr">polyline</span>: &#123;<br>      <span class="hljs-attr">positions</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>([<br>        <span class="hljs-number">121.534575</span>,<br>        <span class="hljs-number">38.926131</span>,<br>        <span class="hljs-number">121.537579</span>,<br>        <span class="hljs-number">38.92543</span>,<br>        <span class="hljs-number">121.541784</span>,<br>        <span class="hljs-number">38.924578</span>,<br>        <span class="hljs-number">121.543973</span>,<br>        <span class="hljs-number">38.924144</span>,<br>        <span class="hljs-number">121.545947</span>,<br>        <span class="hljs-number">38.923944</span>,<br>      ]),<br>      <span class="hljs-attr">width</span>: <span class="hljs-number">4</span>, <span class="hljs-comment">// 线的宽度，像素为单位</span><br>      <span class="hljs-attr">material</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PolylineTrailMaterialProperty</span>(&#123;<br>        <span class="hljs-comment">// 尾迹线材质</span><br>        <span class="hljs-attr">color</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">GOLD</span>,<br>        <span class="hljs-attr">trailLength</span>: <span class="hljs-number">0.4</span>,<br>        <span class="hljs-attr">period</span>: <span class="hljs-number">3.0</span>,<br>      &#125;),<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>效果如下</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/26b83bdb5dc742c0ae0dc4f028bd11a2~tplv-k3u1fbpfcp-watermark.image" alt="3.gif"></p><p>一条线看着效果感觉还好，但是如果是下边这种路网效果其实是不错的。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a7041548c9144548916d2bd990ff272~tplv-k3u1fbpfcp-watermark.image" alt="4.gif"></p><p>相信聪明的小伙伴已经发现了，诶你添加点，线用的都是add方法而且传递的参数结构基本上都是一个<code>position</code>和一个对应的实体配参。不错，其实我们可以基于这样的结构自己封装一个<code>Entity</code>对象，后续二次进行实体的绘制类和编辑类，这里就不进行说明了。</p><h4 id="面Polygon"><a href="#面Polygon" class="headerlink" title="面Polygon"></a>面<code>Polygon</code></h4><p>上边那个图其实已经向我们展示了面元素，你肯定会认为我说的是那个绿色的区域，格局小了！其实那些楼房本质上也是一个个面，只不过我们通过拉伸将他拉伸出了一定高度形成了所谓的面。它的添加方式和点、线一样，我就不多赘述了，直接上代码。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js">viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;<br>    <span class="hljs-attr">polygon</span>: &#123;<br>      <span class="hljs-attr">hierarchy</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>([<br>        <span class="hljs-number">121.539208</span>,<br>        <span class="hljs-number">38.924962</span>,<br>        <span class="hljs-number">121.539176</span>,<br>        <span class="hljs-number">38.924737</span>,<br>        <span class="hljs-number">121.540195</span>,<br>        <span class="hljs-number">38.924486</span>,<br>        <span class="hljs-number">121.540281</span>,<br>        <span class="hljs-number">38.924737</span>,<br>      ]),<br>      <span class="hljs-attr">extrudedHeight</span>: <span class="hljs-number">50</span>,<br>      <span class="hljs-attr">material</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">WHITE</span>,<br>      <span class="hljs-comment">// closeTop: false,</span><br>      <span class="hljs-comment">// closeBottom: false,</span><br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>看效果：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2cc8cf3450d84f5386fce77650bc375a~tplv-k3u1fbpfcp-watermark.image" alt="5.gif"></p><p>这只是生成建筑的一种方式，同样，这也是面众多用途中的一种，我只负责抛砖，大家才是玉。</p><h3 id="点击获取面、广告牌"><a href="#点击获取面、广告牌" class="headerlink" title="点击获取面、广告牌"></a>点击获取面、广告牌</h3><p>在项目中我们不可能只是将这些点线面呈现在眼前，我们的要素上一定承载着对应的数据或属性，我们需要通过点击对应要素获取到数据、属性或自定义的操作。</p><p>我们先通过<code>ScreenSpaceEventHandler</code>注册一个全局<code>handler</code>，然后利用<code>setInputAction</code>注册<code>LEFT_CLICK</code>鼠标左键点击事件，在它的回调中我们可以获取到鼠标的点击对象。然后通过<code>viewer.scene.pick</code>方法（<code>场景拾取，返回在场景中该窗口位置对应的第一个图元对象，如果该位置没有任何物体则返回undefined</code>），传入坐标，获取到点击位置的实体。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><br>handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ScreenSpaceEventHandler</span>(viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>);<br>handler.<span class="hljs-title function_">setInputAction</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">var</span> pick = viewer.<span class="hljs-property">scene</span>.<span class="hljs-title function_">pick</span>(e.<span class="hljs-property">position</span>);<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e , pick);<br>&#125;, <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ScreenSpaceEventType</span>.<span class="hljs-property">LEFT_CLICK</span>);<br><br></code></pre></td></tr></table></figure><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/951f125ebf7740dfbe6e8eaf60f273ff~tplv-k3u1fbpfcp-watermark.image" alt="6.gif"></p><p>我们来看看打印出了什么</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e419d7fa2d634df3ba07e647c7b72f05~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p><code>e</code>为我们鼠标在屏幕上的屏幕二维坐标组，<code>pick</code>则是返回的图元对象，其中的<code>id</code>则是我们拾取到的实体。</p><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cesiumContainer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> viewer, camera, handler;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      viewer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Viewer</span>(<span class="hljs-string">&quot;cesiumContainer&quot;</span>, &#123;&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> layer = viewer.<span class="hljs-property">imageryLayers</span>.<span class="hljs-title function_">addImageryProvider</span>(</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">UrlTemplateImageryProvider</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">url</span>:</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;https://map.geoq.cn/arcgis/rest/services/ChinaOnlineStreetPurplishBlue/MapServer/tile/&#123;z&#125;/&#123;y&#125;/&#123;x&#125;&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">      );</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//   初始化场景位置</span></span></span><br><span class="language-javascript"><span class="language-xml">      viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">camera</span>.<span class="hljs-title function_">flyTo</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 初始化相机经纬度</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">destination</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-number">121.54035</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-number">38.92146</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-number">2000</span></span></span><br><span class="language-javascript"><span class="language-xml">        ),</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">orientation</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">heading</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(<span class="hljs-number">0.0</span>),</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">pitch</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(-<span class="hljs-number">25.0</span>), <span class="hljs-comment">//从上往下看为-90</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">roll</span>: <span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ScreenSpaceEventHandler</span>(viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>);</span></span><br><span class="language-javascript"><span class="language-xml">      handler.<span class="hljs-title function_">setInputAction</span>(<span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">var</span> pick = viewer.<span class="hljs-property">scene</span>.<span class="hljs-title function_">pick</span>(e.<span class="hljs-property">position</span>);</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e, pick);</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;, <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ScreenSpaceEventType</span>.<span class="hljs-property">LEFT_CLICK</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addBillboard</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addPolyline</span>();</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">addPolygon</span>();</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">addBillboard</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">position</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(<span class="hljs-number">121.54035</span>, <span class="hljs-number">38.92146</span>, <span class="hljs-number">50</span>),</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">billboard</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">image</span>: <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./images/blueCamera.png&quot;</span>), <span class="hljs-comment">// default: undefined</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// show: true, // default</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// pixelOffset: new Cesium.Cartesian2(0, -50), // default: (0, 0)</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// eyeOffset: new Cesium.Cartesian3(0.0, 0.0, 0.0), // default</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// horizontalOrigin: Cesium.HorizontalOrigin.CENTER, // default</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// verticalOrigin: Cesium.VerticalOrigin.BOTTOM, // default: CENTER</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// scale: 2.0, // default: 1.0</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// color: Cesium.Color.LIME, // default: WHITE</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// rotation: Cesium.Math.PI_OVER_FOUR, // default: 0.0</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// alignedAxis: Cesium.Cartesian3.ZERO, // default</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// width: 100, // default: undefined</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// height: 25, // default: undefined</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">addPolyline</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">polyline</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">positions</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>([</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.534575</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.926131</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.537579</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.92543</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.541784</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.924578</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.543973</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.924144</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.545947</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.923944</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          ]),</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">width</span>: <span class="hljs-number">4</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">material</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">DARKORANGE</span>.<span class="hljs-title function_">withAlpha</span>(<span class="hljs-number">0.3</span>),</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// clampToGround: true,</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// show: true,</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// name:entity.name,</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">polyline</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">positions</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>([</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.534575</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.926131</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.537579</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.92543</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.541784</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.924578</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.543973</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.924144</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.545947</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.923944</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          ]),</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">width</span>: <span class="hljs-number">4</span>, <span class="hljs-comment">// 线的宽度，像素为单位</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">material</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">PolylineTrailMaterialProperty</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-comment">// 尾迹线材质</span></span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">color</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">GOLD</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">trailLength</span>: <span class="hljs-number">0.4</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-attr">period</span>: <span class="hljs-number">3.0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          &#125;),</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// clampToGround: true,</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// show: true,</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">addPolygon</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      viewer.<span class="hljs-property">entities</span>.<span class="hljs-title function_">add</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">polygon</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">hierarchy</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>([</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.539208</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.924962</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.539176</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.924737</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.540195</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.924486</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">121.540281</span>,</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-number">38.924737</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          ]),</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">extrudedHeight</span>: <span class="hljs-number">50</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">material</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Color</span>.<span class="hljs-property">WHITESMOKE</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// closeTop: false,</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-comment">// closeBottom: false,</span></span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>最基本的Cesium相关操作通过这几篇文章就大概介绍完了，我的砖也抛出来了，接下来就需要大家自己进行玉的雕琢了。后续我还会整理关于点、面的点击以及简易的封装几个常用功能的类。大家可以多多交流共同进步，毕竟我也是一个Cesium的初学者^-^。</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【三维GIS可视化】基于Vue+Cesium+Supermap实现智慧城市（二）</title>
    <link href="/2021/04/25/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2021/04/25/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<blockquote><p>上一篇文章中我们实现了最基本的项目搭建并生成了一个三维地球，这篇文章我们主要介绍一下地图中基本的几大要素、地图相对应坐标系知识的介绍及如何将这几大元素呈现在我们的地球上。同样的，如果文章中有错误的话欢迎评论区指出，定当虚心请教并及时修改！</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>接下来会有部分篇幅用来介绍地图元素以及坐标系及其转换相关知识，仅作了解。不想看的就直接跳到Viewer相关配置，直接进行实际操作。</p><h3 id="地图元素"><a href="#地图元素" class="headerlink" title="地图元素"></a>地图元素</h3><hr><h4 id="要素"><a href="#要素" class="headerlink" title="要素"></a>要素</h4><p>我们首先来看看百度地图上大概都有哪些元素（这里我以路线查询作为例子）</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/ba13746420fa42f7bfff16a7528c1d24~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>首先,地图中最重要的，也是最基本的就是底图，底图负责将地理的基本信息展现在视区中，没有底图，堆多少要素都是无用的。接下来是路线的起点和终点，对应地图中的<strong>点要素Point</strong>，两点之间的路线对应地图中的<strong>线要素LineString</strong>。最后就是右下角的面数据了（是不是格格不入，因为是我自己画的哈哈哈），对应地图中的<strong>面要素Polygon</strong>。而我们的项目中，基本上的信息展示就是由点线面三类要素构成。</p><h3 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h3><hr><p>只要涉及到地图开发，无论如何关于坐标系的概念是逃不掉的，谁让地球它是个球呢🌏（如果向欧文说的地球是方的那就好了）。</p><blockquote><p>想象中的地球vs实际的地球<br><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a49e3ec28ff04edd8a80c842fd58178e~tplv-k3u1fbpfcp-watermark.image" alt="想象中的地球vs实际的地球"></p></blockquote><h4 id="常用坐标系"><a href="#常用坐标系" class="headerlink" title="常用坐标系"></a>常用坐标系</h4><p>这里就不列举国内常用的坐标系及转换方法，大家可以自行百度。关于投影坐标系统和地理坐标系统，可以阅读这两篇文章加以了解。我们主要介绍Cesium中的常用坐标系以及对应的转换方式。</p><p><a href="https://juejin.cn/post/6930539078488326152#heading-17">地理坐标系统</a></p><p><a href="https://juejin.cn/post/6940684126282317861">投影坐标系统</a></p><h4 id="Cesium中的坐标系"><a href="#Cesium中的坐标系" class="headerlink" title="Cesium中的坐标系"></a>Cesium中的坐标系</h4><p>Cesium中常用的坐标有两种：WGS84坐标和笛卡尔空间坐标，我们平时以经纬度来指向一个地点用的就是WGS84坐标，笛卡尔空间坐标则常用来做一些空间位置的变换，如平移、缩放等。二者关系如下图：</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b626f08dc4824c58b1b7e1735f5f6e82~tplv-k3u1fbpfcp-watermark.image" alt="124613_sr4k_1585572.png"></p><p>WGS84坐标系中包括WGS84经纬度坐标系和WGS84弧度坐标系（<code>Cartographic</code>）。</p><p>笛卡尔空间坐标系包括笛卡尔空间直角坐标系（<code>Cartesian3</code>）、平面坐标系（<code>Cartesian2</code>）和4D笛卡尔坐标系（<code>Cartesian4</code>）。</p><h5 id="WGS84坐标系"><a href="#WGS84坐标系" class="headerlink" title="WGS84坐标系"></a>WGS84坐标系</h5><p>World Geodetic System 1984，是为GPS全球定位系统使用而建立的坐标系统，坐标原点为地球质心，其地心空间直角坐标系的Z轴指向BIH （国际时间服务机构）1984.O定义的协议地球极（CTP)方向，X轴指向BIH 1984.0的零子午面和CTP赤道的交点，Y轴与Z轴、X轴垂直构成右手坐标系。我们平常手机上的指南针显示的经纬度就是这个坐标系下当前的坐标，进度范围[-180，180],纬度范围[-90，90]。</p><p>Cesium目前支持两种坐标系WGS84和WebMercator，但是在Cesium中没有实际的对象来描述WGS84坐标，都是以弧度的方式来进行运用的也就是Cartographic类：</p><p>new Cesium.Cartographic(longitude, latitude, height)，这里的参数也叫longitude、latitude，就是经度和纬度，计算方法：弧度= π/180×经纬度角度。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a38ef2fd24245698bdf3ff1dd0a2f6e~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h5 id="笛卡尔空间直角坐标系（Cartesian3）"><a href="#笛卡尔空间直角坐标系（Cartesian3）" class="headerlink" title="笛卡尔空间直角坐标系（Cartesian3）"></a>笛卡尔空间直角坐标系（<code>Cartesian3</code>）</h5><p>笛卡尔空间坐标的原点就是椭球的中心，我们在计算机上进行绘图时，不方便使用经纬度直接进行绘图，一般会将坐标系转换为笛卡尔坐标系，使用计算机图形学中的知识进行绘图。这里的Cartesian3，有点类似于三维系统中的Point3D对象，new Cesium.Cartesian3(x, y, z)，里面三个分量x、y、z。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2f9e213692d04770929c86349456dda9~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h5 id="平面坐标系（Cartesian2）"><a href="#平面坐标系（Cartesian2）" class="headerlink" title="平面坐标系（Cartesian2）"></a>平面坐标系（<code>Cartesian2</code>）</h5><p>平面坐标系也就是平面直角坐标系，是一个二维笛卡尔坐标系，与Cartesian3相比少了一个z的分量，new Cesium.Cartesian2(x, y)。Cartesian2经常用来描述屏幕坐标系，比如鼠标在电脑屏幕上的点击位置，返回的就是Cartesian2，返回了鼠标点击位置的xy像素点分量。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/18ddfe6f0c8048ffa51fa2a02538da09~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h4 id="坐标系转换"><a href="#坐标系转换" class="headerlink" title="坐标系转换"></a>坐标系转换</h4><h5 id="经纬度和弧度的转换"><a href="#经纬度和弧度的转换" class="headerlink" title="经纬度和弧度的转换"></a>经纬度和弧度的转换</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> radians=<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-property">toRadians</span>（degrees）;<span class="hljs-comment">//经纬度转弧度</span><br><span class="hljs-keyword">var</span> degrees=<span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-property">toDegrees</span>（radians）;<span class="hljs-comment">//弧度转经纬度</span><br></code></pre></td></tr></table></figure><h5 id="WGS84经纬度坐标和WGS84弧度坐标系（Cartographic）的转换"><a href="#WGS84经纬度坐标和WGS84弧度坐标系（Cartographic）的转换" class="headerlink" title="WGS84经纬度坐标和WGS84弧度坐标系（Cartographic）的转换"></a>WGS84经纬度坐标和WGS84弧度坐标系（<code>Cartographic</code>）的转换</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//方法一：</span><br><span class="hljs-keyword">var</span> longitude = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(longitude1); <span class="hljs-comment">//其中 longitude1为角度</span><br><span class="hljs-keyword">var</span> latitude= <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(latitude1); <span class="hljs-comment">//其中 latitude1为角度</span><br><span class="hljs-keyword">var</span> cartographic = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Cartographic</span>(longitude, latitude, height)；<br><br><span class="hljs-comment">//方法二：</span><br><span class="hljs-keyword">var</span> cartographic= <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartographic</span>.<span class="hljs-title function_">fromDegrees</span>(longitude, latitude, height);<span class="hljs-comment">//其中，longitude和latitude为角度</span><br><br><span class="hljs-comment">//方法三：</span><br><span class="hljs-keyword">var</span> cartographic= <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartographic</span>.<span class="hljs-title function_">fromRadians</span>(longitude, latitude, height);<span class="hljs-comment">//其中，longitude和latitude为弧度</span><br></code></pre></td></tr></table></figure><h5 id="WGS84坐标系和笛卡尔空间直角坐标系（Cartesian3）的转换"><a href="#WGS84坐标系和笛卡尔空间直角坐标系（Cartesian3）的转换" class="headerlink" title="WGS84坐标系和笛卡尔空间直角坐标系（Cartesian3）的转换"></a>WGS84坐标系和笛卡尔空间直角坐标系（<code>Cartesian3</code>）的转换</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> position = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(longitude, latitude, height)；<span class="hljs-comment">//其中，高度默认值为0，可以不用填写；longitude和latitude为角度</span><br><br><span class="hljs-keyword">var</span> positions = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArray</span>(coordinates);<span class="hljs-comment">//其中，coordinates格式为不带高度的数组。例如：[-115.0, 37.0, -107.0, 33.0]</span><br><br><span class="hljs-keyword">var</span> positions = <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegreesArrayHeights</span>(coordinates);<span class="hljs-comment">//coordinates格式为带有高度的数组。例如：[-115.0, 37.0, 100000.0, -107.0, 33.0, 150000.0]</span><br><br><span class="hljs-comment">//同理，通过弧度转换，用法相同，具体有Cesium.Cartesian3.fromRadians，Cesium.Cartesian3.fromRadiansArray，Cesium.Cartesian3.fromRadiansArrayHeights等方法</span><br></code></pre></td></tr></table></figure><h5 id="笛卡尔空间直角坐标系转换WGS84"><a href="#笛卡尔空间直角坐标系转换WGS84" class="headerlink" title="笛卡尔空间直角坐标系转换WGS84"></a>笛卡尔空间直角坐标系转换WGS84</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> cartographic= <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartographic</span>.<span class="hljs-title function_">fromCartesian</span>(cartesian3)；<br></code></pre></td></tr></table></figure><h5 id="平面坐标系（Cartesian2）和笛卡尔空间直角坐标系（Cartesian3）的转换"><a href="#平面坐标系（Cartesian2）和笛卡尔空间直角坐标系（Cartesian3）的转换" class="headerlink" title="平面坐标系（Cartesian2）和笛卡尔空间直角坐标系（Cartesian3）的转换"></a>平面坐标系（<code>Cartesian2</code>）和笛卡尔空间直角坐标系（<code>Cartesian3</code>）的转换</h5><p>平面坐标系转笛卡尔空间直角坐标系</p><p>这里注意的是当前的点(Cartesian2)必须在三维球上，否则返回的是undefined；通过ScreenSpaceEventHandler回调会取到的坐标都是Cartesian2。</p><p>屏幕坐标转场景坐标-获取倾斜摄影或模型点击处的坐标<br>这里的场景坐标是包含了地形、倾斜摄影表面、模型的坐标。</p><p>通过viewer.scene.pickPosition(movement.position)获取，根据窗口坐标，从场景的深度缓冲区中拾取相应的位置，返回笛卡尔坐标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ScreenSpaceEventHandler</span>(viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>);<br>handler.<span class="hljs-title function_">setInputAction</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">movement</span>) &#123;<br>     <span class="hljs-keyword">var</span> position = viewer.<span class="hljs-property">scene</span>.<span class="hljs-title function_">pickPosition</span>(movement.<span class="hljs-property">position</span>);<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position);<br>&#125;, <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ScreenSpaceEventType</span>.<span class="hljs-property">LEFT_CLICK</span>);<br></code></pre></td></tr></table></figure><p>注：若屏幕坐标处没有倾斜摄影表面、模型时，获取的笛卡尔坐标不准，此时要开启地形深度检测（<code>viewer.scene.globe.depthTestAgainstTerrain = true</code>; //默认为false）。</p><p>屏幕坐标转地表坐标-获取加载地形后对应的经纬度和高程<br>这里是地球表面的世界坐标，包含地形，不包括模型、倾斜摄影表面。</p><p>通过<code>viewer.scene.globe.pick(ray, scene)</code>获取，其中<code>ray=viewer.camera.getPickRay(movement.position)</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ScreenSpaceEventHandler</span>(viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>);<br>handler.<span class="hljs-title function_">setInputAction</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">movement</span>) &#123;<br>     <span class="hljs-keyword">var</span> ray = viewer.<span class="hljs-property">camera</span>.<span class="hljs-title function_">getPickRay</span>(movement.<span class="hljs-property">position</span>);<br>     <span class="hljs-keyword">var</span> position = viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-title function_">pick</span>(ray, viewer.<span class="hljs-property">scene</span>);<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position);<br>&#125;, <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ScreenSpaceEventType</span>.<span class="hljs-property">LEFT_CLICK</span>);<br></code></pre></td></tr></table></figure><p>注：通过测试，此处得到的坐标通过转换成wgs84后，height的为该点的地形高程值。</p><p>屏幕坐标转椭球面坐标-获取鼠标点的对应椭球面位置<br>这里的椭球面坐标是参考椭球的WGS84坐标(Ellipsoid.WGS84)，不包含地形、模型、倾斜摄影表面。</p><p>通过 <code>viewer.scene.camera.pickEllipsoid(movement.position, ellipsoid)</code>获取，可以获取当前点击视线与椭球面相交处的坐标，其中ellipsoid是当前地球使用的椭球对象：<code>viewer.scene.globe.ellipsoid</code>，默认为Ellipsoid.WGS84。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> handler = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ScreenSpaceEventHandler</span>(viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">canvas</span>);<br>handler.<span class="hljs-title function_">setInputAction</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">movement</span>) &#123;<br>     <span class="hljs-keyword">var</span> position = viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">camera</span>.<span class="hljs-title function_">pickEllipsoid</span>(movement.<span class="hljs-property">position</span>, viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">globe</span>.<span class="hljs-property">ellipsoid</span>);<br>     <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(position);<br>&#125;, <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">ScreenSpaceEventType</span>.<span class="hljs-property">LEFT_CLICK</span>);<br></code></pre></td></tr></table></figure><p>注：通过测试，此处得到的坐标通过转换成wgs84后，height的为0(此值应该为地表坐标减去地形的高程)。</p><h3 id="Viewer相关配置项"><a href="#Viewer相关配置项" class="headerlink" title="Viewer相关配置项"></a>Viewer相关配置项</h3><hr><p>我们在第一篇文章中成功生成了三维球体，但是细心的朋友会发现我们<code>Viewer</code>的配置项是一个空对象，接下来我就将基本配置罗列出来，朋友们可根据需要自行添加到自己的<code>Viewer</code>配置中</p><blockquote><p>这里的配置对应的是超图二次封装过的Viewer,所以有些默认配置可能与原始Ceiusm默认配置不同，原始的配置项可参照<a href="https://blog.csdn.net/shenwuyuexy/article/details/108262789">这篇博客</a></p></blockquote><table><thead><tr><th>名称</th><th>类型</th><th>默认</th><th>描述</th></tr></thead><tbody><tr><td>clock</td><td><code>Clock</code></td><td><code>new Clock()</code></td><td>控制当前时间的时钟</td></tr><tr><td>selectedImageryProviderViewModel</td><td><code>ProviderViewModel</code></td><td></td><td>当前基础图像图层的视图模型，如若未提供，则使用第一个可用基础图层。此值仅在 options.baseLayerPicker 设置为true时有效。</td></tr><tr><td>imageryProviderViewModels</td><td>Array.<code>&lt;ProviderViewModel&gt;</code></td><td><code>createDefaultImageryProviderViewModels()</code></td><td>ProviderViewModels数组可从BaseLayerPicker中选择。此值仅在 options.baseLayerPicker 设置为true时有效。</td></tr><tr><td>selectedTerrainProviderViewModel</td><td><code>ProviderViewModel</code></td><td></td><td>当前基础地形图层的视图模型，如若未提供，则使用第一个可用基础图层。此值仅在 options.baseLayerPicker 设置为true时有效。</td></tr><tr><td>terrainProviderViewModels</td><td>Array.<code>&lt;ProviderViewModel&gt;</code></td><td><code>createDefaultTerrainProviderViewModels()</code></td><td>ProviderViewModels数组可从BaseLayerPicker中选择。此值仅在 options.baseLayerPicker 设置为true时有效。</td></tr><tr><td>imageryProvider</td><td><code>ImageryProvider</code></td><td><code>new BingMapsImageryProvider()</code></td><td>使用的影像提供者。此值仅在 options.baseLayerPicker 设置为 false 时有效。</td></tr><tr><td>terrainProvider</td><td><code>TerrainProvider</code></td><td><code>new EllipsoidTerrainProvider()</code></td><td>使用的地形提供者。</td></tr><tr><td>skyBox</td><td><code>SkyBox</code></td><td></td><td>用于渲染星辰的天空盒，未定义时，使用默认星辰效果。</td></tr><tr><td>skyAtmosphere</td><td><code>SkyAtmosphere</code></td><td></td><td>环绕地球边缘的蓝天和光晕效果，设置为false可将其关闭。</td></tr><tr><td>useDefaultRenderLoop</td><td><code>Boolean</code></td><td><code>true</code></td><td>如果此部件能够控制渲染循环，设置为true，反之设置为false。</td></tr><tr><td>targetFrameRate</td><td><code>Number</code></td><td></td><td>使用默认渲染循环时的目标帧速率。</td></tr><tr><td>showRenderLoopErrors</td><td><code>Boolean</code></td><td><code>true</code></td><td>如果设置为true，发生渲染循环错误时，将自动给用户显示一个包含错误信息的HTML面板。</td></tr><tr><td>automaticallyTrackDataSourceClocks</td><td><code>Boolean</code></td><td><code>true</code></td><td>如果设置为true，将自动跟踪新添加数据源的时钟设置，如果数据源的时钟变更，则更新。如需单独设置时钟，请将此项设置为false。</td></tr><tr><td>contextOptions</td><td><code>Object</code></td><td></td><td>Context and WebGL 创建属性与传递给Scene匹配的选项。增加硬件反走样功能，反走样系数msaalevel使用1到8的整数值，默认是1，值越大反走样效果越好（因为用到了WebGL2.0的特性，所以requestWebgl2参数设置为true。因为WebGL2.0还存在一下缺陷，所以需要先把OIT,FXAA,HDR关掉）</td></tr><tr><td>mapProjection</td><td><code>MapProjection</code></td><td><code>new GeographicProjection()    </code></td><td>在二维和Columbus视图模式下所使用的地图投影。</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>globe</td><td><code>Globe</code></td><td><code>new Globe(mapProjection.ellipsoid)    </code></td><td>场景中的地球，如果此项设置为false，将不添加球体对象。</td></tr><tr><td>orderIndependentTranslucency</td><td><code>Boolean</code></td><td><code>true</code></td><td>如果此项设置为true，并且使用设备支持，将使用与顺序无关的半透明。</td></tr><tr><td>creditContainer</td><td><code>Element</code> \ <code>String</code></td><td></td><td>指定包含CreditDisplay信息的DOM元素或ID。如若未指定，credit信息将添加到部件底部。</td></tr><tr><td>dataSources</td><td><code>DataSourceCollection</code></td><td><code>new DataSourceCollection()</code></td><td>指定由viewer部件可视化的数据源集合。如果提供此参数，实例由调用者拥有，并且viewer被销毁时此实例不被销毁。</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>terrainExaggeration</td><td><code>Number</code></td><td><code>1.0</code></td><td>用于夸大地形的标量。请注意，设置地形夸张不会修改其它任何数据。</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>shadows</td><td><code>Boolean</code></td><td><code>false</code></td><td>确定阴影是否由太阳投射形成。</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>terrainShadows</td><td><code>ShadowMode</code></td><td><code>ShadowMode.RECEIVE_ONLY</code></td><td>确定地形是否投射或接受来自太阳的阴影。</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>mapMode2D</td><td><code>MapMode2D</code></td><td><code>MapMode2D.INFINITE_SCROLL</code></td><td>确定二维地图是可旋转的或是可以在在水平方向上无限滚动。</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td>navigation</td><td><code>Boolean</code></td><td><code>false</code></td><td>是否显示导航罗盘控件。如需显示，需在初始化viewer时此项设置为true。</td></tr></tbody></table><h3 id="添加图层（Adding-Imagery）"><a href="#添加图层（Adding-Imagery）" class="headerlink" title="添加图层（Adding Imagery）"></a>添加图层（<code>Adding Imagery</code>）</h3><hr><p><code>Imagery</code>不用说，在Cesium项目中一定是关键元素，瓦片图集合根据不同投影方式映射到三维地球表面，通过相机指向地表的方向距离，Cesium会自动请求不同层级的图层信息进行渲染。</p><p>Cesium支持多种图层格式：</p><ul><li>wms</li><li>TMS</li><li>WMTS</li><li>ArcGIS</li><li>BingMaps</li><li>GoogleEarth</li><li>Mapbox</li><li>OpenStreetMap</li></ul><blockquote><p>默认地，Cesium使用Bing Maps作为默认的图层。这个图层被打包进Viewer中用于演示。</p></blockquote><p>Cesium中基本的添加底图的方法为<code>viewer.imageryLayers.addImageryProvider()</code></p><p>我们在<code>init()</code>方法中添加下方代码，尝试一下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> layer = viewer.<span class="hljs-property">imageryLayers</span>.<span class="hljs-title function_">addImageryProvider</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ArcGisMapServerImageryProvider</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://cache1.arcgisonline.cn/ArcGIS/rest/services/ChinaOnlineCommunity/MapServer&#x27;</span><br>&#125;));<br></code></pre></td></tr></table></figure><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/86c80980222c4490b0ba10c92bb2961e~tplv-k3u1fbpfcp-watermark.image" alt="1.gif"></p><p>对于天地图WebGL提供了一个天地图影像服务提供者类<code>TiandituImageryProvider</code>，具体的使用方法可以<a href="http://support.supermap.com.cn:8090/webgl/examples/webgl/editor.html#tianditu">参照示例</a>和<a href="http://support.supermap.com.cn/DataWarehouse/WebDocHelp/iPortal/webgl/docs/Documentation/TiandituImageryProvider.html">api文档</a></p><h3 id="Camera实体"><a href="#Camera实体" class="headerlink" title="Camera实体"></a>Camera实体</h3><hr><p>我们已经把自己想要的底图添加到地球上了，但是实际项目中肯定不可能一进项目就给人展示整个地球（如果需求是这样的，那我道歉！）。所以我们需要在地球生成后定位到我们需要的位置，这就不得不说一下<code>Camera</code>了。</p><p>Cesium中有很多方法可以操作Camera，如旋转(rotate)、缩放(zoom)、平移(pan)和飞到目的地(flyTo)。CesiumJS有鼠标和触摸事件用来处理与Camrea的交互，还有API来以编程方式操作摄像机。</p><p>使用<code>setView</code>函数可设置Camera的位置和方向。<code>destination</code>可以是<code>Cartesian3</code>或者<code>Rectangle</code>，<code>orientation</code>可以是<code>heading | pitch | roll | direction | up</code>。航向角、俯仰角和横滚角以弧度定义。航向角是从正角度向东增加的局部北向旋转。俯仰角是指从局部的东北平面开始旋转。正俯仰角在平面上方。负俯仰角在平面以下。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><br> <span class="hljs-comment">//   初始化场景位置</span><br>viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">camera</span>.<span class="hljs-title function_">setView</span>(&#123;<br>    <span class="hljs-comment">// 初始化相机经纬度（这里使用了经纬度转换世界坐标的方法）</span><br>    <span class="hljs-attr">destination</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(<br>      <span class="hljs-number">121.54035</span>,<br>      <span class="hljs-number">38.92146</span>,<br>      <span class="hljs-number">2000</span><br>    ),<br>    <span class="hljs-attr">orientation</span>: &#123;<br>      <span class="hljs-attr">heading</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(<span class="hljs-number">0.0</span>),<br>      <span class="hljs-attr">pitch</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(-<span class="hljs-number">25.0</span>), <span class="hljs-comment">//从上往下看为-90</span><br>      <span class="hljs-attr">roll</span>: <span class="hljs-number">0</span>,<br>    &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p><code>flyTo</code>方法的参数和<code>setView</code>是基本一样的。只是<code>setView</code>是直接将视角根据参数定位，而<code>flyTo</code>如字面意思，会有一个飞向定位点的动画效果。</p><p>两者效果图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4dd71de89504a73a1846edf0bcc9e5f~tplv-k3u1fbpfcp-watermark.image" alt="2.gif"></p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a6f904d242e440c86d15c2c874d4cf8~tplv-k3u1fbpfcp-watermark.image" alt="3.gif"></p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;template&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cesiumContainer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br>&lt;/template&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">var</span> viewer, camera;</span></span><br><span class="language-javascript"><span class="language-xml"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-keyword">return</span> &#123;&#125;;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-attr">methods</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">      viewer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Viewer</span>(<span class="hljs-string">&quot;cesiumContainer&quot;</span>, &#123;&#125;);</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-keyword">var</span> layer = viewer.<span class="hljs-property">imageryLayers</span>.<span class="hljs-title function_">addImageryProvider</span>(</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">ArcGisMapServerImageryProvider</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">url</span>:</span></span><br><span class="language-javascript"><span class="language-xml">            <span class="hljs-string">&quot;http://cache1.arcgisonline.cn/ArcGIS/rest/services/ChinaOnlineCommunity/MapServer&quot;</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;)</span></span><br><span class="language-javascript"><span class="language-xml">      );</span></span><br><span class="language-javascript"><span class="language-xml">      <span class="hljs-comment">//   初始化场景位置</span></span></span><br><span class="language-javascript"><span class="language-xml">      viewer.<span class="hljs-property">scene</span>.<span class="hljs-property">camera</span>.<span class="hljs-title function_">flyTo</span>(&#123;</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-comment">// 初始化相机经纬度</span></span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">destination</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Cartesian3</span>.<span class="hljs-title function_">fromDegrees</span>(</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-number">121.54035</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-number">38.92146</span>,</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-number">2000</span></span></span><br><span class="language-javascript"><span class="language-xml">        ),</span></span><br><span class="language-javascript"><span class="language-xml">        <span class="hljs-attr">orientation</span>: &#123;</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">heading</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(<span class="hljs-number">0.0</span>),</span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">pitch</span>: <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Math</span>.<span class="hljs-title function_">toRadians</span>(-<span class="hljs-number">25.0</span>), <span class="hljs-comment">//从上往下看为-90</span></span></span><br><span class="language-javascript"><span class="language-xml">          <span class="hljs-attr">roll</span>: <span class="hljs-number">0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">        &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">      &#125;);</span></span><br><span class="language-javascript"><span class="language-xml">    &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;,</span></span><br><span class="language-javascript"><span class="language-xml">&#125;;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></td></tr></table></figure><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><hr><p>本来想在这篇文章中把点线面的添加写进来的，计划不如变化快，所以这篇暂时就只讲一下坐标系和Viewer、Camera相关的东西吧。下一篇再实现添加点线面要素吧。头疼哈哈哈。最后谢谢看过赞过评论过我上一篇文章的兄弟们，写了文章有了反馈确实是更有动力创作下去！</p>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【三维GIS可视化】基于Vue+Cesium+Supermap实现智慧城市（一）</title>
    <link href="/2021/04/22/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2021/04/22/%E3%80%90%E4%B8%89%E7%BB%B4GIS%E5%8F%AF%E8%A7%86%E5%8C%96%E3%80%91%E5%9F%BA%E4%BA%8EVue+Cesium+Supermap%E5%AE%9E%E7%8E%B0%E6%99%BA%E6%85%A7%E5%9F%8E%E5%B8%82%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><hr><p>不久前受命研究开发3D可视化及智慧城市的技术路线，第一个想到的就是<a href="https://cesium.com/">Cesium</a>这个世界级开源库。但是我的业务上可能会有很多关于空间及地理分析相关的功能实现，所以我找到了超图。超图拥有基于Cesium包装和二次封装的三维产品3D-WebGL包（文末附产品下载地址）。一切准备就绪，接下来简单了解一下Cesium是什么神奇的东东吧。</p><h3 id="Cesium"><a href="#Cesium" class="headerlink" title="Cesium"></a>Cesium</h3><hr><h4 id="Cesium是什么"><a href="#Cesium是什么" class="headerlink" title="Cesium是什么"></a>Cesium是什么</h4><p>Cesium是一个跨平台，跨浏览器的展示三维地球和地图的JavaScript库。Cesium使用WebGL来进行硬件加速图形，使用时不需要任何插件的支持，但需要浏览器支持WebGL。它提供了依据Javascript的开发包，方便我们高效快速的搭建一个3D项目。</p><h4 id="Cesium能干什么"><a href="#Cesium能干什么" class="headerlink" title="Cesium能干什么"></a>Cesium能干什么</h4><ul><li>支持2D，2.5D,3D形式的地图展示</li><li>可以绘制各种几何图形、高亮区域，支持导入图片，甚至3D模型等多种数据可视化展示。</li><li>可用于动态数据可视化并提供良好的触摸支持，支持绝大多数浏览器和mobile。</li><li>Cesium还支持基于时间轴的动态数据展示。<h4 id="Cesium怎么用"><a href="#Cesium怎么用" class="headerlink" title="Cesium怎么用"></a>Cesium怎么用</h4><blockquote><p>接下来的代码中我使用的是超图基于Cesium二次封装过的产品包，所以在这简单说一下最基本的Cesium如何使用。</p></blockquote></li></ul><p>将Cesium源码中的Build文件夹，拷入到我们的项目中。然后在项目中静态引入相关文件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./Build/Cesium/Widgets/widgets.css&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./Build/Cesium/Cesium.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发布后运行，熟悉的helloworld和地球就出现了。</p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs html"><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Use correct character set. --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Tell IE to use the latest, best version. --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- Make the application on mobile take up the full browser screen and disable user scaling. --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../Build/Cesium/Cesium.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-keyword">@import</span> url(../Build/Cesium/Widgets/widgets.css);</span><br><span class="language-css">      <span class="hljs-selector-tag">html</span>, <span class="hljs-selector-tag">body</span>, <span class="hljs-selector-id">#cesiumContainer</span> &#123;</span><br><span class="language-css">          <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">height</span>: <span class="hljs-number">100%</span>; <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>; <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cesiumContainer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-title class_">Cesium</span>.<span class="hljs-property">Ion</span>.<span class="hljs-property">defaultAccessToken</span>=<span class="hljs-string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3ZjA2ZDQ2ZS02NTA4LTQ2NTItODE1My1kZjE3MjBkMjFkNzAiLCJpZCI6NDM5NCwic2NvcGVzIjpbImFzciIsImdjIl0sImlhdCI6MTU0MDcyNzI4Nn0.L7P8pJponZfYjdsGnEw2hIHd2AN0h-SuYl6XvzOwLeA&#x27;</span>;</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> viewer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Viewer</span>(<span class="hljs-string">&#x27;cesiumContainer&#x27;</span>);</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h3><hr><p>我们选择Vue作为开发框架，所以搭建Vue项目这个我就不多做介绍了，大家能在掘金相遇那证明大家都是优秀的前端（<del>摸鱼摸摸</del>），不会的xdm就百度一下吧。</p><h4 id="引入WebGL包"><a href="#引入WebGL包" class="headerlink" title="引入WebGL包"></a>引入WebGL包</h4><p>因为这个包是基于Cesium二次开发的，所以引入方式可以和Cesium一样，只需要将包内的<code>Build/Cesium</code>文件夹放到我们的<code>public/static</code>下，在<code>index.html</code>内静态引入即可。</p><blockquote><p>widgets.css包含了Ceisum的可视化控件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;static/Cesium/Widgets/widgets.css&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><blockquote><p>Cesium.js定义了Cesium对象，其中包括我们需要的东西</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;static/Cesium/Cesium.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="经典HelloWorld"><a href="#经典HelloWorld" class="headerlink" title="经典HelloWorld"></a>经典HelloWorld</h4><p>像很多的地图api一样，Cesium也需要一个div作为三维场景的唯一容器，并在页面初始化时生成对应的Viewer实例。</p><h4 id="强调！强调！强调！"><a href="#强调！强调！强调！" class="headerlink" title="强调！强调！强调！"></a>强调！强调！强调！</h4><p>重要的事情说三遍。所有关于Cesium的变量请！一定！<strong>不要放在data中维护</strong>！因为Vue会对data中的状态进行数据劫持，而对象则会递归的进行数据劫持，以此方式监听状态变化。而Cesium实例的属性极多，层级极深，如果将其挂载到data上。不出意外，你的浏览器会崩溃。</p><p>如果需要通信的话，最简单的方法就是挂载到window对象上。</p><h4 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;cesiumContainer&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> viewer, camera;</span><br><span class="language-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span><br><span class="language-javascript">  <span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-keyword">return</span> &#123;&#125;;</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-title function_">mounted</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">    <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">init</span>();</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">  <span class="hljs-attr">methods</span>: &#123;</span><br><span class="language-javascript">    <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      viewer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cesium</span>.<span class="hljs-title class_">Viewer</span>(<span class="hljs-string">&quot;cesiumContainer&quot;</span>, &#123;&#125;);</span><br><span class="language-javascript">    &#125;,</span><br><span class="language-javascript">  &#125;,</span><br><span class="language-javascript">&#125;;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;scss&quot;</span> <span class="hljs-attr">scoped</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><p>启动项目，我们就能看到下图的效果了。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/70b22bd76fd649038222986ee0ec685b~tplv-k3u1fbpfcp-watermark.image" alt="helloworld.gif"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><hr><p>这篇文章我们只是实现了最基本的将三维场景放到我们的项目中，下一篇我们将会简单介绍地图上的基本概念并尝试将点线面等要素绘制到我们这个地球上。然后逐步向其中丰富我们的功能。</p><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><hr><h4 id="Cesium相关网址"><a href="#Cesium相关网址" class="headerlink" title="Cesium相关网址"></a>Cesium相关网址</h4><ul><li><p><a href="https://cesium.com/docs/">https://cesium.com/docs/</a>   Cesium文档</p></li><li><p><a href="https://cesium.com/docs/cesiumjs-ref-doc/">https://cesium.com/docs/cesiumjs-ref-doc/</a> Cesium API</p></li><li><p><a href="https://sandcastle.cesium.com/">https://sandcastle.cesium.com/</a> Cesium沙盒示例（好多效果都可以在这找到）</p><h4 id="超图相关网址"><a href="#超图相关网址" class="headerlink" title="超图相关网址"></a>超图相关网址</h4></li><li><p><a href="http://support.supermap.com.cn:8090/webgl/web/downloads/download1.html">http://support.supermap.com.cn:8090/webgl/web/downloads/download1.html</a> 超图WebGL产品包下载</p></li><li><p><a href="http://support.supermap.com.cn:8090/webgl/examples/webgl/examples.html#layer">http://support.supermap.com.cn:8090/webgl/examples/webgl/examples.html#layer</a> 超图3维示例</p></li><li><p><a href="http://support.supermap.com.cn:8090/webgl/web/apis/3dwebgl.html">http://support.supermap.com.cn:8090/webgl/web/apis/3dwebgl.html</a> 超图及Cesium相关API属性文档（个人觉得比较方便）</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Cesium</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Cesium</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义一个windows终端吧</title>
    <link href="/2020/07/10/2020-07-10-%E8%87%AA%E5%AE%9A%E4%B9%89windows%E7%BB%88%E7%AB%AF/"/>
    <url>/2020/07/10/2020-07-10-%E8%87%AA%E5%AE%9A%E4%B9%89windows%E7%BB%88%E7%AB%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://i.loli.net/2020/07/10/hrEw9cJN6TxBjKM.png" alt="Snipaste_2020-07-10_15-06-43.png"></p><p>怎么样，这不比默认的”傻黑粗“来的赏心悦目</p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>废话不多说，开始我们的自定义powerShell之旅</p><hr><p>window默认的powershell由”傻黑粗”进化为”傻大蓝”，丑也是真的丑，所以我一直用的都是<code>cmder</code>去处理命令行，知道今天我在摸鱼的时候发现了</p><p> 抱着试一试的心态获取了它，咳咳，结果还是蛮失望的，一如既往的微软风格，但是这是开源的，也就意味着可以修改它的配置，</p><p>而它的配置文件存储在</p><blockquote><p>~\AppData\Local\Packages\Microsoft.WindowsTerminal_8wekyb3d8bbwe\LocalState\setting.json</p></blockquote><p>这个文件中，稍后我会简单介绍一下里面的常用配置。</p><h2 id="改造PowerShell"><a href="#改造PowerShell" class="headerlink" title="改造PowerShell"></a>改造PowerShell</h2><hr><p>效果图中的路径效果是需要额外的包去美化的，这里我们需要先安装oh-my-posh，在PowerShell中输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Install-Module</span> posh<span class="hljs-literal">-git</span> <span class="hljs-literal">-Scope</span> CurrentUser<br><span class="hljs-built_in">Install-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span> <span class="hljs-literal">-Scope</span> CurrentUser<br></code></pre></td></tr></table></figure><p>遇到让你允许不可信来源的时候直接敲<code>A</code>全部信任。</p><p>安装完成后输入</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> posh<span class="hljs-literal">-git</span><br><span class="hljs-built_in">Import-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span><br><span class="hljs-built_in">Set-Theme</span> PowerLine<br></code></pre></td></tr></table></figure><p>你会发现PowerShell变了样子，但是重启后就消失了，因为这些指令仅限于此次会话，所以我们要将这几句命令添加到启动脚本中。</p><p>打开<code>~\Documents\WindowsPowerShell</code>，新建文本文档，叫做<code>Microsoft.PowerShell_profile.ps1</code>（记得开拓展名显示），输入以下内容，保存。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">Import-Module</span> posh<span class="hljs-literal">-git</span><br><span class="hljs-built_in">Import-Module</span> <span class="hljs-built_in">oh</span><span class="hljs-literal">-my-posh</span><br><span class="hljs-built_in">Set-Theme</span> PowerLine<br></code></pre></td></tr></table></figure><p>这样，在每次PoweShell打开的时候都能启用PowerLine主题。</p><p>可是这样，PowerShell打开的时候仍有乱码（或者说，有违和感），这是因为没有给你使用的字体链接表情，乱码的地方其实就是表情符号。</p><h2 id="字体选择"><a href="#字体选择" class="headerlink" title="字体选择"></a>字体选择</h2><hr><p>现在Powershell中会有乱码，是因为我们的字体无法显示，所以我们需要安装指定字体，我这里选用的是<code>Sarasa Term SC</code>（</p><p>），</p><p>这个字体是等宽字体，不会在终端中出现排版错误，下载安装后我们在注册表中配置，我这里直接提供一个reg脚本，把下面的片段复制到一个reg文件中，双击自动导入：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs text">Windows Registry Editor Version 5.00<br><br>[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\FontLink\SystemLink]<br>&quot;Sarasa Term SC&quot;=hex(7):4d,00,49,00,43,00,52,00,4f,00,53,00,53,00,2e,00,54,00,\<br>  54,00,46,00,2c,00,4d,00,69,00,63,00,72,00,6f,00,73,00,6f,00,66,00,74,00,20,\<br>  00,53,00,61,00,6e,00,73,00,20,00,53,00,65,00,72,00,69,00,66,00,2c,00,31,00,\<br>  30,00,38,00,2c,00,31,00,32,00,32,00,00,00,4d,00,49,00,43,00,52,00,4f,00,53,\<br>  00,53,00,2e,00,54,00,54,00,46,00,2c,00,4d,00,69,00,63,00,72,00,6f,00,73,00,\<br>  6f,00,66,00,74,00,20,00,53,00,61,00,6e,00,73,00,20,00,53,00,65,00,72,00,69,\<br>  00,66,00,00,00,4d,00,49,00,4e,00,47,00,4c,00,49,00,55,00,2e,00,54,00,54,00,\<br>  43,00,2c,00,50,00,4d,00,69,00,6e,00,67,00,4c,00,69,00,55,00,00,00,4d,00,53,\<br>  00,4d,00,49,00,4e,00,43,00,48,00,4f,00,2e,00,54,00,54,00,43,00,2c,00,4d,00,\<br>  53,00,20,00,50,00,4d,00,69,00,6e,00,63,00,68,00,6f,00,00,00,42,00,41,00,54,\<br>  00,41,00,4e,00,47,00,2e,00,54,00,54,00,43,00,2c,00,42,00,61,00,74,00,61,00,\<br>  6e,00,67,00,00,00,4d,00,53,00,59,00,48,00,2e,00,54,00,54,00,43,00,2c,00,4d,\<br>  00,69,00,63,00,72,00,6f,00,73,00,6f,00,66,00,74,00,20,00,59,00,61,00,48,00,\<br>  65,00,69,00,20,00,55,00,49,00,00,00,4d,00,53,00,4a,00,48,00,2e,00,54,00,54,\<br>  00,43,00,2c,00,4d,00,69,00,63,00,72,00,6f,00,73,00,6f,00,66,00,74,00,20,00,\<br>  4a,00,68,00,65,00,6e,00,67,00,48,00,65,00,69,00,20,00,55,00,49,00,00,00,59,\<br>  00,55,00,47,00,4f,00,54,00,48,00,4d,00,2e,00,54,00,54,00,43,00,2c,00,59,00,\<br>  75,00,20,00,47,00,6f,00,74,00,68,00,69,00,63,00,20,00,55,00,49,00,00,00,4d,\<br>  00,41,00,4c,00,47,00,55,00,4e,00,2e,00,54,00,54,00,46,00,2c,00,4d,00,61,00,\<br>  6c,00,67,00,75,00,6e,00,20,00,47,00,6f,00,74,00,68,00,69,00,63,00,00,00,53,\<br>  00,45,00,47,00,55,00,49,00,53,00,59,00,4d,00,2e,00,54,00,54,00,46,00,2c,00,\<br>  53,00,65,00,67,00,6f,00,65,00,20,00,55,00,49,00,20,00,53,00,79,00,6d,00,62,\<br>  00,6f,00,6c,00,00,00,00,00<br></code></pre></td></tr></table></figure><h2 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h2><hr><p>准备工作做完了，现在介绍一下PowerShell的配置文件，</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;defaults&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-comment">// Put settings here that you want to apply to all profiles.</span><br>            <span class="hljs-attr">&quot;backgroundImage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C:\\Users\\MileWang\\Pictures\\桌面\\wallhaven-j5lx3y.jpg&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// # 背景图透明度</span><br>            <span class="hljs-attr">&quot;backgroundImageOpacity&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">0.6</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// # 背景图扩展模式</span><br>            <span class="hljs-attr">&quot;backgroundImageStretchMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;fill&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// # 颜色主题，主题在下方shceme中添加</span><br>            <span class="hljs-attr">&quot;colorScheme&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;3024 Day&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// # 光标样式、颜色</span><br>            <span class="hljs-attr">&quot;cursorShape&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vintage&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cursorColor&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;#000&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-comment">// # 字体</span><br>            <span class="hljs-attr">&quot;fontFace&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Sarasa Term SC&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">// Make changes here to the powershell.exe profile.</span><br>                <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;PowerShell&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;powershell.exe&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-comment">// Make changes here to the cmd.exe profile.</span><br>                <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;命令提示符&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;commandline&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cmd.exe&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;guid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;hidden&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Azure Cloud Shell&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;source&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Windows.Terminal.Azure&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">]</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure><p>一些简单的配置已经注释在代码中，其中主题Scheme可以在</p><p>中选择你想要的配色。选择后添加到json文件的scheme数组中，然后在上方<code>profiles</code>选择想要使用的终端，添加。我这里因为windows主要使用PowerShell，所以直接将设置都加在<code>default</code>默认中了，宁可以在<code>List</code>中选择想要配置的终端。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><hr><p>不管怎么说，windows终于结束了难看的终端界面，而且这个终端还是开源的。所以有很大的可玩性，希望各位大佬能够玩出花来。</p><p>好了我继续去用cmder了……</p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>powerShell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>webpack总结</title>
    <link href="/2020/02/24/2020-02-24-webpack%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/02/24/2020-02-24-webpack%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><hr><ul><li>代码转换：<code>typeScript</code>编译成<code>JavaScript</code>、<code>scss，less</code>编译成<code>css</code></li><li>文件优化：压缩<code>JavaScript</code>、<code>html</code>、<code>css</code>文件，压缩合并图片等</li><li>代码分割：提供多个页面的公共代码，抽离首屏不需要的代码使其异步加载</li><li>模块合并：模块化的项目里会有很多模块和文件，构建狗能把模块分类合并</li><li>自动刷新：监听本地源代码，自动重构刷新浏览器</li><li>扩展性好，插件机制完善</li></ul><h2 id="打包过程"><a href="#打包过程" class="headerlink" title="打包过程"></a>打包过程</h2><hr><ol><li>利用babel完成代码转换，生成单个文件依赖</li><li>从入口开始分析，生成依赖图谱</li><li>将引用模块打包为立即执行函数</li><li>把最终的bundle文件写入bundle.js里</li></ol><h2 id="四大核心"><a href="#四大核心" class="headerlink" title="四大核心"></a>四大核心</h2><hr><ul><li>entry：入口，即js入口源文件</li><li>output：生成文件</li><li>loader：文件处理</li><li>plugins：插件</li></ul><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>webpack应该用哪个模块作为入口文件，作为构建内部依赖图的开始，进入入口后，webpack会找到哪些库和模块是入口依赖的，并随即被处理，最后输出到bundle.js的文件中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//单入口：entry是一个字符串</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span><br>&#125;<br><span class="hljs-comment">//多入口：entry是一个对象</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>  <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><hr><p>告诉webpack在哪输出bundles，以及怎么命名他，在配置文件中均可搞定</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//单入口配置项</span><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&#x27;./src/index.js&#x27;</span>,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&#x27;bundle.js’,</span><br><span class="hljs-string">        path: __dirname + &#x27;</span>/dist<span class="hljs-string">&#x27;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">//多入口配置项</span><br><span class="hljs-string">module.exports = &#123;</span><br><span class="hljs-string">  entry: &#123;</span><br><span class="hljs-string">    app: &#x27;</span>./src/app.<span class="hljs-property">js</span><span class="hljs-string">&#x27;,</span><br><span class="hljs-string">    search: &#x27;</span>./src/search.<span class="hljs-property">js</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  output: &#123;</span><br><span class="hljs-string">    filename: &#x27;</span>[name].<span class="hljs-property">js</span><span class="hljs-string">&#x27;,//[name]占位符确保文件名唯一</span><br><span class="hljs-string">    path: __dirname + &#x27;</span>/dist<span class="hljs-string">&#x27;</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">&#125;</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><h2 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h2><hr><p><code>loader</code>让webpack能够处理非<code>javaScript</code>文件，因为webpack自己只能看懂<code>javaScript</code>。<code>loader</code>能够把所有类型的文件转换成webpack能够处理的模块，然后利用打包能力对他进行处理</p><h3 id="Loader的特点"><a href="#Loader的特点" class="headerlink" title="Loader的特点"></a>Loader的特点</h3><ul><li>每一个loader的职责都是单一的，只能完成一种转换</li><li>loader本质上是node.js模块，这个模块需要导出一个函数</li><li>loader总是从右到左被调用</li></ul><h3 id="常用Loader"><a href="#常用Loader" class="headerlink" title="常用Loader"></a>常用Loader</h3><h4 id="处理样式"><a href="#处理样式" class="headerlink" title="处理样式"></a>处理样式</h4><ul><li><code>css-loader</code>加载css文件</li><li><code>style-loader</code>使用style标签把<code>css-loader</code>内部样式注入到html中</li><li><code>less-loader,sass-loader</code>解析css预处理器</li></ul><h4 id="处理js"><a href="#处理js" class="headerlink" title="处理js"></a>处理js</h4><p>让我们能够使用最新的js代码（ES6，ES7等）及让我们能够使用基于js进行了拓展的语言，比如JSX等</p><h4 id="处理文件"><a href="#处理文件" class="headerlink" title="处理文件"></a>处理文件</h4><p>通常使用的两种loader是<code>file-loader</code>和<code>url-loader</code>，两者主要的区别是<code>url-loader</code>能够设置图片的大小限制，如果大小超过限制，则行为等同于<code>file-loader</code>，如果图片大小不超过限制，那么图片会以base64的形式打包</p><h4 id="处理vue单文件"><a href="#处理vue单文件" class="headerlink" title="处理vue单文件"></a>处理vue单文件</h4><p><code>vue-loader</code>是webpack的加载器魔铠，它让我们的随心所欲的编写<code>.vue</code>格式的单文件组件。<code>vue-loader</code> 模块允许 <code>webpack</code> 使用单独的加载器模块（例如 <code>sass 或 scss 加载器</code>）提取和处理每个部分。该设置使我们可以使用 <code>.vue</code> 文件无缝编写程序。</p><p><strong>在文章最后，我们会尝试开发一个简易的loader来加深我们的理解</strong></p><h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><hr><p>专注于处理webpack在编译过程里某个特定任务的功能模块</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><p>是一个独立的模块</p></li><li><p>模块对外暴露一个js函数</p></li><li><p>函数的原型 <code>(prototype)</code> 上定义了一个注入 <code>compiler</code> 对象的 <code>apply</code>方法 <code>apply</code> 函数中需要有通过 <code>compiler</code> 对象挂载的 <code>webpack</code> 事件钩子，钩子的回调中能拿到当前编译的 <code>compilation</code> 对象，如果是异步编译插件的话可以拿到回调 <code>callback</code></p></li><li><p>完成自定义自编程流程并处理<code>complition</code>对象的内部数据</p></li><li><p>如果异步编译插件的话，数据处理完成后执行<code>callback</code>回调</p></li></ul><h3 id="常用Plugin"><a href="#常用Plugin" class="headerlink" title="常用Plugin"></a>常用Plugin</h3><ul><li><code>HotModuleReplacementPlugin</code> 代码热替换。因为 <code>Hot-Module-Replacement</code> 的热更新是依赖于 <code>webpack-dev-server</code>，后者是在打包文件改变时更新打包文件或者 reload 刷新整个页面，<code>HRM</code> 是只更新修改的部分。</li><li><code>HtmlWebpackPlugin</code>, 生成 html 文件。将 webpack 中<code>entry</code>配置的相关入口 chunk 和 <code>extract-text-webpack-plugin</code>抽取的 css 样式 插入到该插件提供的<code>template</code>或者<code>templateContent</code>配置项指定的内容基础上生成一个 html 文件，具体插入方式是将样式<code>link</code>插入到<code>head</code>元素中，<code>script</code>插入到<code>head</code>或者<code>body</code>中。</li><li><code>ExtractTextPlugin</code>, 将 css 成生文件，而非内联 。该插件的主要是为了抽离 css 样式,防止将样式打包在 js 中引起页面样式加载错乱的现象。</li><li><code>NoErrorsPlugin</code>报错但不退出 webpack 进程</li><li><code>UglifyJsPlugin</code>，代码丑化，开发过程中不建议打开。 <code>uglifyJsPlugin</code> 用来对 js 文件进行压缩，从而减小 js 文件的大小，加速 load 速度。<code>uglifyJsPlugin</code> 会拖慢 webpack 的编译速度，所有建议在开发简单将其关闭，部署的时候再将其打开。多个 html 共用一个 js 文件(chunk)，可用 <code>CommonsChunkPlugin</code></li><li><code>purifycss-webpack</code> 。打包编译时，可剔除页面和 js 中未被使用的 css，这样使用第三方的类库时，只加载被使用的类，大大减小 css 体积</li><li><code>optimize-css-assets-webpack-plugin</code>  压缩 css，优化 css 结构，利于网页加载和渲染</li><li><code>webpack-parallel-uglify-plugin</code>  可以并行运行 UglifyJS 插件，这可以有效减少构建时间</li></ul><p><strong>同样的，文章最后我们也会尝试开发一个Plugin</strong></p><h2 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h2><hr><h3 id="1、Webpack-项目初始化"><a href="#1、Webpack-项目初始化" class="headerlink" title="1、Webpack 项目初始化"></a>1、Webpack 项目初始化</h3><p><strong>1、新建 Web 项目</strong></p><p>新建一个目录，再进入项目根目录执行 npm init 来初始化最简单的采用了模块化开发的项目；最终生成 package.json 文件；</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> init<br>复制代码<br></code></pre></td></tr></table></figure><p><strong>2、安装 Webpack 到本项目</strong></p><p>（1）查看 Webpack 版本</p><p>运行以下命令可以查看 Webpack 的版本号</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> view webpack versions<br>复制代码<br></code></pre></td></tr></table></figure><p>（2）安装 Webpack</p><p>可以选择（1）步骤罗列得到的 Webpack 版本号，也可以安装最新稳定版、最新体验版本，相关命令如下所示，我选择安装 4.28.2 版本（没有为什么，就想装个 4.x 的版本）；</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 安装指定版本<br>npm i -D webpack@<span class="hljs-number">4.28</span>.<span class="hljs-number">2</span><br><br><span class="hljs-regexp">//</span> 安装最新稳定版<br>npm i -D webpack<br><br><span class="hljs-regexp">//</span> 安装最新体验版本<br>npm i -D webpack@beta<br>复制代码<br></code></pre></td></tr></table></figure><p>（3）安装 Webpack 脚手架</p><p>需要安装 Webpack 脚手架，才能在命令窗口执行 Webpack 命令，运行以下命令安装 Webpack 脚手架；</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">$ npm i -D webpack-<span class="hljs-keyword">cli</span><br>复制代码<br></code></pre></td></tr></table></figure><p><strong>3、使用 Webpack</strong></p><p>使用 Webpack 构建一个采用 CommonJS 模块化编写的项目；</p><p>（1）新建页面入口文件 index.html</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Webpack<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--导入 Webpack 输出的 JavaScript 文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br>复制代码<br></code></pre></td></tr></table></figure><p>（2）新建需要用到的 JS 文件</p><p>show.js 文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 操作 DOM 元素，把 content 显示到网页上</span><br>function <span class="hljs-keyword">show</span>(content) &#123;<br>  <span class="hljs-built_in">window</span>.<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;app&#x27;</span>).innerText = <span class="hljs-string">&#x27;Hello,&#x27;</span> + content;<br>&#125;<br><br><span class="hljs-comment">// 通过 CommonJS 规范导出 show 函数</span><br>module.exports = <span class="hljs-keyword">show</span>;<br>复制代码<br></code></pre></td></tr></table></figure><p>main.js 文件</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-comment">// 通过 CommonJS 规范导入 show 函数</span><br><span class="hljs-keyword">const</span> <span class="hljs-keyword">show</span> = require(<span class="hljs-string">&#x27;./show.js&#x27;</span>);<br><span class="hljs-comment">// 执行 show 函数</span><br><span class="hljs-keyword">show</span>(<span class="hljs-string">&#x27;Webpack&#x27;</span>);<br>复制代码<br></code></pre></td></tr></table></figure><p>（3）新建 Webpack 配置文件 webpack.config.js</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk">const path = require(<span class="hljs-string">&#x27;path&#x27;</span>);<br><br>module.exports = &#123;<br>  <span class="hljs-regexp">//</span> JavaScript 执行入口文件<br>  entry: <span class="hljs-string">&#x27;./main.js&#x27;</span>,<br>  output: &#123;<br>    <span class="hljs-regexp">//</span> 把所有依赖的模块合并输出到一个 bundle.js 文件<br>    filename: <span class="hljs-string">&#x27;bundle.js&#x27;</span>,<br>    <span class="hljs-regexp">//</span> 输出文件都放到 dist 目录下<br>    path: path.resolve(__dirname, <span class="hljs-string">&#x27;./dist&#x27;</span>),<br>  &#125;<br>&#125;;<br>复制代码<br></code></pre></td></tr></table></figure><p>（4）执行 webpack 命令进行构建</p><p>在 package.json 文件中配置编译命令，如下所示：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --config webpack.config.js&quot;</span>,<br>  &#125;,<br>复制代码<br></code></pre></td></tr></table></figure><p>执行以下命令进行项目的 Webpack 编译，成功后会在项目根目录下生成编译目录 dist ；</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ npm <span class="hljs-built_in">run</span> build<br>复制代码<br></code></pre></td></tr></table></figure><p>（5）运行 index.html</p><p>编译成功后，我们用浏览器打开 index.html 文件，能看到页面成功显示 “Hello Webpack”；</p><h3 id="2、Loader-配置"><a href="#2、Loader-配置" class="headerlink" title="2、Loader 配置"></a>2、Loader 配置</h3><p>本节通过为之前的例子添加样式，来尝试使用 Loader；</p><p>（1）新建样式文件 main.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#app</span>&#123;<br>  <span class="hljs-attribute">text-align</span>: center;<br>  <span class="hljs-attribute">color</span>:<span class="hljs-string">&#x27;#999&#x27;</span>;<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>（2）将 main.css 文件引入入口文件 main.js 中，如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 通过 CommonJS 规范导入 CSS 模块<br>require(<span class="hljs-string">&#x27;./main.css&#x27;</span>);<br><br><span class="hljs-regexp">//</span> 通过 CommonJS 规范导入 show 函数<br>const show = require(<span class="hljs-string">&#x27;./show.js&#x27;</span>);<br><span class="hljs-regexp">//</span> 执行 show 函数<br>show(<span class="hljs-string">&#x27;Webpack&#x27;</span>);<br>复制代码<br></code></pre></td></tr></table></figure><p>（3）Loader 配置</p><p>以上修改后去执行 Webpack 构建是会报错的，因为 Webpack 不原生支持解析 CSS 文件。要支持非 JavaScript 类型的文件，需要使用 Webpack 的 Loader 机制；</p><p>（3.1）运行以下命令，安装 style-loader 和 css-loader，其中：</p><ul><li>css-loader 用于读取 CSS 文件；</li><li>style-loader 把 CSS 内容注入到 JavaScript 中；</li></ul><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> i -D style-loader css-loader<br>复制代码<br></code></pre></td></tr></table></figure><p>（3.2）进行以下配置</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">module:&#123;<br>rules:[<br>  &#123;<br><span class="hljs-regexp">//</span> 用正则去匹配要用该 loader 转换的 CSS 文件<br>test:<span class="hljs-regexp">/\.css$/</span>,<br>use:[<span class="hljs-string">&#x27;style-loader&#x27;</span>,<span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>  &#125;<br> ]<br>&#125;<br>复制代码<br></code></pre></td></tr></table></figure><p>（4）查看结果</p><p>编译后，刷新 index.html ，查看刚刚的样式 loader 已经起作用；</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/10/16f8ccdeb77f673c?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="1"></p><h3 id="3、Plugin-配置"><a href="#3、Plugin-配置" class="headerlink" title="3、Plugin 配置"></a>3、Plugin 配置</h3><p>（1）安装样式提取插件  extract-text-webpack-plugin</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">$ <span class="hljs-built_in">npm</span> i -D extract-text-webpack-plugin@next<br>复制代码<br></code></pre></td></tr></table></figure><p>（2）plugin 文件配置如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css">  module:&#123;<br>    rules:[<br>      &#123;<br>        // 用正则去匹配要用该 loader 转换的 CSS 文件<br>        test:/\.css$/,<br>        use:ExtractTextPlugin.<span class="hljs-built_in">extract</span>(&#123;<br>          use:[<span class="hljs-string">&#x27;css-loader&#x27;</span>]<br>        &#125;),<br>      &#125;<br>    ]<br>  &#125;,<br>  plugins:[<br>    new <span class="hljs-built_in">ExtractTextPlugin</span>(&#123;<br>       // 从 <span class="hljs-selector-class">.js</span> 文件中提取出来的 <span class="hljs-selector-class">.css</span> 文件的名称<br>       filename:`[name]_[hash:<span class="hljs-number">8</span>].css`<br>    &#125;),<br>  ]<br>复制代码<br></code></pre></td></tr></table></figure><p>（3）查看结果</p><p>通过以上配置后，执行 Webapack 的执行命令，发现在 dist 目录下，生成对应的 css 文件；存在的坑点：</p><ul><li>我们需要手动将生成的 css 文件引入到 index.html 中；</li><li>修改 css 文件后，会生成新的 css 文件，原先的不会删除；</li></ul><h3 id="4、使用-DevServer"><a href="#4、使用-DevServer" class="headerlink" title="4、使用 DevServer"></a>4、使用 DevServer</h3><p>（1）执行以下命令安装 webpack-dev-server</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">$ npm i -D  webpack-dev-<span class="hljs-keyword">server</span><br>复制代码<br></code></pre></td></tr></table></figure><p>在 package.json 中配置启动命令</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack --config webpack.config.js&quot;</span>,<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server&quot;</span>,<br>  &#125;,<br>复制代码<br></code></pre></td></tr></table></figure><p>运行命令后，就可以启动 HTTP 服务</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">$ npm <span class="hljs-built_in">run</span> dev<br>复制代码<br></code></pre></td></tr></table></figure><p>启动结果如下所示，我们可以通过 <a href="http://localhost:8080/">http://localhost:8080/</a>  访问我们的 index.html 的demo</p><p><img src="https://user-gold-cdn.xitu.io/2020/1/10/16f8ccdec2f9318d?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="1"></p><p>（2）实时预览</p><p>我们在运行命令后面添加参数 –watch 实现实时预览，配置如下所示：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs 1c">  <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;dev&quot;</span>: <span class="hljs-string">&quot;webpack-dev-server --watch&quot;</span><br>  &#125;,<br>复制代码<br></code></pre></td></tr></table></figure><p>然后我们修改 main.js 的传入参数，发现并不能实时预览，也没有报错！！！ why?</p><p>踩坑：</p><p>在 index.html 中需要将 js 的路径修改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>  <br>复制代码<br></code></pre></td></tr></table></figure><p>而不能是之前的（因为这个是编译生成的，并不是通过 devServer 生成放在内存的）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./dist/bundle.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br>复制代码<br></code></pre></td></tr></table></figure><p>（3）模块热替换</p><p>可以通过配置  – hot  进行模块热替换；</p><h2 id="番外"><a href="#番外" class="headerlink" title="番外"></a>番外</h2><hr><p>没错，文章最后了，现在我们开始开发一个<code>loader</code>和<code>plugin</code></p><h3 id="开发一个loader"><a href="#开发一个loader" class="headerlink" title="开发一个loader"></a>开发一个<code>loader</code></h3><p>需求：开发一个<code>loader</code>，将KobeBryant<code>转换为</code>mamba forever`。</p><h4 id="1-编写loader"><a href="#1-编写loader" class="headerlink" title="1.编写loader"></a>1.编写loader</h4><p>新建目录<code>my-loader</code>作为名字，执行<code>npm init -y</code>快速创建一个模块化项目，然后新建<code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">content</span>) &#123;<br><span class="hljs-keyword">return</span> content &amp;&amp; content.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/KobeBryant/gi</span> , <span class="hljs-string">&#x27;mamba forever&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-注册模块"><a href="#2-注册模块" class="headerlink" title="2.注册模块"></a>2.注册模块</h4><p>一般情况下，我们需要的loader都是利用npm安装，但是我们可以使用<code>npm link</code>命令，以求在不发布模块的情况下，将本地的源码链接到项目的<code>node_modules</code>下。在项目的根目录下执行以下命令</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">λ npm link my<span class="hljs-literal">-loader</span><br></code></pre></td></tr></table></figure><h4 id="3-在webpack中配置loader"><a href="#3-在webpack中配置loader" class="headerlink" title="3.在webpack中配置loader"></a>3.在webpack中配置loader</h4><p>在<code>webpack.base.config.js</code>中加上以下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123;<br><span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.js/</span>,<br><span class="hljs-attr">loader</span>:<span class="hljs-string">&#x27;my-loader&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们js里所有的字符串<code>KobeBryant</code>就会替换为<code>mamba forever</code>了</p><h4 id="4-配置参数"><a href="#4-配置参数" class="headerlink" title="4.配置参数"></a>4.配置参数</h4><p>前面我们是写死的替换，如果我们想要通过配置项来进行改变怎么办</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// index.js</span><br><span class="hljs-keyword">var</span> utils = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;loader-utils&#x27;</span>)<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params">content</span>) &#123;<br>    <span class="hljs-keyword">const</span> options = utils.<span class="hljs-title function_">getOptions</span>(<span class="hljs-variable language_">this</span>)<br>    <span class="hljs-keyword">return</span> content &amp;&amp; content.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/KobeBryant/gi</span> , options.<span class="hljs-property">name</span>)<br>&#125;<br><br><span class="hljs-comment">// webpack.base.conf.js</span><br>&#123;<br>  <span class="hljs-attr">test</span>:<span class="hljs-regexp">/\.js/</span>,<br>  <span class="hljs-attr">use</span>: &#123;<br>    <span class="hljs-attr">loader</span>: <span class="hljs-string">&#x27;my-loader&#x27;</span>,<br>    <span class="hljs-attr">options</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;KobeBryant&#x27;</span>,<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开发一个Plugin"><a href="#开发一个Plugin" class="headerlink" title="开发一个Plugin"></a>开发一个Plugin</h3><ul><li>webpack在编译中，会广播很多事件</li><li>webpack应用了观察者模式，插件可以监听webpack事件来触发对应的处理逻辑</li><li>插件中可以使用webpack的api</li></ul><h4 id="1-编写插件"><a href="#1-编写插件" class="headerlink" title="1.编写插件"></a>1.编写插件</h4><p>创建目录<code>my-plugin</code>作为编写的插件，执行<code>npm init -y</code>快速创建一个模块化项目，然后新建<code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyPlugin</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">doneCakkback , failCallback</span>) &#123;<br><span class="hljs-comment">//保存在创建实例时候传入的回调函数</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">doneCallback</span> = doneCallback<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">failCallback</span> = failCallback<br>&#125;<br>    <br>    <span class="hljs-title function_">apply</span>(<span class="hljs-params">compiler</span>) &#123;<br>        <span class="hljs-comment">//成功完成一次完整的编译和输出时，会触发done</span><br>        compile.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&#x27;done&#x27;</span> , <span class="hljs-function"><span class="hljs-params">stats</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">doneCallback</span>(stats)<br>        &#125;)<br>        <br>        <span class="hljs-comment">//出现异常的时候，触发fail</span><br>        compiler.<span class="hljs-title function_">plugin</span>(<span class="hljs-string">&#x27;fail&#x27;</span> , <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">failCallback</span>(err)<br>        &#125;)<br>    &#125;<br>&#125;<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = <span class="hljs-title class_">MyPlugin</span><br></code></pre></td></tr></table></figure><h4 id="2-注册模块-1"><a href="#2-注册模块-1" class="headerlink" title="2.注册模块"></a>2.注册模块</h4><p>同样的，我们link一下，以便于我们能直接使用本地的模块</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell">λ npm link my<span class="hljs-literal">-plugin</span><br></code></pre></td></tr></table></figure><h4 id="3-配置插件"><a href="#3-配置插件" class="headerlink" title="3.配置插件"></a>3.配置插件</h4><p>在<code>webpack.base.conf.js</code>加上以下配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">plugins</span>: [<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPlugin</span>(<br>    <span class="hljs-function"><span class="hljs-params">stats</span> =&gt;</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;编译成功&#x27;</span>)<br>        &#125;，<br>        err =&gt; &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&#x27;编译失败&#x27;</span>)<br>        &#125;<br>    )<br>]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>webpack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>webpack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fetch也有坑！</title>
    <link href="/2020/02/20/2020-02-20-%E5%85%B3%E4%BA%8EFetch/"/>
    <url>/2020/02/20/2020-02-20-%E5%85%B3%E4%BA%8EFetch/</url>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>最近捣鼓RN，做了个项目，但是到调试接口的时候出了一个小问题，因为以前用的都是ajax和axios，这回rn自己提供了一个fetch的api，所以就索性用提供的了，然后就掉进坑里了……他！报错了</p><p><img src="https://i.loli.net/2020/02/20/v2CiEucYsNQHyPf.png" alt="TIM截图20200220202756.png"></p><p><code>Unexpected token in JSON at position 0</code> 眼熟的错误，可能以前当你发送一个HTTP请求的时候，都曾出现过这个错误提示或者相似的错误，那这个错误是由什么引起的呢</p><h3 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h3><p>这些错误发生在你向服务器发送请求的时候，返回值不是JSON而你却用JSON的方法解析的时候，可能会发生这种情况</p><p><code>fetch(’/api’).then(res =&gt; res.json())</code></p><p>这句代码本身是没有问题的，他会得到一个返回值，问题出在<code>res.json()</code>上面</p><p><code>Unexpected token in JSON at position 0</code> 他所提示的符号和位置可能不同，但是引起他的原因是一样的，代码解析的JSON不是有效的JSON</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>既然用JSON方法没法将结果打印出来，那可以换一个思路，先用<code>res.text()</code>将结果打印出来，查看哪里出问题了</p><p><img src="https://i.loli.net/2020/02/20/5K6LmGiwNhHpsyf.png" alt="image.png"></p><p>可以看到，fetch返回值是异步的，所以打印一定要在<code>.then()&#123;&#125;</code>里进行，因为是异步的，这里主要看<code>[[PromiseValue]]</code>里的值，会发现他并不是一个纯粹的对象，他前边还有字符串，可以猜测这个接口使用JSP去解决跨域的（<del>太low了也</del>）。</p><p>现在我们就懂了，是因为返回值不是JSON，那就好办了，下面我就不过多阐述了，应该都会了</p><h3 id="番外-：-是服务器的锅？"><a href="#番外-：-是服务器的锅？" class="headerlink" title="番外 ： 是服务器的锅？"></a>番外 ： 是服务器的锅？</h3><p>这里顺便再记录几个你的接口可能返回html而不是JSON的问题</p><ul><li><p><strong>请求的url不存在 ， 服务器以HTML的方式返回404页面</strong></p></li><li><p><strong>添加了新的路由，服务器需要重启</strong></p></li><li><p><strong>客户端没有设置代理</strong></p><p>如果在使用 CRA的webpack dev server时，你可以设置一个指向后端的代理</p></li><li><p><strong>api的根url是<code>/</code></strong></p><p>如果你在通过webpack或者CRA使用代理，确认你的api不在根层级，这样会让代理服务器混淆，你将得到一个HTML，你可以在你的api前面增加一个命名空间 <code>/api/</code></p></li></ul><hr><p><img src="https://i.loli.net/2020/02/20/nFpzWqlmBtMoIZv.png" alt="点点看吧，.png"></p>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>❗Yarn的cache 坑！</title>
    <link href="/2020/02/16/2020-02-16-yarn%E4%BB%A5%E5%8F%8Anpm%E6%B8%85%E7%90%86/"/>
    <url>/2020/02/16/2020-02-16-yarn%E4%BB%A5%E5%8F%8Anpm%E6%B8%85%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>过完年在家捣鼓电脑，发现C盘快满了，又开始了各种优化C盘的方法，首先当然是用spaceSniffer去查看一下占用情况，不看不知道一看吓一跳，Yarn竟然在C盘个人目录有面有7个G多的大小，下面就简单列举几个Yarn提供的关于缓存的命令。</p><h3 id="一、yarn-cache-dir"><a href="#一、yarn-cache-dir" class="headerlink" title="一、yarn cache dir"></a>一、<code>yarn cache dir</code></h3><p>运行命令会显示当前缓存目录，默认是C盘</p><h3 id="二、yarn-cache-clean-lt-module-name-gt"><a href="#二、yarn-cache-clean-lt-module-name-gt" class="headerlink" title="二、yarn cache clean [&lt;module_name...&gt;]"></a>二、<code>yarn cache clean [&lt;module_name...&gt;]</code></h3><p>运行命令会清理缓存包，若未指定包名则会全部清理，指定则清理指定包。</p><p><strong>注意</strong>：要先清理包在重新配置目录，否则会使之前的缓存无法清除</p><h3 id="三、yarn-config-set-cache-folder"><a href="#三、yarn-config-set-cache-folder" class="headerlink" title="三、yarn config set cache-folder"></a>三、<code>yarn config set cache-folder</code></h3><p>设置当前缓存目录</p><hr><p>同样的，npm也有一个存储缓存包的位置，这里也把相应的命令提供出来</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell">npm config get cache<br>npm cache clean <span class="hljs-literal">--force</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;F:\ProgramFile\nodejs\node_module\node_cache&quot;</span><br>npm cache verify<br></code></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><blockquote><p><a href="https://yarn.bootcss.com/docs/cli/cache/">https://yarn.bootcss.com/docs/cli/cache/</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>others</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Yarn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现MyRedux（三）</title>
    <link href="/2019/12/16/2019-12-16-Redux%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2019/12/16/2019-12-16-Redux%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="搞一手reducer"><a href="#搞一手reducer" class="headerlink" title="搞一手reducer"></a>搞一手<code>reducer</code></h3><p>有了前面两篇，现在有了一个通用的<code>createStore</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createStore</span> (state, stateChanger) &#123;<br>  <span class="hljs-keyword">const</span> listeners = []<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">subscribe</span> = (<span class="hljs-params">listener</span>) =&gt; listeners.<span class="hljs-title function_">push</span>(listener)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getState</span> = (<span class="hljs-params"></span>) =&gt; state<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatch</span> = (<span class="hljs-params">action</span>) =&gt; &#123;<br>    state = <span class="hljs-title function_">stateChanger</span>(state, action) <span class="hljs-comment">// 覆盖原对象</span><br>    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> <span class="hljs-title function_">listener</span>())<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123; getState, dispatch, subscribe &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那他怎么用呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> appState = &#123;<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js 小书&#x27;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">content</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js 小书内容&#x27;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">stateChanger</span> (state, action) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">title</span>: &#123;<br>          ...state.<span class="hljs-property">title</span>,<br>          <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span><br>        &#125;<br>      &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">title</span>: &#123;<br>          ...state.<span class="hljs-property">title</span>,<br>          <span class="hljs-attr">color</span>: action.<span class="hljs-property">color</span><br>        &#125;<br>      &#125;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(appState, stateChanger)<br>...<br></code></pre></td></tr></table></figure><p>其实可以优化一下，<code>appStore</code>和<code>stateChange</code>可以合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">stateChanger</span> (state, action) &#123;<br>  <span class="hljs-keyword">if</span> (!state) &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">title</span>: &#123;<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js 小书&#x27;</span>,<br>        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>      &#125;,<br>      <span class="hljs-attr">content</span>: &#123;<br>        <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js 小书内容&#x27;</span>,<br>        <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">title</span>: &#123;<br>          ...state.<span class="hljs-property">title</span>,<br>          <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span><br>        &#125;<br>      &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123;<br>        ...state,<br>        <span class="hljs-attr">title</span>: &#123;<br>          ...state.<span class="hljs-property">title</span>,<br>          <span class="hljs-attr">color</span>: action.<span class="hljs-property">color</span><br>        &#125;<br>      &#125;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>stateChange</code>现在既充当了获取初始化数据的功能，也充当了生成更新数据的功能，如果传入了<code>state</code>就更新数据，否则为初始化数据，那<code>createStore</code>可以优化成一个参数，因为<code>state</code>和<code>stateChange</code>可以合并</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createStore</span> (stateChanger) &#123;<br>  <span class="hljs-keyword">let</span> state = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">const</span> listeners = []<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">subscribe</span> = (<span class="hljs-params">listener</span>) =&gt; listeners.<span class="hljs-title function_">push</span>(listener)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getState</span> = (<span class="hljs-params"></span>) =&gt; state<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatch</span> = (<span class="hljs-params">action</span>) =&gt; &#123;<br>    state = <span class="hljs-title function_">stateChanger</span>(state, action)<br>    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> <span class="hljs-title function_">listener</span>())<br>  &#125;<br>  <span class="hljs-title function_">dispatch</span>(&#123;&#125;) <span class="hljs-comment">// 初始化 state</span><br>  <span class="hljs-keyword">return</span> &#123; getState, dispatch, subscribe &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>createStore</code> 内部的 <code>state</code> 不再通过参数传入，而是一个局部变量 <code>let state = null</code>。<code>createStore</code> 的最后会手动调用一次 <code>dispatch(&#123;&#125;)</code>，<code>dispatch</code> 内部会调用 <code>stateChanger</code>，这时候的 <code>state</code> 是 <code>null</code>，所以这次的 <code>dispatch</code> 其实就是初始化数据了。<code>createStore</code> 内部第一次的 <code>dispatch</code> 导致 <code>state</code> 初始化完成，后续外部的 <code>dispatch</code> 就是修改数据的行为了。</p><p><code>stateChange</code>可以换一个名字，就叫他<code>reducer</code>，不要问，问就是<code>reducer</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createStore</span> (reducer) &#123;<br>  <span class="hljs-keyword">let</span> state = <span class="hljs-literal">null</span><br>  <span class="hljs-keyword">const</span> listeners = []<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">subscribe</span> = (<span class="hljs-params">listener</span>) =&gt; listeners.<span class="hljs-title function_">push</span>(listener)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getState</span> = (<span class="hljs-params"></span>) =&gt; state<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatch</span> = (<span class="hljs-params">action</span>) =&gt; &#123;<br>    state = <span class="hljs-title function_">reducer</span>(state, action)<br>    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> <span class="hljs-title function_">listener</span>())<br>  &#125;<br>  <span class="hljs-title function_">dispatch</span>(&#123;&#125;) <span class="hljs-comment">// 初始化 state</span><br>  <span class="hljs-keyword">return</span> &#123; getState, dispatch, subscribe &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="reducer"><a href="#reducer" class="headerlink" title="reducer"></a><code>reducer</code></h4><p><code>createStore</code>接受一个叫<code>reducer</code>的函数，<strong>他一定是一个纯函数</strong>，他接收两个参数，一个是<code>state</code>，一个是<code>action</code></p><p>他不能干任何事情，只能<strong>初始化和计算新的<code>state</code></strong></p><hr><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>从第一篇开始，首先发现如果共享的状态能被随意修改，那程序地行为会不可预料，所以我们要求只能通过<code>dispatch</code>去进行数据修改，而且必须要在<code>action</code>中声明，然后我们把它抽象出来成为一个<code>createStore</code>，它能生产<code>store</code>，里面有<code>getState</code>和<code>dispatch</code>让我们使用</p><p>后来发现每次修改数据都要重新渲染，而我们希望能够自动渲染视图，所以使用了订阅者模式，通过<code>store.subscribe</code>订阅数据修改事件，为了让它自动渲染视图</p><p>在我们使用的时候发现每次都重新渲染视图会有很大的性能问题，所以使用共享结构的对象来解决问题，而后让<code>stateChanger</code>更名为<code>reducer</code>，并让他是一个纯函数，负责初始化<code>state</code>，根据<code>state</code>和<code>action</code>计算具有共享结构的新<code>state</code></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>immutable.js</title>
    <link href="/2019/12/16/2019-12-16-immutable.js/"/>
    <url>/2019/12/16/2019-12-16-immutable.js/</url>
    
    <content type="html"><![CDATA[<img src="https://upload-images.jianshu.io/upload_images/2165169-cebb05bca02f1772?imageMogr2/auto-orient/strip|imageView2/2/w/613/format/webp" style="zoom:80%;" /><h2 id="什么是Immutable-Data？"><a href="#什么是Immutable-Data？" class="headerlink" title="什么是Immutable Data？"></a>什么是Immutable Data？</h2><p>扔一段官方文档，我也看不明白（过了个假六级）</p><blockquote><p>Immutable data encourages pure functions (data-in, data-out) and lends itself to much simpler application development and enabling techniques from functional programming such as lazy evaluation.</p></blockquote><p>实现原理：<strong>Persistent Data Structure （持久化数据结构）</strong></p><p>也就是用旧数据创建新数据的时候要保证旧数据同时可用且不变，而且为了避免深拷贝把所有节点复制一遍带来的性能损耗，Immutable使用了<code>Structural Sharing</code>（结构共享），就是说如果对象数中一个节点发生变化，只修改这个节点和受它影响的父节点，其他节点共享，如图</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="1-降低Mutable带来的复杂度"><a href="#1-降低Mutable带来的复杂度" class="headerlink" title="1.降低Mutable带来的复杂度"></a>1.降低Mutable带来的复杂度</h3><p>引用赋值虽然可以节省内存，但是当工程变的庞大，可变状态会成为噩梦，通常是理由深拷贝来避免，但是过度消耗内存</p><h3 id="2-节省内存空间"><a href="#2-节省内存空间" class="headerlink" title="2.节省内存空间"></a>2.节省内存空间</h3><p>因为是结构共享，所以Immutable使用这种方式会尽量复用内存</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">import</span> &#123; <span class="hljs-built_in">Map</span> &#125; from <span class="hljs-string">&#x27;immutable&#x27;</span>;<br>let a = <span class="hljs-built_in">Map</span>(&#123;<br>  select: <span class="hljs-string">&#x27;users&#x27;</span>,<br>  filter: <span class="hljs-built_in">Map</span>(&#123; name: <span class="hljs-string">&#x27;Cam&#x27;</span> &#125;)<br>&#125;)<br>let b = a.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;people&#x27;</span>);<br><br>a === b; <span class="hljs-comment">// false</span><br>a.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;filter&#x27;</span>) === b.<span class="hljs-keyword">get</span>(<span class="hljs-string">&#x27;filter&#x27;</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>这里只有<code>select</code>变化了，所以<code>filter</code>节点是共享的</p><h3 id="Undo-Redo-Copy-Paste"><a href="#Undo-Redo-Copy-Paste" class="headerlink" title="Undo/Redo , Copy/Paste"></a>Undo/Redo , Copy/Paste</h3><p>每次数据都不一样，所以可以把数据放到数组里存储，想拿哪次得到的数据都可以（话虽如此，我却没用过）</p><h3 id="函数式编程"><a href="#函数式编程" class="headerlink" title="函数式编程"></a>函数式编程</h3><hr><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>不说了自己看吧</p><h2 id="Immutable-js的数据类型"><a href="#Immutable-js的数据类型" class="headerlink" title="Immutable.js的数据类型"></a>Immutable.js的数据类型</h2><blockquote><ul><li><p>List：有序序列集，类似Array</p></li><li><p>Map：无序序列集，类似Object</p></li><li><p>Seq：这表示一系列值，但不能由具体的数据结构支持。</p></li></ul><ul><li>等……（以后再添加）</li></ul></blockquote><h2 id="Immutable-js-常用API"><a href="#Immutable-js-常用API" class="headerlink" title="Immutable.js 常用API"></a>Immutable.js 常用API</h2><ul><li><p><code>fromJS()</code></p><ul><li>作用：把一个JS数据转换成Immutable类型数据</li><li>用法：<code>fromJS(value , converter)</code></li><li>参数：value是要转变的数据，converter[可选]是要做的操作，默认会把数组转成LIst，对象转成Map</li></ul></li><li><p><code>toJS()</code></p><ul><li>作用：把Immutable类型数据转换成JS类型数据</li><li>用法：<code>value.toJS()</code></li></ul></li><li><p><code>is()</code></p><ul><li>作用：对两个对象进行比较</li><li>用法：<code>is(map1 , map2)</code></li><li>简介：和JS中的对象比较不同，JS中比较两个对象是比较地址，而Immutable中比较的是对象的hashCode和valueOf，只要两者hashCode相等，值就相同，避免深度遍历，提高性能</li></ul></li><li><p><code>List()</code>和<code>Map()</code></p><ul><li><p>作用：创建一个新的List/Map对象</p></li><li><p>用法</p></li><li><p>```dart<br>//List<br>Immutable.List(); // 空List<br>Immutable.List([1, 2]);</p><p>//Map<br>Immutable.Map(); // 空Map<br>Immutable.Map({ a: ‘1’, b: ‘2’ });</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>- `get<span class="hljs-literal">()</span>`、`get<span class="hljs-constructor">In()</span>`<br><br>  - 获取数据结构中的数据<br><br>  - ```dart<br>    <span class="hljs-comment">//获取List索引的元素</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImmutableData</span>.</span></span>get(<span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-comment">// 获取Map对应key的value</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImmutableData</span>.</span></span>get(<span class="hljs-character">&#x27;a&#x27;</span>);<br>    <br>    <span class="hljs-comment">// 获取嵌套数组中的数据</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImmutableData</span>.</span></span>get<span class="hljs-constructor">In([1, 2])</span>;<br>    <br>    <span class="hljs-comment">// 获取嵌套map的数据</span><br>    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ImmutableData</span>.</span></span>get<span class="hljs-constructor">In([&#x27;<span class="hljs-params">a</span>&#x27;, &#x27;<span class="hljs-params">b</span>&#x27;])</span>;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><code>has()</code>、<code>hasIn()</code></p><ul><li><p>判断是否存在某个key</p></li><li><p>```dart<br>Immutable.fromJS([1,2,3,{a:4,b:5}]).has(‘0’); //true<br>Immutable.fromJS([1,2,3,{a:4,b:5}]).has(‘0’); //true<br>Immutable.fromJS([1,2,3,{a:4,b:5}]).hasIn([3,’b’]) //true</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><br>- 设置`<span class="hljs-keyword">set</span>()`、`setIn()`<br><br>  - <span class="hljs-keyword">set</span>  =&gt;  设置第一层key ， index的值<br><br>  - setIn =&gt;  设置深层结构中属性的值<br><br>  - ```dart<br>    const originalList = List([ <span class="hljs-number">0</span> ]);<br>    <span class="hljs-comment">// List [ 0 ]</span><br>    originalList.<span class="hljs-keyword">set</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">// List [ 0, 1 ]</span><br>    originalList.<span class="hljs-keyword">set</span>(<span class="hljs-number">0</span>, <span class="hljs-string">&#x27;overwritten&#x27;</span>);<br>    <span class="hljs-comment">// List [ &quot;overwritten&quot; ]</span><br>    originalList.<span class="hljs-keyword">set</span>(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>    <span class="hljs-comment">// List [ 0, undefined, 2 ]</span><br>    <br>    List().<span class="hljs-keyword">set</span>(<span class="hljs-number">50000</span>, <span class="hljs-string">&#x27;value&#x27;</span>).size;<br>    <span class="hljs-comment">// 50001</span><br>    <br>    const originalMap = Map()<br>    const <span class="hljs-keyword">new</span><span class="hljs-type">erMap</span> = originalMap.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;value&#x27;</span>)<br>    const <span class="hljs-keyword">new</span><span class="hljs-type">estMap</span> = <span class="hljs-keyword">new</span><span class="hljs-type">erMap</span>.<span class="hljs-keyword">set</span>(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-string">&#x27;newer value&#x27;</span>)<br>    <br>    originalMap<br>    <span class="hljs-comment">// Map &#123;&#125;</span><br>    <span class="hljs-keyword">new</span><span class="hljs-type">erMap</span><br>    <span class="hljs-comment">// Map &#123; &quot;key&quot;: &quot;value&quot; &#125;</span><br>    <span class="hljs-keyword">new</span><span class="hljs-type">estMap</span><br>    <span class="hljs-comment">// Map &#123; &quot;key&quot;: &quot;newer value&quot; &#125;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>跟js中不同，List中不存在空位，[,,,],List中若没有值，则为undefined。</strong></p></li><li><p><code>setIn()</code></p></li><li><p>```dart<br>const originalMap = Map({<br>  subObject: Map({</p><pre><code class="hljs">subKey: &#39;subvalue&#39;,subSubObject: Map(&#123;  subSubKey: &#39;subSubValue&#39;&#125;)</code></pre><p>  })<br>})</p><p>const newMap = originalMap.setIn([‘subObject’, ‘subKey’], ‘ha ha!’)<br>// Map {<br>//   “subObject”: Map {<br>//     “subKey”: “ha ha!”,<br>//     “subSubObject”: Map { “subSubKey”: “subSubValue” }<br>//   }<br>// }</p><p>const newerMap = originalMap.setIn(<br>  [‘subObject’, ‘subSubObject’, ‘subSubKey’],<br>  ‘ha ha ha!’<br>)<br>// Map {<br>//   “subObject”: Map {<br>//     “subKey”: “subvalue”,<br>//     “subSubObject”: Map { “subSubKey”: “ha ha ha!” }<br>//   }<br>// }</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript">  <br>- `<span class="language-javascript"><span class="hljs-title function_">update</span>()</span>`<br><br>  - 更新数据<br><br>  - ```<span class="language-javascript">dart</span><br><span class="language-javascript">    <span class="hljs-comment">////List</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> list = <span class="hljs-title class_">List</span>([ <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span> ])</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> result = list.<span class="hljs-title function_">update</span>(<span class="hljs-number">2</span>, <span class="hljs-function"><span class="hljs-params">val</span> =&gt;</span> val.<span class="hljs-title function_">toUpperCase</span>())</span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">///Map</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> aMap = <span class="hljs-title class_">Map</span>(&#123; <span class="hljs-attr">key</span>: <span class="hljs-string">&#x27;value&#x27;</span> &#125;)</span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> newMap = aMap.<span class="hljs-title function_">update</span>(<span class="hljs-string">&#x27;key&#x27;</span>, <span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> value + value)</span><br><span class="language-javascript">        </span><br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="关于merge"><a href="#关于merge" class="headerlink" title="关于merge"></a>关于merge</h2><p>​    merge</p><p>作用：浅合并，新数据与旧数据对比，旧数据中不存在的属性直接添加，就数据中已存在的属性用新数据中的覆盖</p><h6 id="mergrWith"><a href="#mergrWith" class="headerlink" title="mergrWith"></a>mergrWith</h6><p>作用：自定义浅合并，可自行设置某些属性的值</p><h6 id="mergeIn"><a href="#mergeIn" class="headerlink" title="mergeIn"></a>mergeIn</h6><p>作用：对深层数据进行浅合并</p><h6 id="mergeDeep"><a href="#mergeDeep" class="headerlink" title="mergeDeep"></a>mergeDeep</h6><p>作用：深合并，新旧数据中同时存在的的属性为新旧数据合并之后的数据</p><h6 id="mergeDeepIn"><a href="#mergeDeepIn" class="headerlink" title="mergeDeepIn"></a>mergeDeepIn</h6><p>作用：对深层数据进行深合并</p><h6 id="mergrDeepWith"><a href="#mergrDeepWith" class="headerlink" title="mergrDeepWith"></a>mergrDeepWith</h6><p>作用：自定义深合并，可自行设置某些属性的值</p><p>这里用一段示例彻底搞懂merge，此示例为Map结构，List与Map原理相同</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">const</span> Map1 = Immutable.fromJS(&#123;a:<span class="hljs-number">111</span>,b:<span class="hljs-number">222</span>,c:&#123;d:<span class="hljs-number">333</span>,e:<span class="hljs-number">444</span>&#125;&#125;);<br><span class="hljs-keyword">const</span> Map2 = Immutable.fromJS(&#123;a:<span class="hljs-number">111</span>,b:<span class="hljs-number">222</span>,c:&#123;e:<span class="hljs-number">444</span>,f:<span class="hljs-number">555</span>&#125;&#125;);<br><br><span class="hljs-keyword">const</span> Map3 = Map1.merge(Map2);<br> <span class="hljs-comment">//Map &#123;a:111,b:222,c:&#123;e:444,f:555&#125;&#125;</span><br><span class="hljs-keyword">const</span> Map4 = Map1.mergeDeep(Map2);<br> <span class="hljs-comment">//Map &#123;a:111,b:222,c:&#123;d:333,e:444,f:555&#125;&#125;</span><br><span class="hljs-keyword">const</span> Map5 = Map1.mergeWith((oldData,newData,key)=&gt;&#123;<br>     <span class="hljs-keyword">if</span>(key === <span class="hljs-string">&#x27;a&#x27;</span>)&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-number">666</span>;<br>     &#125;<span class="hljs-keyword">else</span>&#123;<br>       <span class="hljs-keyword">return</span> newData<br>     &#125;<br>   &#125;,Map2);<br> <span class="hljs-comment">//Map &#123;a:666,b:222,c:&#123;e:444,f:555&#125;&#125;</span><br></code></pre></td></tr></table></figure><hr><p>更多API见</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现MyRedux（二）</title>
    <link href="/2019/12/04/2019-12-04-Redux%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2019/12/04/2019-12-04-Redux%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="纯函数（Pure-Function）"><a href="#纯函数（Pure-Function）" class="headerlink" title="纯函数（Pure Function）"></a>纯函数（Pure Function）</h3><blockquote><p>简单说，<strong>一个函数的返回结果只依赖于他的参数，并且执行过程中没有副作用</strong>，就是纯函数</p></blockquote><p>从上面看，纯函数需要两个条件：</p><ul><li>函数的返回结果只依赖于它的参数</li><li>函数的执行过程没有副作用</li></ul><p>现在分别看一下两个条件</p><ol><li><p><strong>函数的返回结果只依赖于它的参数</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">foo</span> = (<span class="hljs-params">b</span>) =&gt; a + b<br><span class="hljs-title function_">foo</span>(<span class="hljs-number">2</span>) <span class="hljs-comment">// =&gt; 3</span><br></code></pre></td></tr></table></figure><p><code>foo</code>就不是一个纯函数，因为他的返回值要依赖外部变量<code>a</code>，我们不知道<code>a</code>的情况下，不能保证<code>foo(2)</code>的返回值是3，如果<code>a</code>变化，那返回值是<strong>不可预料</strong>的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">foo</span> = (<span class="hljs-params">x, b</span>) =&gt; x + b<br><span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>) <span class="hljs-comment">// =&gt; 3</span><br></code></pre></td></tr></table></figure><p>修改一下<code>foo</code>，现在函数的返回结果只依赖于他的参数，所以是纯函数</p></li><li><p><strong>函数执行过程没有副作用</strong></p></li></ol><p>再修改一下<code>foo</code></p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">foo</span> = (<span class="hljs-params">obj, b</span>) =&gt; &#123;<br>  <span class="hljs-keyword">return</span> obj.<span class="hljs-property">x</span> + b<br>&#125;<br><span class="hljs-keyword">const</span> counter = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-title function_">foo</span>(counter, <span class="hljs-number">2</span>) <span class="hljs-comment">// =&gt; 3</span><br>counter.<span class="hljs-property">x</span> <span class="hljs-comment">// =&gt; 1</span><br></code></pre></td></tr></table></figure><p>   把原来的x变成了一个对象，可以往里面传一个对象进行计算，过程中不会对传入的对象进行更改，<code>counter</code>不会发生变化，所以是纯函数，但是如果我们稍微修改它一下：</p>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> a = <span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> <span class="hljs-title function_">foo</span> = (<span class="hljs-params">obj, b</span>) =&gt; &#123;<br>  obj.<span class="hljs-property">x</span> = <span class="hljs-number">2</span><br>  <span class="hljs-keyword">return</span> obj.<span class="hljs-property">x</span> + b<br>&#125;<br><span class="hljs-keyword">const</span> counter = &#123; <span class="hljs-attr">x</span>: <span class="hljs-number">1</span> &#125;<br><span class="hljs-title function_">foo</span>(counter, <span class="hljs-number">2</span>) <span class="hljs-comment">// =&gt; 4</span><br>counter.<span class="hljs-property">x</span> <span class="hljs-comment">// =&gt; 2</span><br></code></pre></td></tr></table></figure><p>   在<code>foo</code>内部添加了一句<code>obj.x = 2</code>，计算前<code>counter.x</code>是1，但是计算以后的<code>counter.x</code>是2。函数内的执行对外部产生了影响，也叫<strong>副作用</strong>，所以不是纯函数</p><p>   只要函数执行产生了<strong>外部可以观察到的变化</strong>,就是副作用，像调用DOM API修改页面，发送AJAX请求，甚至<code>console.log</code>也是副作用</p><hr><h3 id="优化共享结构的对象"><a href="#优化共享结构的对象" class="headerlink" title="优化共享结构的对象"></a>优化共享结构的对象</h3><p>其实之前的部分已经可以算是简单实现了一个redux，但是如果细心就会发现，之前的版本中有很严重的性能问题，如果我们试着在每个渲染函数开头输出一些日志看一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderApp</span> (appState) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render app...&#x27;</span>)<br>  <span class="hljs-title function_">renderTitle</span>(appState.<span class="hljs-property">title</span>)<br>  <span class="hljs-title function_">renderContent</span>(appState.<span class="hljs-property">content</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderTitle</span> (title) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render title...&#x27;</span>)<br>  <span class="hljs-keyword">const</span> titleDOM = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;title&#x27;</span>)<br>  titleDOM.<span class="hljs-property">innerHTML</span> = title.<span class="hljs-property">text</span><br>  titleDOM.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = title.<span class="hljs-property">color</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderContent</span> (content) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render content...&#x27;</span>)<br>  <span class="hljs-keyword">const</span> contentDOM = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;content&#x27;</span>)<br>  contentDOM.<span class="hljs-property">innerHTML</span> = content.<span class="hljs-property">text</span><br>  contentDOM.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = content.<span class="hljs-property">color</span><br>&#125;<br></code></pre></td></tr></table></figure><p>执行一次初始化渲染和两次更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(appState, stateChanger)<br>store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">renderApp</span>(store.<span class="hljs-title function_">getState</span>())) <span class="hljs-comment">// 监听数据变化</span><br><br><span class="hljs-title function_">renderApp</span>(store.<span class="hljs-title function_">getState</span>()) <span class="hljs-comment">// 首次渲染页面</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js&#x27;</span> &#125;) <span class="hljs-comment">// 修改标题文本</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span> &#125;) <span class="hljs-comment">// 修改标题颜色</span><br></code></pre></td></tr></table></figure><p>在控制塔瞄一眼呗：</p><p><img src="https://i.loli.net/2019/12/04/yVTaFHuE2KC4blI.png"></p><p>看得出来一组三个render函数输出了三次，第一次肯定是首次渲染，后边两次分别是两次<code>store.dispatch</code>导致的。可以看出每次更新数据都要重新渲染整个App，但是我们两次更新都只是更新了<code>title</code>字段，并不需要重新调用<code>renderContent</code>，它是一个冗余的操作，现在需要优化它</p><p>提出一种解决方法（但不限于一种），在每个渲染函数调用之前判断一下传入的数据和旧数据是否相同，相同就不调用了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderApp</span> (newAppState, oldAppState = &#123;&#125;) &#123; <span class="hljs-comment">// 防止 oldAppState 没有传入，所以加了默认参数 oldAppState = &#123;&#125;</span><br>  <span class="hljs-keyword">if</span> (newAppState === oldAppState) <span class="hljs-keyword">return</span> <span class="hljs-comment">// 数据没有变化就不渲染了</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render app...&#x27;</span>)<br>  <span class="hljs-title function_">renderTitle</span>(newAppState.<span class="hljs-property">title</span>, oldAppState.<span class="hljs-property">title</span>)<br>  <span class="hljs-title function_">renderContent</span>(newAppState.<span class="hljs-property">content</span>, oldAppState.<span class="hljs-property">content</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderTitle</span> (newTitle, oldTitle = &#123;&#125;) &#123;<br>  <span class="hljs-keyword">if</span> (newTitle === oldTitle) <span class="hljs-keyword">return</span> <span class="hljs-comment">// 数据没有变化就不渲染了</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render title...&#x27;</span>)<br>  <span class="hljs-keyword">const</span> titleDOM = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;title&#x27;</span>)<br>  titleDOM.<span class="hljs-property">innerHTML</span> = newTitle.<span class="hljs-property">text</span><br>  titleDOM.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = newTitle.<span class="hljs-property">color</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderContent</span> (newContent, oldContent = &#123;&#125;) &#123;<br>  <span class="hljs-keyword">if</span> (newContent === oldContent) <span class="hljs-keyword">return</span> <span class="hljs-comment">// 数据没有变化就不渲染了</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;render content...&#x27;</span>)<br>  <span class="hljs-keyword">const</span> contentDOM = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;content&#x27;</span>)<br>  contentDOM.<span class="hljs-property">innerHTML</span> = newContent.<span class="hljs-property">text</span><br>  contentDOM.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = newContent.<span class="hljs-property">color</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后用一个<code>oldState</code> 来保存旧的应用状态，在需要重新渲染的地方把新旧数据传进去：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(appState, stateChanger)<br><span class="hljs-keyword">let</span> oldState = store.<span class="hljs-title function_">getState</span>() <span class="hljs-comment">// 缓存旧的 state</span><br>store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>  <span class="hljs-keyword">const</span> newState = store.<span class="hljs-title function_">getState</span>() <span class="hljs-comment">// 数据可能变化，获取新的 state</span><br>  <span class="hljs-title function_">renderApp</span>(newState, oldState) <span class="hljs-comment">// 把新旧的 state 传进去渲染</span><br>  oldState = newState <span class="hljs-comment">// 渲染完以后，新的 newState 变成了旧的 oldState，等待下一次数据变化重新渲染</span><br>&#125;)<br>...<br></code></pre></td></tr></table></figure><p>可别以为这样就好了……，看看<code>stateChanger</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">stateChanger</span> (state, action) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>:<br>      state.<span class="hljs-property">title</span>.<span class="hljs-property">text</span> = action.<span class="hljs-property">text</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>:<br>      state.<span class="hljs-property">title</span>.<span class="hljs-property">color</span> = action.<span class="hljs-property">color</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">break</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>即使修改了<code>state.title.text</code>，但是<code>state</code>还是原来那个<code>state</code>，一切都是以前的一切，这些引用指向的还是于谦的对象，只是内容改变了而已，就像下边这个语句：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> obj = &#123;<br><span class="hljs-attr">x</span>: <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">let</span> obj2 = obj<br>obj2.<span class="hljs-property">x</span> = <span class="hljs-number">1</span><br>obj !== obj2 <span class="hljs-comment">// false ,两个引用指向同一个对象,怎么会不相等？</span><br></code></pre></td></tr></table></figure><p>想让两者成为两个完全不同的对象，就得使用ES6的语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> obj = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">1</span>&#125;<br><span class="hljs-keyword">const</span> obj2 = &#123;...obj&#125;<br></code></pre></td></tr></table></figure><p>放到例子中就是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> newAppState = &#123; <span class="hljs-comment">// 新建一个 newAppState</span><br>  ...appState, <span class="hljs-comment">// 复制 appState 里面的内容</span><br>  <span class="hljs-attr">title</span>: &#123; <span class="hljs-comment">// 用一个新的对象覆盖原来的 title 属性</span><br>    ...appState.<span class="hljs-property">title</span>, <span class="hljs-comment">// 复制原来 title 对象里面的内容</span><br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;new text&#x27;</span> <span class="hljs-comment">// 覆盖 text 属性</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>用一个图来表示对象结构</p><p><img src="https://i.loli.net/2019/12/04/IEWhwaOTZlSpvN8.png"></p><p><code>appState</code>和<code>newAppState</code>是两个不同的对象，因为浅复制所以两个对象的<code>content</code>指向同一对象，但是<code>title</code>被一个新的对象覆盖，所以指向不同，同样的可修改<code>appState.title.color</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> newAppState1 = &#123; <span class="hljs-comment">// 新建一个 newAppState1</span><br>  ...newAppState, <span class="hljs-comment">// 复制 newAppState1 里面的内容</span><br>  <span class="hljs-attr">title</span>: &#123; <span class="hljs-comment">// 用一个新的对象覆盖原来的 title 属性</span><br>    ...newAppState.<span class="hljs-property">title</span>, <span class="hljs-comment">// 复制原来 title 对象里面的内容</span><br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&quot;blue&quot;</span> <span class="hljs-comment">// 覆盖 color 属性</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://i.loli.net/2019/12/04/e6KNOS8A5ipxVvk.png"></p><p>这样每次我们修改某些数据的时候，都不会碰原来的数据，每次都是copy的一个新对象。现在我们可以修改<code>stateChanger</code>中的代码，让他产生上述共享结构的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">stateChanger</span> (state, action) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123; <span class="hljs-comment">// 构建新的对象并且返回</span><br>        ...state,<br>        <span class="hljs-attr">title</span>: &#123;<br>          ...state.<span class="hljs-property">title</span>,<br>          <span class="hljs-attr">text</span>: action.<span class="hljs-property">text</span><br>        &#125;<br>      &#125;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>:<br>      <span class="hljs-keyword">return</span> &#123; <span class="hljs-comment">// 构建新的对象并且返回</span><br>        ...state,<br>        <span class="hljs-attr">title</span>: &#123;<br>          ...state.<span class="hljs-property">title</span>,<br>          <span class="hljs-attr">color</span>: action.<span class="hljs-property">color</span><br>        &#125;<br>      &#125;<br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">return</span> state <span class="hljs-comment">// 没有修改，返回原来的对象</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createStore</span> (state, stateChanger) &#123;<br>  <span class="hljs-keyword">const</span> listeners = []<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">subscribe</span> = (<span class="hljs-params">listener</span>) =&gt; listeners.<span class="hljs-title function_">push</span>(listener)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getState</span> = (<span class="hljs-params"></span>) =&gt; state<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatch</span> = (<span class="hljs-params">action</span>) =&gt; &#123;<br>    state = <span class="hljs-title function_">stateChanger</span>(state, action) <span class="hljs-comment">// 覆盖原对象</span><br>    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> <span class="hljs-title function_">listener</span>())<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123; getState, dispatch, subscribe &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在再看一眼控制台：</p><p><img src="https://i.loli.net/2019/12/04/CE9rWDcVh7fS1vA.png"></p><p>这样我们就能避免不需要的渲染了！过两天再往下走……</p><hr>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>实现MyRedux（一）</title>
    <link href="/2019/12/03/2019-12-03-Redux%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2019/12/03/2019-12-03-Redux%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h3 id="说在前面"><a href="#说在前面" class="headerlink" title="说在前面"></a>说在前面</h3><p>为了学习<code>redux</code>，仅仅实现了<code>store</code>,<code>createStore</code>,<code>reducer</code>等部分基本功能</p><hr><h3 id="现在开始忘掉一切"><a href="#现在开始忘掉一切" class="headerlink" title="现在开始忘掉一切"></a>现在开始忘掉一切</h3><p>首先用create-react-app新建一个项目，修改<code>public/index.html</code>下的页面结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;title&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;content&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>清空<code>src</code>文件夹，新建一个<code>index.js</code>，添加代码代表我们要应用的状态：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> appState = &#123;<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;Redux&#x27;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">content</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;学习redux&#x27;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>添加渲染函数，会把上面的状态数据渲染到页面上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderApp</span> (appState) &#123;<br>  <span class="hljs-title function_">renderTitle</span>(appState.<span class="hljs-property">title</span>)<br>  <span class="hljs-title function_">renderContent</span>(appState.<span class="hljs-property">content</span>)<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderTitle</span> (title) &#123;<br>  <span class="hljs-keyword">const</span> titleDOM = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;title&#x27;</span>)<br>  titleDOM.<span class="hljs-property">innerHTML</span> = title.<span class="hljs-property">text</span><br>  titleDOM.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = title.<span class="hljs-property">color</span><br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">renderContent</span> (content) &#123;<br>  <span class="hljs-keyword">const</span> contentDOM = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;content&#x27;</span>)<br>  contentDOM.<span class="hljs-property">innerHTML</span> = content.<span class="hljs-property">text</span><br>  contentDOM.<span class="hljs-property">style</span>.<span class="hljs-property">color</span> = content.<span class="hljs-property">color</span><br>&#125;<br></code></pre></td></tr></table></figure><p>简单的渲染完成了，但是会有一个严重的问题，渲染数据使用的是共享的状态<code>appState</code>,<strong>任何人都能修改</strong>，如果我们在渲染之前做了其他函数操作，就无法智大东会对<code>appState</code>做了什么事情，也就是为什么要避免全局变量</p><p>当我们的不同组件之间需要共享数据，就会产生矛盾：</p><blockquote><p>组件之间共享数据 ❗❗ 数据可能在组件内被任意修改</p></blockquote><p>如果我们学习一下React团队的做法，把操作变复杂</p><blockquote><p>​    组件之间可以共享、改动数据但是不能直接修改，必须执行我定义的某些函数</p></blockquote><p>定义一个<code>dispatch</code>函数 ， 负责数据修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dispatch</span> (action) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>:<br>      appState.<span class="hljs-property">title</span>.<span class="hljs-property">text</span> = action.<span class="hljs-property">text</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>:<br>      appState.<span class="hljs-property">title</span>.<span class="hljs-property">color</span> = action.<span class="hljs-property">color</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">break</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们对数据的操作必须 通过<code>dispatch</code>函数，接收一个参数<code>action</code>，它是一个普通对象，里面包含一个<code>type</code>字段来生命你想干什么，<code>dispatch</code>内的<code>switch</code>会识别这个字段，识别成功的会对<code>appState</code>进行修改</p><p>上面的 <code>dispatch</code> 它只能识别两种操作，一种是 <code>UPDATE_TITLE_TEXT</code> 它会用 <code>action</code> 的 <code>text</code> 字段去更新 <code>appState.title.text</code>；一种是 <code>UPDATE_TITLE_COLOR</code>，它会用 <code>action</code> 的 <code>color</code> 字段去更新 <code>appState.title.color</code>。<code>action</code> 里面除了 <code>type</code> 字段是必须的以外，其他字段都是可以自定义的。</p><p>如果想要修改<code>appState.title.text</code>，必须调用<code>dispatch</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js&#x27;</span> &#125;) <span class="hljs-comment">// 修改标题文本</span><br><span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span> &#125;) <span class="hljs-comment">// 修改标题颜色</span><br></code></pre></td></tr></table></figure><p>这样就不用的担心别的函数会修改appState，至少是直接修改</p><p>原来：</p><p><img src="https://i.loli.net/2019/12/03/fCxTNHJ1Sea9jZ2.png"></p><p>现在所有的数据想修改必须经过<code>dispatch</code>：</p><p><img src="https://i.loli.net/2019/12/03/HgCwc7sunDxYeKr.png"></p><hr><h3 id="抽离出store"><a href="#抽离出store" class="headerlink" title="抽离出store"></a>抽离出<code>store</code></h3><p>现在有了<code>appState</code>和<code>dispatch</code>,可以把他们集中到一个地方，起名叫做<code>store</code>,然后构建一个<code>createStore()</code>函数，用来生产这种<code>state</code>和<code>dispatch</code>的集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createStore</span> (state, stateChanger) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getState</span> = (<span class="hljs-params"></span>) =&gt; state<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatch</span> = (<span class="hljs-params">action</span>) =&gt; <span class="hljs-title function_">stateChanger</span>(state, action)<br>  <span class="hljs-keyword">return</span> &#123; getState, dispatch &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>createStore</code>接收两个参数，一个是表示状态的<code>state</code>，另一个是<code>stateChanger</code>，它用来描述应用程序状态会根据<code>action</code>发生什么变化，相当于<code>dispatch</code></p><p><code>createStore</code>返回一个对象，包含两个方法，<code>getState</code>用于获取<code>state</code>的数据，<code>dispatch</code>用于修改数据，和以前一样</p><p>现在我的代码可以优化成：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript">et appState = &#123;<br>  <span class="hljs-attr">title</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js&#x27;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span>,<br>  &#125;,<br>  <span class="hljs-attr">content</span>: &#123;<br>    <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js 内容&#x27;</span>,<br>    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">stateChanger</span> (state, action) &#123;<br>  <span class="hljs-keyword">switch</span> (action.<span class="hljs-property">type</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>:<br>      state.<span class="hljs-property">title</span>.<span class="hljs-property">text</span> = action.<span class="hljs-property">text</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>:<br>      state.<span class="hljs-property">title</span>.<span class="hljs-property">color</span> = action.<span class="hljs-property">color</span><br>      <span class="hljs-keyword">break</span><br>    <span class="hljs-attr">default</span>:<br>      <span class="hljs-keyword">break</span><br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(appState, stateChanger)<br><br><span class="hljs-title function_">renderApp</span>(store.<span class="hljs-title function_">getState</span>()) <span class="hljs-comment">// 首次渲染页面</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js&#x27;</span> &#125;) <span class="hljs-comment">// 修改标题文本</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span> &#125;) <span class="hljs-comment">// 修改标题颜色</span><br><span class="hljs-title function_">renderApp</span>(store.<span class="hljs-title function_">getState</span>()) <span class="hljs-comment">// 把新的数据渲染到页面上</span><br></code></pre></td></tr></table></figure><p>然后我们就有个棘手的问题，怎么监控数据的变化，上述代码中，如果我们不调用<code>renderApp</code>，那页面的内容是不会变化的，如果往<code>dispatch</code>中加入<code>renderApp</code>，那我们想通用<code>createStore</code>就不行了，想用一种通用的方式监听数据，需要用到观察者模式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">createStore</span> (state, stateChanger) &#123;<br>  <span class="hljs-keyword">const</span> listeners = []<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">subscribe</span> = (<span class="hljs-params">listener</span>) =&gt; listeners.<span class="hljs-title function_">push</span>(listener)<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">getState</span> = (<span class="hljs-params"></span>) =&gt; state<br>  <span class="hljs-keyword">const</span> <span class="hljs-title function_">dispatch</span> = (<span class="hljs-params">action</span>) =&gt; &#123;<br>    <span class="hljs-title function_">stateChanger</span>(state, action)<br>    listeners.<span class="hljs-title function_">forEach</span>(<span class="hljs-function">(<span class="hljs-params">listener</span>) =&gt;</span> <span class="hljs-title function_">listener</span>())<br>  &#125;<br>  <span class="hljs-keyword">return</span> &#123; getState, dispatch, subscribe &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在方法中定义了一个数组，还有一个<code>subscribe</code>方法，可以通过这个方法传入一个监听函数，并<code>push</code>到数组中，修改了<code>dispatch</code>方法，当它被调用的时候，会遍历数组中的函数，一个个的调用，这就意味着我们可以通过<code>subscribe</code>传入数据变化的监听函数，每次<code>dispatch</code>的时候，监听函数都会被调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> store = <span class="hljs-title function_">createStore</span>(appState, stateChanger)<br>store.<span class="hljs-title function_">subscribe</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">renderApp</span>(store.<span class="hljs-title function_">getState</span>()))<br><br><span class="hljs-title function_">renderApp</span>(store.<span class="hljs-title function_">getState</span>()) <span class="hljs-comment">// 首次渲染页面</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;UPDATE_TITLE_TEXT&#x27;</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">&#x27;React.js&#x27;</span> &#125;) <span class="hljs-comment">// 修改标题文本</span><br>store.<span class="hljs-title function_">dispatch</span>(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;UPDATE_TITLE_COLOR&#x27;</span>, <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;blue&#x27;</span> &#125;) <span class="hljs-comment">// 修改标题颜色</span><br><span class="hljs-comment">// ...后面不管如何 store.dispatch，都不需要重新调用 renderApp</span><br></code></pre></td></tr></table></figure><p>只需要<code>subscribe</code>一次，后面不管怎么<code>dispatch</code>，<code>renderApp</code>都会被重新调用，重新渲染页面，而且观察者模式下同一块数据也可以渲染其他页面。</p><p><strong>阶段总结</strong></p><p>现在有了通用的<code>createStore</code>，可以产生一种新定义的数据类型<code>store</code>，通过<code>getState</code>获取状态，<code>dispatch</code>修改状态，<code>subscribe</code>监听数据……</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>React踩坑了</title>
    <link href="/2019/11/27/2019-11-27-React%E8%B8%A9%E5%9D%91%EF%BC%81/"/>
    <url>/2019/11/27/2019-11-27-React%E8%B8%A9%E5%9D%91%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<h4 id="起步就踩坑"><a href="#起步就踩坑" class="headerlink" title="起步就踩坑"></a>起步就踩坑</h4><p>可给我牛逼坏了</p><p>上来在入口文件index.js里写了一段render()代码，然后看到了美丽的红色:）</p><p><img src="https://i.loli.net/2019/11/27/6GPcURBpEs1Foxj.png">{:width=”600px” height=”380px”}</p><p>疯狂百度，最后自己发现了……得把语言的类型改一下</p><p><img src="https://i.loli.net/2019/11/27/dwBa3SN7crLPWZ5.png">{:width=”600px” height=”380px”}</p><p>好了……</p><hr><h4 id="关于this"><a href="#关于this" class="headerlink" title="关于this"></a>关于this</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs react">class Title extends Component &#123;<br>  handleClickOnTitle (e) &#123;<br>    console.log(e.target.innerHTML)<br>  &#125;<br><br>  render () &#123;<br>    return (<br>      &lt;h1 onClick=&#123;this.handleClickOnTitle&#125;&gt;React 小书&lt;/h1&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>一般在类的实例方法里的<code>this</code>指的是实例本身，但是你在上面的<code>handleClickOnTitle</code>中把<code>this</code>打印出来，会发现<code>this</code>是<code>null</code>或者<code>undefined</code></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs react">……<br>  handleClickOnTitle(e) &#123;<br>    console.log(this) // --&gt; null or undefined<br>  &#125;<br>……<br></code></pre></td></tr></table></figure><p>react中调用你传给他的方法的时候，不是通过<strong>对象方法</strong>的方式调用<code>(this.handleClickOnTitle)</code>,而是通过函数调用，所以事件监听函数内并不能通过<code>this</code>获取到实例</p><p>如果要在事件函数中使用当前实例，可以用<code>Bind</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs react">class Title extends Component &#123;<br>  handleClickOnTitle (e) &#123;<br>    console.log(this)<br>  &#125;<br><br>  render () &#123;<br>    return (<br>      &lt;h1 onClick=&#123;this.handleClickOnTitle.bind(this)&#125;&gt;React 小书&lt;/h1&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h4 id="关于props-children"><a href="#关于props-children" class="headerlink" title="关于props.children"></a>关于<code>props.children</code></h4><p>react中容器类组件和<code>props.children</code>很多时候能解决很多问题</p><p>有需求类似<img src="https://i.loli.net/2019/12/02/SOmZUCvir8b4gNq.png"></p><p>正常写是可以写出这样的代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs react">class Card extends Component &#123;<br>  render () &#123;<br>    return (<br>      &lt;div className=&#x27;card&#x27;&gt;<br>        &lt;div className=&#x27;card-content&#x27;&gt;<br>          &#123;this.props.content&#125;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br><br>ReactDOM.render(<br>  &lt;Card content=&#123;<br>    &lt;div&gt;<br>      &lt;h2&gt;React.js 小书&lt;/h2&gt;<br>       &lt;div&gt;开源、免费、专业、简单&lt;/div&gt;<br>      订阅：&lt;input /&gt;<br>    &lt;/div&gt;<br>  &#125; /&gt;,<br>  document.getElementById(&#x27;root&#x27;)<br>)<br></code></pre></td></tr></table></figure><p>但是这样很乱而且不好维护，如果card能变成下面这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs react">ReactDOM.render(<br>  &lt;Card&gt;<br>    &lt;h2&gt;React.js 小书&lt;/h2&gt;<br>    &lt;div&gt;开源、免费、专业、简单&lt;/div&gt;<br>    订阅：&lt;input /&gt;<br>  &lt;/Card&gt;,<br>  document.getElementById(&#x27;root&#x27;)<br>)<br></code></pre></td></tr></table></figure><p>如果组件标签能像html一样写内嵌的结构……？是吧</p><p>react提供了<code>props.children</code>来实现这种想法，我们打印一下<code>props.children</code>会发现他其实是一个数组</p><p><img src="https://i.loli.net/2019/12/02/69IsZhDwC5ktiQl.png"></p><p>react就是把我们嵌套的JSX元素一个个放到数组中，然后通过这个方法传给<code>Card</code></p><p>由于 JSX 会把插入表达式里面数组中的 JSX 一个个罗列下来显示。所以其实就相当于在 <code>Card</code> 中嵌套了什么 JSX 结构，都会显示在 <code>Card</code> 的类名为 <code>card-content</code> 的 <code>div</code> 元素当中。</p><p>这种嵌套的内容成为了 <code>props.children</code> 数组的机制使得我们编写组件变得非常的灵活，我们甚至可以在组件内部把数组中的 JSX 元素安置在不同的地方：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs react">class Layout extends Component &#123;<br>  render () &#123;<br>    return (<br>      &lt;div className=&#x27;two-cols-layout&#x27;&gt;<br>        &lt;div className=&#x27;sidebar&#x27;&gt;<br>          &#123;this.props.children[0]&#125; &lt;!--&gt;h2&lt;--&gt;<br>        &lt;/div&gt;<br>        &lt;div className=&#x27;main&#x27;&gt;<br>          &#123;this.props.children[1]&#125; &lt;!--&gt;div&lt;--&gt;<br>        &lt;/div&gt;<br>      &lt;/div&gt;<br>    )<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>React</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue部分整理</title>
    <link href="/2019/11/20/2019-11-20-Vue%E9%83%A8%E5%88%86%E6%95%B4%E7%90%86/"/>
    <url>/2019/11/20/2019-11-20-Vue%E9%83%A8%E5%88%86%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="Vue生命周期"><a href="#Vue生命周期" class="headerlink" title="Vue生命周期"></a>Vue生命周期</h2><p><img src="https://i.loli.net/2019/11/20/4mQWXF6GJA8Uv1k.png">{:width=”624.5px” height=”699.5px”}</p><h3 id="父组件监听子组件的生命周期？"><a href="#父组件监听子组件的生命周期？" class="headerlink" title="父组件监听子组件的生命周期？"></a>父组件监听子组件的生命周期？</h3><p>两种方法，最简单基本的是子组件在生命周期钩子中通过<code>this.$emit(&#39;foo&#39;)</code>来激活父组件的函数方法<code>@foo=&#39;doSomeThing&#39;</code>，另一种方法，利用<code>@hook:name</code>来监听第三方组件的状态</p><h3 id="组件中的的data为什么是函数"><a href="#组件中的的data为什么是函数" class="headerlink" title="组件中的的data为什么是函数"></a>组件中的的data为什么是函数</h3><blockquote><p>为什么组件中的 data 必须是一个函数，然后 return 一个对象，而 new Vue 实例里，data 可以直接是一个对象？ </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// data</span><br><span class="hljs-title function_">data</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">return</span> &#123;<br><span class="hljs-attr">message</span>: <span class="hljs-string">&quot;子组件&quot;</span>,<br><span class="hljs-attr">childName</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span><br>  &#125;<br>&#125;<br><br><span class="hljs-comment">// new Vue</span><br><span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  router,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">&#x27;&lt;App/&gt;&#x27;</span>,<br>  <span class="hljs-attr">components</span>: &#123;<span class="hljs-title class_">App</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>组件是用来<strong>复用</strong>的，并且JS里的对象是引用关系，如果组件中的data是一个对象，那作用域没有隔离，子组件中的data属性会互相影响，而使用函数则每个实例都可以维护一份被返回对象的独立拷贝，组件之间的data属性不会相互影响，而<code>new Vue</code>的实例是<strong>不会被复用的</strong>，不存在引用问题。</p><h3 id="Vue组件之间的通信方式"><a href="#Vue组件之间的通信方式" class="headerlink" title="Vue组件之间的通信方式"></a>Vue组件之间的通信方式</h3><h4 id="props-emit"><a href="#props-emit" class="headerlink" title="props / $emit"></a><code>props / $emit</code></h4><blockquote><p>适用于父子组件通信</p></blockquote><h4 id="ref与-parent-children"><a href="#ref与-parent-children" class="headerlink" title="ref与$parent / $children"></a><code>ref</code>与<code>$parent</code> / <code>$children</code></h4><blockquote><p>适用父子组件通信</p></blockquote><p>​    <code>ref</code>在DOM上使用，指向DOM元素，在子组件上使用，引用指向组件实例</p><p>​    <code>$parent / $chidlren</code>访问父 / 子实例</p><h4 id="Bus总线-emit-on"><a href="#Bus总线-emit-on" class="headerlink" title="Bus总线 $emit / $on"></a>Bus总线 <code>$emit</code> / <code>$on</code></h4><blockquote><p>适用于父子、隔代、兄弟组件通信</p></blockquote><p>​    建立一个空的Vue实例作为事件总线，利用它来触发事件，监听事件，从而实现通信</p><h4 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide / inject"></a><code>provide / inject</code></h4><blockquote><p>适用隔代组建通信</p></blockquote><p>​    祖先组件通过provide提供变量，子孙组件中通过inject注入变量</p><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><blockquote><p>适用于父子、隔代、兄弟组件通信</p></blockquote><h3 id="Vue如何实现双向绑定"><a href="#Vue如何实现双向绑定" class="headerlink" title="Vue如何实现双向绑定"></a>Vue如何实现双向绑定</h3><p>四部分共同实现</p><p>监听器<code>Observer</code>，对数据对象进行遍历，包括子属性对象的属性，利用<code>Object.defineProperty()</code>对属性加上<code>getter</code>和 <code>setter</code>，用以监听数据变化</p><p>解析器<code>Compile</code>，解析Vue模版指令，把模版中的变量替换成数据，初始化渲染页面视图，每个指令对应的节点绑定更新函数，添加监听数据的订阅者</p><p>订阅者<code>Watcher</code>，W 是 O 和 C之间通信的桥梁，任务是订阅O中的属性值变化，收到变化消息时，触发C中的更新函数</p><p>订阅器<code>Dep</code>，采用发布-订阅 设计模式，收集订阅者W，对监听器 O 和订阅者 W 进行管理</p><p><img src="https://i.loli.net/2019/11/20/kpmvl2MwFdEfy5G.png"></p><h3 id="虚拟DOM的优缺点"><a href="#虚拟DOM的优缺点" class="headerlink" title="虚拟DOM的优缺点"></a>虚拟DOM的优缺点</h3><p><strong>优点</strong>：</p><ul><li><p><strong>保证性能下限</strong>：框架的虚拟DOM需要适配任何上层API可能产生的操作，它的DOM操作必须是普适的，所以它的性能不是最优的，但比起直接的DOM操作要好很多，即可保证在你不需要手动优化的情况下，依然可以提供不错的性能</p></li><li><p><strong>无需手动操作DOM</strong>：不需要手动操作DOM，只需要写好View-Model的代码逻辑，框架会根据虚拟DOM和数据进行双向绑定</p></li><li><p><strong>跨平台</strong>：本质上是JS对象，而DOM和平台强相关，相比之下虚拟DOM可以进行更方便的跨平台操作，像服务器渲染、weex等</p></li></ul><p><strong>缺点:</strong></p><ul><li>​    <strong>无法进行极致优化</strong></li></ul><h3 id="虚拟DOM的实现原理"><a href="#虚拟DOM的实现原理" class="headerlink" title="虚拟DOM的实现原理"></a>虚拟DOM的实现原理</h3><p>主要包括三部分</p><ul><li><p>用JS对象模拟真实的DOM树，对真实DOM进行抽象</p></li><li><p>diff算法 -&gt; 比较两棵虚拟DOM树的差异</p></li><li><p>pach算法 -&gt; 把两个虚拟DOM对象的差异应用到真正的DOM上</p></li></ul><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>视频一面总结</title>
    <link href="/2019/10/30/2019-10-30-%E6%97%A5%E5%B8%B8%E7%BB%93/"/>
    <url>/2019/10/30/2019-10-30-%E6%97%A5%E5%B8%B8%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<ol><li><h4 id="后端返回一个长整形，前端如何处理才能让精度不丢失"><a href="#后端返回一个长整形，前端如何处理才能让精度不丢失" class="headerlink" title="后端返回一个长整形，前端如何处理才能让精度不丢失"></a>后端返回一个长整形，前端如何处理才能让精度不丢失</h4><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><blockquote><p>如果服务器传来的json中包含一个很大的整数，如 { “id”: 296675198462066688 } ，那么接受后会发现变成了 { id: 296675198462066700 } 。 </p></blockquote><h5 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h5><p>​    js是弱类型语言，所有的数字类型统称为Number类型，不区分int、long、double等。而Number是根据IEEE 754标准中的double来实现的，即所有的Number类型都是64位双精度实型。js内置有32位整数，而number类型的安全整数是53位。如果超过53位的，你不能用json传递，需要用其他数据类型，比如字符串，或拆分成两个数据字段。</p><h5 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h5><p>转成字符串，如果需要运算，需要后端处理</p></li><li><h4 id="数组去重-1-2-‘1’-‘2’-3-‘4’-4-2"><a href="#数组去重-1-2-‘1’-‘2’-3-‘4’-4-2" class="headerlink" title="数组去重([1, 2, ‘1’, ‘2’, 3, ‘4’, 4, 2]"></a>数组去重([1, 2, ‘1’, ‘2’, 3, ‘4’, 4, 2]</h4></li></ol><p>   除了链接内的方法，还有一个<code>[...new Set(a)]</code>方法</p><h5 id="引申问题"><a href="#引申问题" class="headerlink" title="引申问题"></a><strong>引申问题</strong></h5><ul><li><h6 id="Set-gt-Set是什么-gt-Set-怎么实现-gt-Set-可以去重混合数组吗"><a href="#Set-gt-Set是什么-gt-Set-怎么实现-gt-Set-可以去重混合数组吗" class="headerlink" title="Set -&gt; Set是什么? -&gt; Set 怎么实现?  -&gt; Set 可以去重混合数组吗?"></a>Set -&gt; Set是什么? -&gt; Set 怎么实现?  -&gt; Set 可以去重混合数组吗?</h6><ol><li><p>Set是什么</p><p>ES6新的数据结构，类似数组，但<strong>成员的值是唯一的，没有重复的值</strong></p></li><li><p>Set怎么实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>()<br>s.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>)<br>s.<span class="hljs-title function_">add</span>(<span class="hljs-number">2</span>)<br>s.<span class="hljs-title function_">add</span>(<span class="hljs-number">3</span>)<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">of</span> s)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i) <span class="hljs-comment">// =&gt; 1 , 2 , 3</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Set能去重混合数组吗</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array)]<br><span class="hljs-title class_">Array</span>.<span class="hljs-title function_">from</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(array))<br></code></pre></td></tr></table></figure><p><strong>set中两个NaN相等，会去除重复的NaN，但是<code>===</code>下是不相等的</strong></p></li></ol></li><li><p>Map -&gt; Map 的键是如何存储的? -&gt; 哈希是什么? </p></li></ul><ol start="3"><li><h4 id="new-做了什么事情-实现-new"><a href="#new-做了什么事情-实现-new" class="headerlink" title="new 做了什么事情, 实现 new ?"></a>new 做了什么事情, 实现 new ?</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*new 具体干了啥*/</span><br><span class="hljs-keyword">var</span> obj = &#123;&#125;<span class="hljs-comment">//创建空对象</span><br>obj.<span class="hljs-property">__proto__</span> = <span class="hljs-title class_">Base</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span><span class="hljs-comment">//把空对象的__proto__指向了Base的prototype</span><br><span class="hljs-title class_">Base</span>.<span class="hljs-title function_">call</span>(obj)<span class="hljs-comment">//将Base的this替换成obj，并调用Base</span><br></code></pre></td></tr></table></figure><p>[]: <a href="https://my.oschina.net/u/3607067/blog/2209082">https://my.oschina.net/u/3607067/blog/2209082</a>    “实现new”</p></li><li><h4 id="构造函数有-return-会出现什么情况"><a href="#构造函数有-return-会出现什么情况" class="headerlink" title="构造函数有 return, 会出现什么情况 ?"></a>构造函数有 return, 会出现什么情况 ?</h4></li><li><h4 id="HTTP-静态资源的优化方式"><a href="#HTTP-静态资源的优化方式" class="headerlink" title="HTTP 静态资源的优化方式 ?"></a>HTTP 静态资源的优化方式 ?</h4></li><li><h4 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制 ?"></a>浏览器缓存机制 ?</h4></li></ol>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>CSS</tag>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数组转换树结构</title>
    <link href="/2019/10/08/2019-10-18-%E7%94%9F%E6%88%90%E6%A0%91/"/>
    <url>/2019/10/08/2019-10-18-%E7%94%9F%E6%88%90%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h4 id="nest：根据parent-id生成树结构（阿里一面真题）"><a href="#nest：根据parent-id生成树结构（阿里一面真题）" class="headerlink" title="nest：根据parent_id生成树结构（阿里一面真题）"></a>nest：根据parent_id生成树结构（阿里一面真题）</h4><p>题目要求：</p><p>根据每项的parent_id,生成具体的树形结构对象</p><p><img src="https://i.loli.net/2019/10/28/ElNsiRj1DgVkFS4.png">实现</p><p><strong>（为方便，所有函数均用箭头函数）</strong></p><p>首先肯定要根据提供的parent_id来进行数组的筛选，可以选择<code>for()&#123;&#125;</code>，<code>foreach（）</code>，但是这里可以使用数组的新方法<code>filter（）</code>，更为方便~</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">items.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item[link] === id) <span class="hljs-comment">// 注意===要求类型必须相等</span><br></code></pre></td></tr></table></figure><p>然后将筛选出来的数组放到一起，再将parent_id指向它们的数组进行合并并放到一起，这里一样可以用<code>for()&#123;&#125;</code> , <code>foreach()</code>，但是我们还是使用新方法<code>map()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">items.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (&#123;<br>...item,<br>children : <span class="hljs-comment">//=&gt;这个地方可以进行递归调用封装的函数</span><br>&#125;))<br></code></pre></td></tr></table></figure><p>实现方式想到了就可以封装函数了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title function_">nest</span> = (<span class="hljs-params">items , id=<span class="hljs-literal">null</span> , link=<span class="hljs-string">&#x27;parent_id&#x27;</span></span>) =&gt; <br>items<br>.<span class="hljs-title function_">filter</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item[link] === id)<br>.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> (&#123;<br>...item,<br>children : <span class="hljs-title function_">nest</span>(items , item.<span class="hljs-property">id</span>)<br>&#125;))<br></code></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/*测试用例*/</span><br><span class="hljs-keyword">const</span> comments = [<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-literal">null</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">1</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">2</span> &#125;,<br>  &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">5</span>, <span class="hljs-attr">parent_id</span>: <span class="hljs-number">4</span> &#125;<br>];<br></code></pre></td></tr></table></figure><p>结果：</p><p><img src="https://i.loli.net/2019/10/28/AoVCfvFtb8DTkew.png"></p><hr><h4 id="关于map-和filter"><a href="#关于map-和filter" class="headerlink" title="关于map()和filter()"></a>关于<code>map()</code>和<code>filter()</code></h4><p><code>filter()</code>和<code>map()</code>都不会对空数组进行检测且不会改变原数组</p><hr>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自定义三阶贝塞尔曲线</title>
    <link href="/2019/09/27/2019-09-27-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/"/>
    <url>/2019/09/27/2019-09-27-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>没听课的我要写自定义三阶贝塞尔曲线……瞎写了一个点，突然有了点思路，然后写了好一阵，写完了决定md一下思路，嗯，也用不到，老师说放到github上点点star，我想想还是算了，太菜</p><p><img src="https://i.loli.net/2019/12/02/gMIE9VXieWw3ASj.png"></p><h4 id="进入正题"><a href="#进入正题" class="headerlink" title="进入正题"></a>进入正题</h4><p>自定义三阶贝塞尔曲线首先是 需要用<code>canvas</code>去画的，并且你每拖动一个点，都要重绘一次。所以一开始我直接用<code>bezierCurveTo</code>画了一个三阶曲线，妄想去让他变弯……事实证明不行。</p><p>所以参考了一下一个自定义贝塞尔曲线动画的网站，他会给顶点和关键点做成一个可拖拽的圆，然后通过改变圆的位置改变贝塞尔曲线的关键点，搜噶！</p><p>首先肯定要有个canvas，并且在js中获取它。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;canvas id=<span class="hljs-string">&quot;canvas&quot;</span> width=<span class="hljs-string">&quot;800&quot;</span> height=<span class="hljs-string">&quot;500&quot;</span>&gt;&lt;/canvas&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> canvas = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;canvas&#x27;</span>);<br><span class="hljs-keyword">var</span> context = canvas.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&#x27;2d&#x27;</span>);<br></code></pre></td></tr></table></figure><p>因为要拖动四个点来改变三阶贝塞尔曲线的值，所以我把所有的点放到一个point对象里,然后在初始化的函数<code>init()</code>中定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//初始化点</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params">quadratic</span>) &#123;<br>            <span class="hljs-comment">//两端顶点</span><br>            point = &#123;<br>                <span class="hljs-attr">p1</span>: &#123;<br>                    <span class="hljs-attr">x</span>: <span class="hljs-number">100</span>,<br>                    <span class="hljs-attr">y</span>: <span class="hljs-number">250</span><br>                &#125;,<br>                <span class="hljs-attr">p2</span>: &#123;<br>                    <span class="hljs-attr">x</span>: <span class="hljs-number">400</span>,<br>                    <span class="hljs-attr">y</span>: <span class="hljs-number">250</span><br>                &#125;<br>            &#125;<br>            point.<span class="hljs-property">cp1</span> = &#123;<br>                    <span class="hljs-attr">x</span>: <span class="hljs-number">150</span>,<br>                    <span class="hljs-attr">y</span>: <span class="hljs-number">100</span><br>                &#125;,<br>                point.<span class="hljs-property">cp2</span> = &#123;<br>                    <span class="hljs-attr">x</span>: <span class="hljs-number">350</span>,<br>                    <span class="hljs-attr">y</span>: <span class="hljs-number">100</span><br>                &#125;,<br><br><br>                <span class="hljs-comment">//默认样式</span><br><br>                style = &#123;<br>                <span class="hljs-attr">line</span>: &#123;<br>                    <span class="hljs-attr">width</span>: <span class="hljs-number">6</span>,<br>                    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;red&#x27;</span><br>                &#125;,<br><br>                <span class="hljs-attr">cpline</span>: &#123;<br>                    <span class="hljs-attr">width</span>: <span class="hljs-number">2</span>,<br>                    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;#777&#x27;</span><br>                &#125;,<br>                <span class="hljs-attr">point</span>: &#123;<br>                    <span class="hljs-attr">radius</span>: <span class="hljs-number">10</span>,<br>                    <span class="hljs-attr">width</span>: <span class="hljs-number">2</span>,<br>                    <span class="hljs-attr">color</span>: <span class="hljs-string">&#x27;rgb(55, 255, 55)&#x27;</span>,<br>                    <span class="hljs-attr">fill</span>: <span class="hljs-string">&#x27;rgba(102, 217, 255 , 0.7)&#x27;</span>,<br>                    <span class="hljs-attr">arc1</span>: <span class="hljs-number">0</span>,<br>                    <span class="hljs-attr">arc2</span>: <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span> * <span class="hljs-number">2</span><br>                &#125;<br>            &#125;<br><br>            canvas.<span class="hljs-property">onmousedown</span> = dragStart;<br>            canvas.<span class="hljs-property">onmousemove</span> = dragging;<br>            canvas.<span class="hljs-property">onmouseup</span> = dragEnd;<br>            <span class="hljs-title class_">DrawCanvas</span>();<br>        &#125;<br></code></pre></td></tr></table></figure><p>然后要画出曲线、左边点以及右边点的连线（为了好看），要注意因为每次都是重绘所以要把画布清空</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">DrawCanvas</span>(<span class="hljs-params"></span>) &#123;<br>            context.<span class="hljs-title function_">clearRect</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, canvas.<span class="hljs-property">width</span>, canvas.<span class="hljs-property">height</span>);<br><br>            context.<span class="hljs-property">lineWidth</span> = style.<span class="hljs-property">cpline</span>.<span class="hljs-property">width</span>;<br>            context.<span class="hljs-property">strokeStyle</span> = style.<span class="hljs-property">cpline</span>.<span class="hljs-property">color</span>;<br>            context.<span class="hljs-title function_">beginPath</span>();<br>            context.<span class="hljs-title function_">moveTo</span>(point.<span class="hljs-property">p1</span>.<span class="hljs-property">x</span>, point.<span class="hljs-property">p1</span>.<span class="hljs-property">y</span>);<br>            context.<span class="hljs-title function_">lineTo</span>(point.<span class="hljs-property">cp1</span>.<span class="hljs-property">x</span>, point.<span class="hljs-property">cp1</span>.<span class="hljs-property">y</span>);<br>            context.<span class="hljs-title function_">moveTo</span>(point.<span class="hljs-property">p2</span>.<span class="hljs-property">x</span>, point.<span class="hljs-property">p2</span>.<span class="hljs-property">y</span>);<br>            context.<span class="hljs-title function_">lineTo</span>(point.<span class="hljs-property">cp2</span>.<span class="hljs-property">x</span>, point.<span class="hljs-property">cp2</span>.<span class="hljs-property">y</span>);<br>            context.<span class="hljs-title function_">stroke</span>();<br><br>            context.<span class="hljs-property">lineWidth</span> = style.<span class="hljs-property">line</span>.<span class="hljs-property">width</span>;<br>            context.<span class="hljs-property">strokeStyle</span> = style.<span class="hljs-property">line</span>.<span class="hljs-property">color</span>;<br>            context.<span class="hljs-title function_">beginPath</span>();<br>            context.<span class="hljs-title function_">moveTo</span>(point.<span class="hljs-property">p1</span>.<span class="hljs-property">x</span>, point.<span class="hljs-property">p1</span>.<span class="hljs-property">y</span>);<br>            context.<span class="hljs-title function_">bezierCurveTo</span>(point.<span class="hljs-property">cp1</span>.<span class="hljs-property">x</span>, point.<span class="hljs-property">cp1</span>.<span class="hljs-property">y</span>, point.<span class="hljs-property">cp2</span>.<span class="hljs-property">x</span>, point.<span class="hljs-property">cp2</span>.<span class="hljs-property">y</span>, point.<span class="hljs-property">p2</span>.<span class="hljs-property">x</span>, point.<span class="hljs-property">p2</span>.<span class="hljs-property">y</span>);<br>            context.<span class="hljs-title function_">stroke</span>();<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> p <span class="hljs-keyword">in</span> point) &#123;<br>                context.<span class="hljs-property">lineWidth</span> = style.<span class="hljs-property">point</span>.<span class="hljs-property">width</span>;<br>                context.<span class="hljs-property">strokeStyle</span> = style.<span class="hljs-property">point</span>.<span class="hljs-property">color</span>;<br>                context.<span class="hljs-property">fillStyle</span> = style.<span class="hljs-property">point</span>.<span class="hljs-property">fill</span>;<br>                context.<span class="hljs-title function_">beginPath</span>();<br><br>                context.<span class="hljs-title function_">arc</span>(point[p].<span class="hljs-property">x</span>, point[p].<span class="hljs-property">y</span>, style.<span class="hljs-property">point</span>.<span class="hljs-property">radius</span>, style.<span class="hljs-property">point</span>.<span class="hljs-property">arc1</span>, style.<span class="hljs-property">point</span>.<span class="hljs-property">arc2</span>)<br>                context.<span class="hljs-title function_">fill</span>();<br>                context.<span class="hljs-title function_">stroke</span>();<br><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>画也画完了，我构思的时候卡住的门槛就来了……怎么判断鼠标是不是点在了那四个圆里呢，想啥呢百度就完事了，然后发现了一个什么判断是不是在当前路径的东西，嗯？？？什么玩意不会用，所以就另辟蹊径，判断鼠标点击位置在不在圆里，高中数学？初中数学？点到圆心的距离小于半径，嗯我真聪明</p><p>想好了就开始写吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">dragStart</span>(<span class="hljs-params">e</span>) &#123;<br>            e = <span class="hljs-title class_">MousePos</span>(e);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e);<br>            <span class="hljs-keyword">var</span> dx,<br>                dy;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> p <span class="hljs-keyword">in</span> point) &#123;<br>                dx = point[p].<span class="hljs-property">x</span> - e.<span class="hljs-property">x</span>;<br>                dy = point[p].<span class="hljs-property">y</span> - e.<span class="hljs-property">y</span>;<br>                <span class="hljs-keyword">if</span> ((dx * dx) + (dy * dy) &lt; style.<span class="hljs-property">point</span>.<span class="hljs-property">radius</span> * style.<span class="hljs-property">point</span>.<span class="hljs-property">radius</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">1</span>);<br>                    drag = p;<br>                    dPoint = e;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//拖拽</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">dragging</span>(<span class="hljs-params">e</span>) &#123;<br>            <span class="hljs-keyword">if</span> (drag) &#123;<br>                e = <span class="hljs-title class_">MousePos</span>(e);<br>                point[drag].<span class="hljs-property">x</span> += e.<span class="hljs-property">x</span> - dPoint.<span class="hljs-property">x</span>;<br>                point[drag].<span class="hljs-property">y</span> += e.<span class="hljs-property">y</span> - dPoint.<span class="hljs-property">y</span>;<br>                dPoint = e;<br>                <span class="hljs-title class_">DrawCanvas</span>();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">//结束</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">dragEnd</span>(<span class="hljs-params">e</span>) &#123;<br>            drag = <span class="hljs-literal">null</span>;<br>            <span class="hljs-title class_">DrawCanvas</span>();<br>        &#125;<br></code></pre></td></tr></table></figure><p>ps:把鼠标相对于画布的位置封装了一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//获取当前鼠标相对于画布的坐标</span><br>        <span class="hljs-keyword">function</span> <span class="hljs-title function_">MousePos</span>(<span class="hljs-params">e</span>) &#123;<br>            e = e ? e : <span class="hljs-variable language_">window</span>.<span class="hljs-property">event</span>;<br>            <span class="hljs-keyword">return</span> &#123;<br>                <span class="hljs-attr">x</span>: e.<span class="hljs-property">pageX</span> - canvas.<span class="hljs-property">offsetLeft</span>,<br>                <span class="hljs-attr">y</span>: e.<span class="hljs-property">pageY</span> - canvas.<span class="hljs-property">offsetTop</span><br><br>            &#125;<br>        &#125;<br></code></pre></td></tr></table></figure><p>然后一个自定义贝塞尔曲线就完成了，其实还好，就是有点……没听课！</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML5</title>
    <link href="/2019/09/23/2019-09-23-HTML5/"/>
    <url>/2019/09/23/2019-09-23-HTML5/</url>
    
    <content type="html"><![CDATA[<h1 id="一、HTML5"><a href="#一、HTML5" class="headerlink" title="一、HTML5"></a>一、HTML5</h1><h4 id="1-1什么是-HTML5？"><a href="#1-1什么是-HTML5？" class="headerlink" title="1.1什么是 HTML5？"></a>1.1什么是 HTML5？</h4><p>HTML5 将成为 HTML、XHTML 以及 HTML DOM 的新标准。<br>HTML 的上一个版本诞生于 1999 年。自从那以后，Web 世界已经经历了巨变。<br>HTML5 仍处于完善之中。然而，大部分现代浏览器已经具备了某些 HTML5 支持。</p><h4 id="1-2-HTML5是如何起步的？"><a href="#1-2-HTML5是如何起步的？" class="headerlink" title="1.2 HTML5是如何起步的？"></a>1.2 HTML5是如何起步的？</h4><p>HTML5 是 W3C 与 WHATWG（[Web Hypertext Application Technology Working Group]网页超文本应用技术工作小组） 合作的结果。</p><p>WHATWG 致力于 web 表单和应用程序，而 W3C 专注于 XHTML 2.0。在 2006 年，双方决定进行合作，来创建一个新版本的 HTML。</p><p>为 HTML5 建立的一些规则：</p><ul><li>新特性应该基于 HTML、CSS、DOM 以及 JavaScript。</li><li>减少对外部插件的需求（比如 Flash）</li><li>更优秀的错误处理</li><li>更多取代脚本的标记</li><li>HTML5 应该独立于设备</li><li>开发进程应对公众透明</li></ul><h4 id="1-3-新特性"><a href="#1-3-新特性" class="headerlink" title="1.3 新特性"></a>1.3 新特性</h4><p>HTML5 中的一些有趣的新特性：</p><ul><li>用于绘画的 canvas 元素</li><li>用于媒介回放的 video 和 audio 元素</li><li>对本地离线存储的更好的支持</li><li>新的特殊内容元素，比如 article、footer、header、nav、section</li><li>新的表单控件，比如 calendar、date、time、email、url、search</li></ul><h4 id="1-4-HTML5新增语义化标签"><a href="#1-4-HTML5新增语义化标签" class="headerlink" title="1.4 HTML5新增语义化标签"></a>1.4 HTML5新增语义化标签</h4><table><thead><tr><th align="left"><strong>标签</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><code>&lt;article&gt;</code></td><td align="left">定义article</td></tr><tr><td align="left"><code>&lt;aside&gt;</code></td><td align="left">定义页面内容之外的内容。</td></tr><tr><td align="left"><code>&lt;audio&gt;</code></td><td align="left">定义声音内容。</td></tr><tr><td align="left"><code>&lt;bdi&gt;</code></td><td align="left">定义文本的文本方向，使其脱离其周围文本的方向设置。(浏览器支持不好)</td></tr><tr><td align="left"><code>&lt;canvas&gt;</code></td><td align="left">定义画布</td></tr><tr><td align="left"><code>&lt;command&gt;</code></td><td align="left">定义命令按钮。(目前，主流浏览器都不支持 <command> 标签。)</td></tr><tr><td align="left"><code>&lt;datalist&gt;</code></td><td align="left">定义下拉列表。</td></tr><tr><td align="left"><code>&lt;details&gt;</code></td><td align="left">定义元素的细节。</td></tr><tr><td align="left"><code>&lt;embed&gt;</code></td><td align="left">定义外部交互内容或插件。</td></tr><tr><td align="left"><code>&lt;figcaption&gt;</code></td><td align="left">定义figure 元素的标题。</td></tr><tr><td align="left"><code>&lt;figure&gt;</code></td><td align="left">定义媒介内容的分组，以及它们的标题。</td></tr><tr><td align="left"><code>&lt;footer&gt;</code></td><td align="left">定义   section 或 page 的页脚。</td></tr><tr><td align="left"><code>&lt;header&gt;</code></td><td align="left">定义   section 或 page 的页眉。</td></tr><tr><td align="left"><code>&lt;hgroup&gt;</code></td><td align="left">定义有关文档中的   section 的信息。</td></tr><tr><td align="left"><code>&lt;keygen&gt;</code></td><td align="left">定义生成密钥。</td></tr><tr><td align="left"><code>&lt;main&gt;</code></td><td align="left">定义文档的主要内容。</td></tr><tr><td align="left"><code>&lt;mark&gt;</code></td><td align="left">定义有记号的文本。</td></tr><tr><td align="left"><code>&lt;meter&gt;</code></td><td align="left">定义预定义范围内的度量。</td></tr><tr><td align="left"><code>&lt;nav&gt;</code></td><td align="left">定义导航链接。</td></tr><tr><td align="left"><code>&lt;output&gt;</code></td><td align="left">定义输出的一些类型。</td></tr><tr><td align="left"><code>&lt;progress&gt;</code></td><td align="left">定义任何类型的任务的进度。</td></tr><tr><td align="left"><code>&lt;rp&gt;</code></td><td align="left">定义若浏览器不支持 ruby 元素显示的内容。</td></tr><tr><td align="left"><code>&lt;rt&gt;</code></td><td align="left">定义 ruby 注释的解释。</td></tr><tr><td align="left"><code>&lt;ruby&gt;</code></td><td align="left">定义 ruby 注释。</td></tr><tr><td align="left"><code>&lt;section&gt;</code></td><td align="left">定义   section。</td></tr><tr><td align="left"><code>&lt;source&gt;</code></td><td align="left">定义媒介源。</td></tr><tr><td align="left"><code>&lt;summary&gt;</code></td><td align="left">定义   details 元素的标题。</td></tr><tr><td align="left"><code>&lt;time&gt;</code></td><td align="left">定义日期/时间。</td></tr><tr><td align="left"><code>&lt;track&gt;</code></td><td align="left">定义用在媒体播放器中的文本轨道。</td></tr><tr><td align="left"><code>&lt;video&gt;</code></td><td align="left">定义视频。</td></tr></tbody></table><h4 id="1-5-browser-sync"><a href="#1-5-browser-sync" class="headerlink" title="1.5 browser-sync"></a>1.5 browser-sync</h4><h4 id="1-6-HTML5表单"><a href="#1-6-HTML5表单" class="headerlink" title="1.6 HTML5表单"></a>1.6 HTML5表单</h4><h5 id="HTML5-新的-Input-类型"><a href="#HTML5-新的-Input-类型" class="headerlink" title="HTML5 新的 Input 类型"></a>HTML5 新的 Input 类型</h5><p>HTML5 拥有多个新的表单输入类型。这些新特性提供了更好的输入控制和验证：</p><ul><li>email</li><li>url</li><li>number</li><li>range</li><li>Date pickers (date, month, week, time, datetime, datetime-local)</li><li>search</li><li>color</li></ul><h5 id="1-6-2-Input-类型-email"><a href="#1-6-2-Input-类型-email" class="headerlink" title="1.6.2 Input 类型 - email"></a>1.6.2 Input 类型 - email</h5><p>email 类型用于应该包含 e-mail 地址的输入域。</p><p>在提交表单时，会自动验证 email 域的值。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">E-mail: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;email&quot; <span class="hljs-type">name</span>=&quot;user_email&quot; /&gt;<br></code></pre></td></tr></table></figure><p><strong>Input 类型 - url</strong></p><p>url 类型用于应该包含 URL 地址的输入域。</p><p>在提交表单时，会自动验证 url 域的值。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Homepage: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;url&quot; <span class="hljs-type">name</span>=&quot;user_url&quot; /&gt;<br></code></pre></td></tr></table></figure><p><strong>Input 类型 - number</strong></p><p>number 类型用于应该包含数值的输入域。</p><p>您还能够设定对所接受的数字的限定：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">Points: &lt;<span class="hljs-built_in">input</span> <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;number&quot;</span> name=<span class="hljs-string">&quot;points&quot;</span> <span class="hljs-built_in">min</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-built_in">max</span>=<span class="hljs-string">&quot;10&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>请使用下面的属性来规定对数字类型的限定：</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">max</td><td align="left"><em>number</em></td><td align="left">规定允许的最大值</td></tr><tr><td align="left">min</td><td align="left"><em>number</em></td><td align="left">规定允许的最小值</td></tr><tr><td align="left">step</td><td align="left"><em>number</em></td><td align="left">规定合法的数字间隔（如果 step=”3”，则合法的数是 -3,0,3,6 等）</td></tr><tr><td align="left">value</td><td align="left"><em>number</em></td><td align="left">规定默认值</td></tr></tbody></table><p><strong>Input 类型 - range</strong></p><p>range 类型用于应该包含一定范围内数字值的输入域。</p><p>range 类型显示为滑动条。</p><p>您还能够设定对所接受的数字的限定：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input type<span class="hljs-operator">=</span><span class="hljs-string">&quot;range&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;points&quot;</span> min<span class="hljs-operator">=</span><span class="hljs-string">&quot;1&quot;</span> max<span class="hljs-operator">=</span><span class="hljs-string">&quot;10&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>请使用下面的属性来规定对数字类型的限定：</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">max</td><td align="left"><em>number</em></td><td align="left">规定允许的最大值</td></tr><tr><td align="left">min</td><td align="left"><em>number</em></td><td align="left">规定允许的最小值</td></tr><tr><td align="left">step</td><td align="left"><em>number</em></td><td align="left">规定合法的数字间隔（如果 step=”3”，则合法的数是 -3,0,3,6 等）</td></tr><tr><td align="left">value</td><td align="left"><em>number</em></td><td align="left">规定默认值</td></tr></tbody></table><p><strong>Input 类型 - Date Pickers（日期选择器）</strong></p><p>HTML5 拥有多个可供选取日期和时间的新输入类型：</p><ul><li>date - 选取日、月、年</li><li>month - 选取月、年</li><li>week - 选取周和年</li><li>time - 选取时间（小时和分钟）</li><li>datetime - 选取时间、日、月、年（UTC 时间）</li><li>datetime-local - 选取时间、日、月、年（本地时间）</li></ul><p>下面的例子允许您从日历中选取一个日期：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Date</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;date&quot; <span class="hljs-type">name</span>=&quot;user_date&quot; /&gt;<br></code></pre></td></tr></table></figure><p>color: 颜色选择器</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Color: &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;color&quot;</span> <span class="hljs-attribute">onchange</span>=<span class="hljs-string">&quot;getColor()&quot;</span>  <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;colorSelector&quot;</span>&gt;  &lt;br&gt;<br></code></pre></td></tr></table></figure><p>Input 类型 - search**</p><p>search 类型用于搜索域，比如站点搜索或 Google 搜索。</p><p>search 域显示为常规的文本域。</p><h5 id="1-6-3-HTML5-新的表单元素"><a href="#1-6-3-HTML5-新的表单元素" class="headerlink" title="1.6.3 HTML5 新的表单元素"></a>1.6.3 HTML5 新的表单元素</h5><p>HTML5 拥有若干涉及表单的元素和属性。</p><ul><li>datalist</li><li>keygen</li><li>output</li></ul><p><strong>datalist 元素</strong></p><p>datalist 元素规定输入域的选项列表。</p><p>列表是通过 datalist 内的 option 元素创建的。</p><p>如需把 datalist 绑定到输入域，请用输入域的 list 属性引用 datalist 的 id：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">Webpage: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;url_list&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;link&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;url_list&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;baidu&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;tencent&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://www.qq.com&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;alibaba&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://www.alibaba.com&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>output 元素</strong></p><p>output 元素用于不同类型的输出，比如计算或脚本输出：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;output <span class="hljs-attribute">id</span>=<span class="hljs-string">&quot;result&quot;</span> <span class="hljs-attribute">onforminput</span>=<span class="hljs-string">&quot;resCalc()&quot;</span>&gt;&lt;/output&gt;<br></code></pre></td></tr></table></figure><h5 id="1-6-4-HTML5-新的表单属性"><a href="#1-6-4-HTML5-新的表单属性" class="headerlink" title="1.6.4 HTML5 新的表单属性"></a>1.6.4 HTML5 新的表单属性</h5><p><strong>新的 form 属性：</strong></p><ul><li>autocomplete</li><li>novalidate</li></ul><p><strong>新的 input 属性：</strong></p><ul><li>autocomplete</li><li>autofocus</li><li>form</li><li>form overrides (formaction, formenctype, formmethod, formnovalidate, formtarget)</li><li>height 和 width</li><li>list</li><li>min, max 和 step</li><li>multiple</li><li>pattern (regexp)</li><li>placeholder</li><li>required</li></ul><p><strong>autocomplete 属性</strong></p><p>autocomplete 属性规定 form 或 input 域应该拥有自动完成功能。</p><p><strong>注释：</strong>autocomplete 适用于 <code>&lt;form&gt; </code>标签，以及以下类型的 <code>&lt;input&gt;</code> 标签：text, search, url, telephone, email, password, datepickers, range 以及 color。</p><p>当用户在自动完成域中开始输入时，浏览器应该在该域中显示填写的选项：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form action=&quot;demo_form.php&quot; <span class="hljs-keyword">method</span>=&quot;get&quot; autocomplete=&quot;on&quot;&gt;<br>First <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;fname&quot; /&gt;&lt;br /&gt;<br>Last <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;lname&quot; /&gt;&lt;br /&gt;<br>E-mail: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;email&quot; <span class="hljs-type">name</span>=&quot;email&quot; autocomplete=&quot;off&quot; /&gt;&lt;br /&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; /&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p><strong>注释：</strong>在某些浏览器中，您可能需要启用自动完成功能，以使该属性生效。(firefox支持较好)</p><p><strong>autofocus 属性</strong></p><p>autofocus 属性规定在页面加载时，域自动地获得焦点。</p><p><strong>注释：</strong>autofocus 属性适用于所有 <code>&lt;input&gt;</code> 标签的类型。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">User</span> <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;user_name&quot;  autofocus=&quot;autofocus&quot; /&gt;<br></code></pre></td></tr></table></figure><p><strong>form 属性</strong></p><p>form 属性规定输入域所属的一个或多个表单。</p><p><strong>注释：</strong>form 属性适用于所有 <code>&lt;input&gt; </code>标签的类型。</p><p>form 属性必须引用所属表单的 id：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form action=&quot;demo_form.php&quot; <span class="hljs-keyword">method</span>=&quot;get&quot; id=&quot;user_form&quot;&gt;<br>First <span class="hljs-type">name</span>:&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;fname&quot; /&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; /&gt;<br>&lt;/form&gt;<br>Last <span class="hljs-type">name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;lname&quot; form=&quot;user_form&quot; /&gt;<br></code></pre></td></tr></table></figure><p><strong>注释：</strong>如需引用一个以上的表单，请使用空格分隔的列表。</p><p><strong>表单重写属性</strong></p><p>表单重写属性（form override attributes）允许您重写 form 元素的某些属性设定。</p><p>表单重写属性有：</p><ul><li>formaction - 重写表单的 action 属性</li><li>formenctype - 重写表单的 enctype 属性</li><li>formmethod - 重写表单的 method 属性</li><li>formnovalidate - 重写表单的 novalidate 属性</li><li>formtarget - 重写表单的 target 属性</li></ul><p><strong>注释：</strong>表单重写属性适用于以下类型的 <code>&lt;input&gt;</code> 标签：submit 和 image。</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stata">&lt;<span class="hljs-keyword">form</span> action=<span class="hljs-string">&quot;demo_form.php&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span> id=<span class="hljs-string">&quot;user_form&quot;</span>&gt;<br><span class="hljs-keyword">E</span>-mail: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;email&quot;</span> name=<span class="hljs-string">&quot;userid&quot;</span> /&gt;&lt;<span class="hljs-keyword">br</span> /&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;Submit&quot;</span> /&gt;<br>&lt;<span class="hljs-keyword">br</span> /&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> formaction=<span class="hljs-string">&quot;demo_admin.php&quot;</span> value=<span class="hljs-string">&quot;Submit as admin&quot;</span> /&gt;<br>&lt;<span class="hljs-keyword">br</span> /&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=<span class="hljs-string">&quot;submit&quot;</span> formnovalidate=<span class="hljs-string">&quot;true&quot;</span> value=<span class="hljs-string">&quot;Submit without validation&quot;</span> /&gt;<br>&lt;<span class="hljs-keyword">br</span> /&gt;<br>&lt;/<span class="hljs-keyword">form</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>注释：</strong>这些属性对于创建不同的提交按钮很有帮助。</p><p><strong>height 和 width 属性</strong></p><p>height 和 width 属性规定用于 image 类型的 input 标签的图像高度和宽度。</p><p><strong>注释：</strong>height 和 width 属性只适用于 image 类型的 <code>&lt;input&gt;</code> 标签。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input type<span class="hljs-operator">=</span><span class="hljs-string">&quot;image&quot;</span> src<span class="hljs-operator">=</span><span class="hljs-string">&quot;img_submit.gif&quot;</span> width<span class="hljs-operator">=</span><span class="hljs-string">&quot;99&quot;</span> height<span class="hljs-operator">=</span><span class="hljs-string">&quot;99&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><strong>list 属性</strong></p><p>list 属性规定输入域的 datalist。datalist 是输入域的选项列表。</p><p><strong>注释：</strong>list 属性适用于以下类型的 <code>&lt;input&gt;</code> 标签：text, search, url, telephone, email, date pickers, number, range 以及 color。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml">Webpage: <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">list</span>=<span class="hljs-string">&quot;url_list&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;link&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">datalist</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;url_list&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;baidu&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://www.baidu.com&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;tencent&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://www.qq.com&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">label</span>=<span class="hljs-string">&quot;alibaba&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;http://www.alibaba.com&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">datalist</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>min、max 和 step 属性</strong></p><p>min、max 和 step 属性用于为包含数字或日期的 input 类型规定限定（约束）。</p><p>max 属性规定输入域所允许的最大值。</p><p>min 属性规定输入域所允许的最小值。</p><p>step 属性为输入域规定合法的数字间隔（如果 step=”3”，则合法的数是 -3,0,3,6 等）。</p><p><strong>注释：</strong>min、max 和 step 属性适用于以下类型的<code> &lt;input&gt;</code> 标签：date pickers、number 以及 range。</p><p>下面的例子显示一个数字域，该域接受介于 0 到 10 之间的值，且步进为 3（即合法的值为 0、3、6 和 9）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Points: &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;number&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;points&quot;</span> <span class="hljs-attribute">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attribute">max</span>=<span class="hljs-string">&quot;10&quot;</span> <span class="hljs-attribute">step</span>=<span class="hljs-string">&quot;3&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><strong>multiple 属性</strong></p><p>multiple 属性规定输入域中可选择多个值。</p><p><strong>注释：</strong>multiple 属性适用于以下类型的 <code>&lt;input&gt;</code> 标签：email 和 file。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">Select</span> images: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;file&quot; <span class="hljs-type">name</span>=&quot;img&quot; multiple=&quot;multiple&quot; /&gt;<br></code></pre></td></tr></table></figure><p><strong>novalidate 属性</strong></p><p>novalidate 属性规定在提交表单时不应该验证 form 或 input 域。</p><p><strong>注释：</strong>novalidate 属性适用于 <code>&lt;form&gt;</code> 以及以下类型的 <code>&lt;input&gt;</code> 标签：text, search, url, telephone, email, password, date pickers, range 以及 color.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">&lt;form action=&quot;demo_form.php&quot; <span class="hljs-keyword">method</span>=&quot;get&quot; novalidate=&quot;true&quot;&gt;<br>E-mail: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;email&quot; <span class="hljs-type">name</span>=&quot;user_email&quot; /&gt;<br>&lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot; /&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p><strong>pattern 属性</strong></p><p>pattern 属性规定用于验证 input 域的模式（pattern）。</p><p>模式（pattern） 是正则表达式。</p><p><strong>注释：</strong>pattern 属性适用于以下类型的 <code>&lt;input&gt;</code> 标签：text, search, url, telephone, email 以及 password。</p><p>下面的例子显示了一个只能包含三个字母的文本域（不含数字及特殊字符）：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Country code: &lt;input <span class="hljs-attribute">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attribute">name</span>=<span class="hljs-string">&quot;country_code&quot;</span><br><span class="hljs-attribute">pattern</span>=<span class="hljs-string">&quot;[A-z]&#123;3&#125;&quot;</span> <span class="hljs-attribute">title</span>=<span class="hljs-string">&quot;Three letter country code&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><strong>placeholder 属性</strong></p><p>placeholder 属性提供一种提示（hint），描述输入域所期待的值。</p><p><strong>注释：</strong>placeholder 属性适用于以下类型的 <code>&lt;input&gt;</code> 标签：text, search, url, telephone, email 以及 password。</p><p>提示（hint）会在输入域为空时显示出现，会在输入域获得焦点时消失：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;input type<span class="hljs-operator">=</span><span class="hljs-string">&quot;search&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;user_search&quot;</span>  placeholder<span class="hljs-operator">=</span><span class="hljs-string">&quot;Search&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p><strong>required 属性</strong></p><p>required 属性规定必须在提交之前填写输入域（不能为空）。</p><p><strong>注释：</strong>required 属性适用于以下类型的<code> &lt;input&gt;</code> 标签：text, search, url, telephone, email, password, date pickers, number, checkbox, radio 以及 file。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">Name</span>: &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;usr_name&quot; required=&quot;required&quot; /&gt;<br></code></pre></td></tr></table></figure><h4 id="1-7-HTML5-全局属性"><a href="#1-7-HTML5-全局属性" class="headerlink" title="1.7 HTML5 全局属性"></a>1.7 HTML5 全局属性</h4><p>HTML5 中添加的属性。</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">contenteditable</td><td align="left">规定元素内容是否可编辑。</td></tr><tr><td align="left">contextmenu</td><td align="left">规定元素的上下文菜单。上下文菜单在用户点击元素时显示。(浏览器不支持)</td></tr><tr><td align="left">data-*</td><td align="left">用于存储页面或应用程序的私有定制数据。</td></tr><tr><td align="left">draggable</td><td align="left">规定元素是否可拖动。</td></tr><tr><td align="left">dropzone</td><td align="left">规定在拖动被拖动数据时是否进行复制、移动或链接。</td></tr><tr><td align="left">hidden</td><td align="left">隐藏元素</td></tr><tr><td align="left">spellcheck</td><td align="left">规定是否对元素进行拼写和语法检查。</td></tr><tr><td align="left">translate</td><td align="left">规定是否应该翻译元素内容。</td></tr></tbody></table><h4 id="1-8-HTML5事件"><a href="#1-8-HTML5事件" class="headerlink" title="1.8 HTML5事件"></a>1.8 HTML5事件</h4><h5 id="1-8-1-window-事件属性"><a href="#1-8-1-window-事件属性" class="headerlink" title="1.8.1 window 事件属性"></a>1.8.1 window 事件属性</h5><p>针对 window 对象触发的事件（应用到 <body> 标签）：</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onafterprint</td><td align="left">script</td><td align="left">文档打印之后运行的脚本。(火狐)</td></tr><tr><td align="left">onbeforeprint</td><td align="left">script</td><td align="left">文档打印之前运行的脚本。(火狐)</td></tr><tr><td align="left">onbeforeunload</td><td align="left">script</td><td align="left">文档卸载之前运行的脚本。 (chrome)</td></tr><tr><td align="left">onerror</td><td align="left">script</td><td align="left">在错误发生时运行的脚本。</td></tr><tr><td align="left">onhashchange</td><td align="left">script</td><td align="left">当文档已改变时运行的脚本。</td></tr><tr><td align="left">onmessage</td><td align="left">script</td><td align="left">在消息被触发时运行的脚本。</td></tr><tr><td align="left">onoffline</td><td align="left">script</td><td align="left">当文档离线时运行的脚本。(火狐)</td></tr><tr><td align="left">ononline</td><td align="left">script</td><td align="left">当文档上线时运行的脚本。(火狐)</td></tr><tr><td align="left">onpagehide</td><td align="left">script</td><td align="left">当窗口隐藏时运行的脚本。(火狐/chrome)</td></tr><tr><td align="left">onpageshow</td><td align="left">script</td><td align="left">当窗口成为可见时运行的脚本。(火狐/chrome)</td></tr><tr><td align="left">onpopstate</td><td align="left">script</td><td align="left">当窗口历史记录改变时运行的脚本。</td></tr><tr><td align="left">onredo</td><td align="left">script</td><td align="left">当文档执行撤销（redo）时运行的脚本。</td></tr><tr><td align="left">onstorage</td><td align="left">script</td><td align="left">在 Web Storage 区域更新后运行的脚本。</td></tr><tr><td align="left">onundo</td><td align="left">script</td><td align="left">在文档执行 undo 时运行的脚本。</td></tr></tbody></table><h5 id="1-8-2-Form-事件"><a href="#1-8-2-Form-事件" class="headerlink" title="1.8.2 Form 事件"></a>1.8.2 Form 事件</h5><p>由 HTML 表单内的动作触发的事件（应用到几乎所有 HTML 元素，但最常用在 form 元素中）：</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">oncontextmenu</td><td align="left">script</td><td align="left">当上下文菜单被触发时运行的脚本。(鼠标右键触发)</td></tr><tr><td align="left">onformchange</td><td align="left">script</td><td align="left">在表单改变时运行的脚本。</td></tr><tr><td align="left">onforminput</td><td align="left">script</td><td align="left">当表单获得用户输入时运行的脚本。</td></tr><tr><td align="left">oninvalid</td><td align="left">script</td><td align="left">当元素无效时运行的脚本。</td></tr></tbody></table><p>oncontextmenu事件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;ie=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-tag">ul</span>, <span class="hljs-selector-tag">li</span> &#123;</span><br><span class="language-css">            <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#myMenu</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">list-style</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: none;</span><br><span class="language-css">            <span class="hljs-attribute">position</span>: absolute;</span><br><span class="language-css">            <span class="hljs-attribute">display</span>: none;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#myMenu</span> <span class="hljs-selector-tag">li</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">border-bottom</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">            <span class="hljs-attribute">padding</span>: <span class="hljs-number">5px</span> <span class="hljs-number">10px</span>;</span><br><span class="language-css">            <span class="hljs-attribute">cursor</span>: pointer;</span><br><span class="language-css">        &#125;</span><br><span class="language-css"></span><br><span class="language-css">        <span class="hljs-selector-id">#myMenu</span> <span class="hljs-selector-tag">li</span><span class="hljs-selector-pseudo">:hover</span>&#123;</span><br><span class="language-css">            <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#ccc</span>;</span><br><span class="language-css">        &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myMenu&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>右键想干什么？<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>想看源代码？<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>还是想审查元素？<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> myMenu = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myMenu&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;contextmenu&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">    event.<span class="hljs-title function_">preventDefault</span>();</span><br><span class="language-javascript">    myMenu.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;block&quot;</span>;</span><br><span class="language-javascript">    <span class="hljs-comment">//获取鼠标视口位置</span></span><br><span class="language-javascript">    myMenu.<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = event.<span class="hljs-property">clientY</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">    myMenu.<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = event.<span class="hljs-property">clientX</span> + <span class="hljs-string">&quot;px&quot;</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>)&#123;</span><br><span class="language-javascript">    myMenu.<span class="hljs-property">style</span>.<span class="hljs-property">display</span> = <span class="hljs-string">&quot;none&quot;</span>;</span><br><span class="language-javascript">&#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="1-8-3-Mouse-事件"><a href="#1-8-3-Mouse-事件" class="headerlink" title="1.8.3 Mouse 事件"></a>1.8.3 Mouse 事件</h5><p>由鼠标或类似用户动作触发的事件：</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">ondrag</td><td align="left">script</td><td align="left">元素被拖动时运行的脚本。</td></tr><tr><td align="left">ondragend</td><td align="left">script</td><td align="left">在拖动操作末端运行的脚本。</td></tr><tr><td align="left">ondragenter</td><td align="left">script</td><td align="left">当元素元素已被拖动到有效拖放区域时运行的脚本。</td></tr><tr><td align="left">ondragleave</td><td align="left">script</td><td align="left">当元素离开有效拖放目标时运行的脚本。</td></tr><tr><td align="left">ondragover</td><td align="left">script</td><td align="left">当元素在有效拖放目标上正在被拖动时运行的脚本。</td></tr><tr><td align="left">ondragstart</td><td align="left">script</td><td align="left">在拖动操作开端运行的脚本。</td></tr><tr><td align="left">ondrop</td><td align="left">script</td><td align="left">当被拖元素正在被拖放时运行的脚本。</td></tr><tr><td align="left">onmousewheel</td><td align="left">script</td><td align="left">当鼠标滚轮正在被滚动时运行的脚本。</td></tr><tr><td align="left">onscroll</td><td align="left">script</td><td align="left">当元素滚动条被滚动时运行的脚本。</td></tr></tbody></table><h5 id="1-8-4-Media-事件"><a href="#1-8-4-Media-事件" class="headerlink" title="1.8.4 Media 事件"></a>1.8.4 Media 事件</h5><p>由媒介（比如视频、图像和音频）触发的事件（适用于所有 HTML 元素，但常见于媒介元素中，比如 <code>&lt;audio&gt;、&lt;embed&gt;、&lt;img&gt;、&lt;object&gt; 以及 &lt;video&gt;</code>）:</p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">oncanplay</td><td align="left">script</td><td align="left">当文件就绪可以开始播放时运行的脚本（缓冲已足够开始时）。</td></tr><tr><td align="left">oncanplaythrough</td><td align="left">script</td><td align="left">当媒介能够无需因缓冲而停止即可播放至结尾时运行的脚本。</td></tr><tr><td align="left">ondurationchange</td><td align="left">script</td><td align="left">当媒介长度改变时运行的脚本。</td></tr><tr><td align="left">onemptied</td><td align="left">script</td><td align="left">当发生故障并且文件突然不可用时运行的脚本（比如连接意外断开时）。</td></tr><tr><td align="left">onended</td><td align="left">script</td><td align="left">当媒介已到达结尾时运行的脚本（可发送类似“感谢观看”之类的消息）。</td></tr><tr><td align="left">onerror</td><td align="left">script</td><td align="left">当在文件加载期间发生错误时运行的脚本。</td></tr><tr><td align="left">onloadeddata</td><td align="left">script</td><td align="left">当媒介数据已加载时运行的脚本。</td></tr><tr><td align="left">onloadedmetadata</td><td align="left">script</td><td align="left">当元数据（比如分辨率和时长）被加载时运行的脚本。</td></tr><tr><td align="left">onloadstart</td><td align="left">script</td><td align="left">在文件开始加载且未实际加载任何数据前运行的脚本。</td></tr><tr><td align="left">onpause</td><td align="left">script</td><td align="left">当媒介被用户或程序暂停时运行的脚本。</td></tr><tr><td align="left">onplay</td><td align="left">script</td><td align="left">当媒介已就绪可以开始播放时运行的脚本。</td></tr><tr><td align="left">onplaying</td><td align="left">script</td><td align="left">当媒介已开始播放时运行的脚本。</td></tr><tr><td align="left">onprogress</td><td align="left">script</td><td align="left">当浏览器正在获取媒介数据时运行的脚本。</td></tr><tr><td align="left">onratechange</td><td align="left">script</td><td align="left">每当回放速率改变时运行的脚本（比如当用户切换到慢动作或快进模式）。</td></tr><tr><td align="left">onreadystatechange</td><td align="left">script</td><td align="left">每当就绪状态改变时运行的脚本（就绪状态监测媒介数据的状态）。</td></tr><tr><td align="left">onseeked</td><td align="left">script</td><td align="left">当 seeking 属性设置为 false（指示定位已结束）时运行的脚本。</td></tr><tr><td align="left">onseeking</td><td align="left">script</td><td align="left">当 seeking 属性设置为 true（指示定位是活动的）时运行的脚本。</td></tr><tr><td align="left">onstalled</td><td align="left">script</td><td align="left">在浏览器不论何种原因未能取回媒介数据时运行的脚本。</td></tr><tr><td align="left">onsuspend</td><td align="left">script</td><td align="left">在媒介数据完全加载之前不论何种原因终止取回媒介数据时运行的脚本。</td></tr><tr><td align="left">ontimeupdate</td><td align="left">script</td><td align="left">当播放位置改变时（比如当用户快进到媒介中一个不同的位置时）运行的脚本。</td></tr><tr><td align="left">onvolumechange</td><td align="left">script</td><td align="left">每当音量改变时（包括将音量设置为静音）时运行的脚本。</td></tr><tr><td align="left">onwaiting</td><td align="left">script</td><td align="left">当媒介已停止播放但打算继续播放时（比如当媒介暂停已缓冲更多数据）运行脚本</td></tr></tbody></table><h4 id="1-9-video"><a href="#1-9-video" class="headerlink" title="1.9 video"></a>1.9 video</h4><p><strong>1、 定义和用法</strong></p><p><code>&lt;video&gt;</code> 标签定义视频，比如电影片段或其他视频流。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;video width<span class="hljs-operator">=</span><span class="hljs-string">&quot;320&quot;</span> height<span class="hljs-operator">=</span><span class="hljs-string">&quot;240&quot;</span> controls&gt;<br>    &lt;source src<span class="hljs-operator">=</span><span class="hljs-string">&quot;movie.mp4&quot;</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;video/mp4&quot;</span>&gt;<br>    &lt;source src<span class="hljs-operator">=</span><span class="hljs-string">&quot;movie.ogg&quot;</span> type<span class="hljs-operator">=</span><span class="hljs-string">&quot;video/ogg&quot;</span>&gt;<br>    您的浏览器不支持 video 标签。<br>&lt;/video&gt;<br></code></pre></td></tr></table></figure><p><strong>2、标签定义及使用说明</strong></p><p>目前，<code>&lt;video&gt;</code> 元素支持三种视频格式：MP4、WebM、Ogg。</p><table><thead><tr><th align="left">浏览器</th><th align="left">MP4</th><th align="left">WebM</th><th align="left">Ogg</th></tr></thead><tbody><tr><td align="left">Internet Explorer</td><td align="left">YES</td><td align="left">NO</td><td align="left">NO</td></tr><tr><td align="left">Chrome</td><td align="left">YES</td><td align="left">YES</td><td align="left">YES</td></tr><tr><td align="left">Firefox</td><td align="left">YES 从 Firefox 21 版本开始 Linux 系统从 Firefox 30 开始</td><td align="left">YES</td><td align="left">YES</td></tr><tr><td align="left">Safari</td><td align="left">YES</td><td align="left">NO</td><td align="left">NO</td></tr><tr><td align="left">Opera</td><td align="left">YES 从 Opera 25 版本开始</td><td align="left">YES</td><td align="left">YES</td></tr></tbody></table><ul><li>MP4 = MPEG 4文件使用 H264 视频编解码器和AAC音频编解码器</li><li>WebM = WebM 文件使用 VP8 视频编解码器和 Vorbis 音频编解码器</li><li>Ogg = Ogg 文件使用 Theora 视频编解码器和 Vorbis音频编解码器</li></ul><p><strong>3、属性</strong></p><table><thead><tr><th align="left">属性</th><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">autoplay</td><td align="left">autoplay</td><td align="left">如果出现该属性，则视频在就绪后马上播放。</td></tr><tr><td align="left">controls</td><td align="left">controls</td><td align="left">如果出现该属性，则向用户显示控件，比如播放按钮。</td></tr><tr><td align="left">height</td><td align="left"><em>pixels</em></td><td align="left">设置视频播放器的高度。</td></tr><tr><td align="left">loop</td><td align="left">loop</td><td align="left">如果出现该属性，则当媒介文件完成播放后再次开始播放。</td></tr><tr><td align="left">muted</td><td align="left">muted</td><td align="left">规定视频的音频输出应该被静音。</td></tr><tr><td align="left">poster</td><td align="left"><em>URL</em></td><td align="left">规定视频下载时显示的图像，或者在用户点击播放按钮前显示的图像。</td></tr><tr><td align="left">preload</td><td align="left">preload</td><td align="left">如果出现该属性，则视频在页面加载时进行加载，并预备播放。如果使用 “autoplay”，则忽略该属性。</td></tr><tr><td align="left">src</td><td align="left"><em>url</em></td><td align="left">要播放的视频的 URL。</td></tr><tr><td align="left">width</td><td align="left"><em>pixels</em></td><td align="left">设置视频播放器的宽度。</td></tr></tbody></table><p><strong>4、使用DOM控制</strong></p><p>HTML5 <code>&lt;video&gt;</code> 元素同样拥有方法、属性和事件。</p><p>其中的方法用于播放、暂停以及加载等。其中的属性（比如时长、音量等）可以被读取或设置。其中的 DOM 事件能够通知您，比方说，<video> 元素开始播放、已暂停，已停止，等等。</p><table><thead><tr><th align="left">方法</th><th align="left">属性</th><th align="left">事件</th></tr></thead><tbody><tr><td align="left">play()</td><td align="left">currentSrc</td><td align="left">play</td></tr><tr><td align="left">pause()</td><td align="left">currentTime</td><td align="left">pause</td></tr><tr><td align="left">load()</td><td align="left">videoWidth</td><td align="left">progress</td></tr><tr><td align="left">canPlayType</td><td align="left">videoHeight</td><td align="left">error</td></tr><tr><td align="left"></td><td align="left">duration</td><td align="left">timeupdate</td></tr><tr><td align="left"></td><td align="left">ended</td><td align="left">ended</td></tr><tr><td align="left"></td><td align="left">error</td><td align="left">abort</td></tr><tr><td align="left"></td><td align="left">paused</td><td align="left">empty</td></tr><tr><td align="left"></td><td align="left">muted</td><td align="left">emptied</td></tr><tr><td align="left"></td><td align="left">seeking</td><td align="left">waiting</td></tr><tr><td align="left"></td><td align="left">volume</td><td align="left">loadedmetadata</td></tr><tr><td align="left"></td><td align="left">height</td><td align="left"></td></tr><tr><td align="left"></td><td align="left">width</td><td align="left"></td></tr></tbody></table><p><strong>注释：</strong>在所有属性中，只有 videoWidth 和 videoHeight 属性是立即可用的。在视频的元数据已加载后，其他属性才可用。</p><h4 id="1-10-audio"><a href="#1-10-audio" class="headerlink" title="1.10 audio"></a>1.10 audio</h4><p><strong>1、 定义和用法</strong></p><p><code>&lt;audio&gt;</code> 标签定义声音，比如音乐或其他音频流。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">audio</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;someaudio.wav&quot;</span>&gt;<br>您的浏览器不支持 <span class="hljs-selector-tag">audio</span> 标签。<br>&lt;/audio&gt;<br></code></pre></td></tr></table></figure><p><strong>2、音频格式</strong></p><p>当前，audio 元素支持三种音频格式：</p><table><thead><tr><th align="left"></th><th align="left">IE 9</th><th align="left">Firefox 3.5</th><th align="left">Opera 10.5</th><th align="left">Chrome 3.0</th><th align="left">Safari 3.0</th></tr></thead><tbody><tr><td align="left">Ogg Vorbis</td><td align="left"></td><td align="left">√</td><td align="left">√</td><td align="left">√</td><td align="left"></td></tr><tr><td align="left">MP3</td><td align="left">√</td><td align="left"></td><td align="left"></td><td align="left">√</td><td align="left">√</td></tr><tr><td align="left">Wav</td><td align="left"></td><td align="left">√</td><td align="left">√</td><td align="left"></td><td align="left">√</td></tr></tbody></table><p><strong>3、属性</strong></p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">audioTracks</td><td align="left">返回表示可用音频轨道的 AudioTrackList 对象。</td></tr><tr><td align="left">autoplay</td><td align="left">设置或返回是否在就绪（加载完成）后随即播放音频。</td></tr><tr><td align="left">buffered</td><td align="left">返回表示音频已缓冲部分的 TimeRanges 对象。</td></tr><tr><td align="left">controller</td><td align="left">返回表示音频当前媒体控制器的 MediaController 对象。</td></tr><tr><td align="left">controls</td><td align="left">设置或返回音频是否应该显示控件（比如播放/暂停等）。</td></tr><tr><td align="left">crossOrigin</td><td align="left">设置或返回音频的 CORS 设置。</td></tr><tr><td align="left">currentSrc</td><td align="left">返回当前音频的 URL。</td></tr><tr><td align="left">currentTime</td><td align="left">设置或返回音频中的当前播放位置（以秒计）。</td></tr><tr><td align="left">defaultMuted</td><td align="left">设置或返回音频默认是否静音。</td></tr><tr><td align="left">defaultPlaybackRate</td><td align="left">设置或返回音频的默认播放速度。</td></tr><tr><td align="left">duration</td><td align="left">返回音频的长度（以秒计）。</td></tr><tr><td align="left">ended</td><td align="left">返回音频的播放是否已结束。</td></tr><tr><td align="left">error</td><td align="left">返回表示音频错误状态的 MediaError 对象。</td></tr><tr><td align="left">loop</td><td align="left">设置或返回音频是否应在结束时再次播放。</td></tr><tr><td align="left">mediaGroup</td><td align="left">设置或返回音频所属媒介组合的名称。</td></tr><tr><td align="left">muted</td><td align="left">设置或返回是否关闭声音。</td></tr><tr><td align="left">networkState</td><td align="left">返回音频的当前网络状态。</td></tr><tr><td align="left">paused</td><td align="left">设置或返回音频是否暂停。</td></tr><tr><td align="left">playbackRate</td><td align="left">设置或返回音频播放的速度。</td></tr><tr><td align="left">played</td><td align="left">返回表示音频已播放部分的 TimeRanges 对象。</td></tr><tr><td align="left">preload</td><td align="left">设置或返回音频的 preload 属性的值。</td></tr><tr><td align="left">readyState</td><td align="left">返回音频当前的就绪状态。</td></tr><tr><td align="left">seekable</td><td align="left">返回表示音频可寻址部分的 TimeRanges 对象。</td></tr><tr><td align="left">seeking</td><td align="left">返回用户当前是否正在音频中进行查找。</td></tr><tr><td align="left">src</td><td align="left">设置或返回音频的 src 属性的值。</td></tr><tr><td align="left">textTracks</td><td align="left">返回表示可用文本轨道的 TextTrackList 对象。</td></tr><tr><td align="left">volume</td><td align="left">设置或返回音频的音量。</td></tr></tbody></table><p><strong>4、方法</strong></p><table><thead><tr><th align="left">方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">addTextTrack()</td><td align="left">向音频添加新的文本轨道。</td></tr><tr><td align="left">canPlayType()</td><td align="left">检查浏览器是否能够播放指定的音频类型。</td></tr><tr><td align="left">fastSeek()</td><td align="left">在音频播放器中指定播放时间。</td></tr><tr><td align="left">getStartDate()</td><td align="left">返回新的 Date 对象，表示当前时间线偏移量。</td></tr><tr><td align="left">load()</td><td align="left">重新加载音频元素。</td></tr><tr><td align="left">play()</td><td align="left">开始播放音频。</td></tr><tr><td align="left">pause()</td><td align="left">暂停当前播放的音频。</td></tr></tbody></table><p><strong>5、事件</strong></p><p>play 播放事件 可判断歌曲是否正在播放中<br>pause 暂停事件 判断歌曲是否暂停<br>loadstart，durationchange，loadeddata，progress，canplay，canplaythrough。（这些事件在加载过程中是按以上顺序触发的）<br>以上这些事件可以通过事件监听对其做相应处理。</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>详解this</title>
    <link href="/2019/08/09/2019-08-09-%E8%AF%A6%E8%A7%A3this/"/>
    <url>/2019/08/09/2019-08-09-%E8%AF%A6%E8%A7%A3this/</url>
    
    <content type="html"><![CDATA[<p>归根结底，this的指向就是一句话：<strong>谁最终调用函数，this就指向谁，和定义函数没关系</strong></p><p>1.this指向的，永远只可能是对象！<br>2.this指向谁，永远不取决于this写在哪，而是取决于函数在哪调用。<br>3.this指向的对象，称之为函数的上下文，即函数调用者。   </p><p>下面看几种情况</p><p><strong>通过函数名（）直接调用：this指向<code>window</code></strong>  </p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&gt;<span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span> ()&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">this</span> );<br>&gt;&#125;<br>&gt;<span class="hljs-title function_">func</span>();<span class="hljs-comment">//this --&gt; window</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>通过    对象.函数名（）调用的：this指向这个对象</strong>  </p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&gt;<span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>);<br>&gt;&#125;<br>&gt;<span class="hljs-comment">//狭义对象</span><br>&gt;<span class="hljs-keyword">var</span> obj = &#123; &#125;;<br>&gt;obj.<span class="hljs-title function_">func</span>();<span class="hljs-comment">//this --&gt; obj</span><br><br>&gt;<span class="hljs-comment">//广义对象</span><br>&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;div&#x27;</span>).<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">style</span>.<span class="hljs-property">backgroundColor</span> = <span class="hljs-string">&quot;red&quot;</span>;<br>&gt;&#125;;<span class="hljs-comment">//this --&gt; div</span><br><br></code></pre></td></tr></table></figure></blockquote><p><strong>函数作为数组的一个元素，通过数组下标调用，this指向这个数组</strong>  </p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&gt;<span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">this</span> );<br>&gt;&#125;<br>&gt;<span class="hljs-keyword">var</span> arr = [ func , <span class="hljs-number">2</span> , <span class="hljs-number">3</span> , <span class="hljs-number">4</span> ];<br>&gt;arr[<span class="hljs-number">0</span>]();<span class="hljs-comment">//this --&gt; arr</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>函数作为window内置函数的回调函数调用：this指向<code>window</code>（setInterval、serTimeout等）</strong></p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&gt;<span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span> () &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">this</span> );<br>&gt;&#125;<br>&gt;<span class="hljs-built_in">setTimeout</span>(func,<span class="hljs-number">1000</span>);<span class="hljs-comment">// this --&gt;window</span><br></code></pre></td></tr></table></figure></blockquote><p><strong>函数作为构造函数，用new关键字调用的时候，this指向新new出来的对象</strong>  </p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&gt;<span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span> ()&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">this</span> );<br>&gt;&#125;<br>&gt;<span class="hljs-keyword">var</span> obj = <span class="hljs-keyword">new</span> <span class="hljs-title function_">func</span>(); <span class="hljs-comment">// this --&gt;new出来的obj</span><br></code></pre></td></tr></table></figure></blockquote>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>作用域和作用域链</title>
    <link href="/2019/08/08/2019-08-08-%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
    <url>/2019/08/08/2019-08-08-%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="作用域和作用域链的理解"><a href="#作用域和作用域链的理解" class="headerlink" title="作用域和作用域链的理解"></a>作用域和作用域链的理解</h2><p>作用域：函数作用域与变量作用域  </p><blockquote><p>函数作用域的特点：可以调用到外面的函数，但是调用不到里面的函数<br>变量作用域的特点：可以调用到外面的变量，但是调用不到里面的变量</p></blockquote><hr><h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a><strong>变量作用域</strong></h2><p>在JavaScript中全局变量的作用域比较简单，它的作用域是全局的，在代码的任何地方都是有定义的。然而函数的参数和局部变量只在函数体内有定义。另外<code>局部变量的优先级要高于同名的全局变量</code>,也就是说当局部变量与全局变量重名时，<code>局部变量会覆盖全局变量</code>（如下面例子）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span>;<span class="hljs-comment">//声明一个全局变量</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> num = <span class="hljs-number">2</span>; <span class="hljs-comment">//声明一个局部变量</span><br><span class="hljs-keyword">return</span> num;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">foo</span>() );<span class="hljs-comment">//输出2</span><br></code></pre></td></tr></table></figure><p><em>注：声明局部变量的时候一定要<code>var</code>，否则解释器会将变量当做对象window的属性，相当于全局变量</em></p><hr><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a><strong>函数作用域</strong></h2><p>在JavaScript中变量的作用域，并非和C、Java等编程语言一样，在变量声明的代码段之外是不可见的，我们通常称为块级作用域，然而在JavaScript中使用的是函数作用域（变量在声明它们的函数体以及这个函数体嵌套的任意函数体都是有定义的）。（如下面的例子）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);           <span class="hljs-comment">//输出：undefined，而非报错，因为变量num在整个函数体内都是有定义的</span><br><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span>;                <span class="hljs-comment">//声明num 在整个函数体func内都有定义</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(num);           <span class="hljs-comment">//输出：1</span><br>&#125;<br><span class="hljs-title function_">func</span>();<br></code></pre></td></tr></table></figure><p><em>注：JavaScript的函数作用域是指在在函数内声明的所有变量在函数体内始终是可见的，也就是说在函数体内变量声明之前就已经可用了。</em></p><p><strong>作为属性的变量:当声明一个全局变量的时候，实际上是定义了全局对象window的一个属性。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> num = <span class="hljs-number">1</span>;            <span class="hljs-comment">//声明全变量num</span><br><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">num</span>)       <span class="hljs-comment">//输出：1 声明的全局变量实际上就是声明了一个window对象的属性</span><br><br></code></pre></td></tr></table></figure><hr><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a><strong>作用域链</strong></h2><h3 id="1-什么是自由变量"><a href="#1-什么是自由变量" class="headerlink" title="1.什么是自由变量"></a>1.什么是自由变量</h3><p>首先认识一下什么叫做 <strong>自由变量</strong> 。如下代码中，<code>console.log(a)</code>要得到<code>a</code>变量，但是在当前的作用域中没有定义<code>a</code>（可对比一下<code>b</code>）。当前作用域没有定义的变量，这成为 自由变量 。自由变量的值如何得到 —— 向父级作用域寻找（这种说法不严谨）。  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">200</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 这里的a在这里就是一个自由变量</span><br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b)<br>&#125;<br><span class="hljs-title function_">fn</span>()<br></code></pre></td></tr></table></figure><h3 id="2-什么是作用域链"><a href="#2-什么是作用域链" class="headerlink" title="2.什么是作用域链"></a>2.什么是作用域链</h3><p>如果父级也没有呢？再层层往上找，如果找到全局变量还是没有找到，那就宣告失败，这种一层一层的关系就叫做作用域链</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">F1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> b = <span class="hljs-number">200</span><br>    <span class="hljs-keyword">function</span> <span class="hljs-title function_">F2</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> c = <span class="hljs-number">300</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a) <span class="hljs-comment">// 自由变量，顺作用域链向父作用域找</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b) <span class="hljs-comment">// 自由变量，顺作用域链向父作用域找</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(c) <span class="hljs-comment">// 本作用域的变量</span><br>    &#125;<br>    <span class="hljs-title function_">F2</span>()<br>&#125;<br><span class="hljs-title function_">F1</span>()<br></code></pre></td></tr></table></figure><h3 id="3-关于自由变量的取值"><a href="#3-关于自由变量的取值" class="headerlink" title="3.关于自由变量的取值"></a>3.关于自由变量的取值</h3><p>这里要纠正一下第一点时候说到的自由变量是向父级作用域寻找而得到的这个说法；因为像如下的时候会产生歧义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> x = <span class="hljs-number">10</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(x)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">show</span>(<span class="hljs-params">f</span>) &#123;<br>  <span class="hljs-keyword">var</span> x = <span class="hljs-number">20</span><br>  (<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-title function_">f</span>() <span class="hljs-comment">//10，而不是20</span><br>  &#125;)()<br>&#125;<br><span class="hljs-title function_">show</span>(fn)<br></code></pre></td></tr></table></figure><p>在fn函数中，取自由变量<code>x</code>的值时，要到哪个作用域中取？—要到创建fn函数的那个作用域中取，<strong>不论fn函数要在哪里调用</strong><br>所以换一种说法，自由变量要到<strong>创建这个函数的那个域</strong>作用域中去取值；注意是<code>创建</code>，不是<code>调用</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">20</span><br>  <span class="hljs-keyword">function</span> <span class="hljs-title function_">bar</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a + b) <span class="hljs-comment">//30</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> bar<br>&#125;<br><span class="hljs-keyword">var</span> x = <span class="hljs-title function_">fn</span>(),<br>  b = <span class="hljs-number">200</span><br><span class="hljs-title function_">x</span>() <span class="hljs-comment">//bar()</span><br></code></pre></td></tr></table></figure><p>fn()返回的是bar()函数，被赋值给了<code>x</code>,执行x()，相当于执行bar()，需要取<code>a</code>和<code>b</code>的值，<code>b</code>的值可以直接在fn()中取出，而a取不到，则再到创建fn()的作用域中寻找，得到<code>a = 10</code>，所以最后结果为 30。</p><hr>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Weekly Practice</title>
    <link href="/2019/08/08/2019-08-08-%E7%BB%83%E4%B9%A0/"/>
    <url>/2019/08/08/2019-08-08-%E7%BB%83%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h3 id="1-列表隔行换色"><a href="#1-列表隔行换色" class="headerlink" title="1. 列表隔行换色"></a>1. 列表隔行换色</h3><p>简单的循环和JS获取元素样式（style）运用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;lis.<span class="hljs-property">length</span>;i++)&#123;<br><span class="hljs-keyword">if</span>( i%<span class="hljs-number">2</span> )&#123;   <span class="hljs-comment">//偶数行</span><br>lis[i].<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&#x27;red&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;   <span class="hljs-comment">//奇数行</span><br>lis[i].<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&#x27;blue&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只要能判断奇偶行，别的就没啥难的了。</p><hr><h3 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h3><p>嵌套循环、修改DOM内容的结合训练，当然，也可以直接用<code>document.write()</code>打印在页面上</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;elem&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> elem = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;elem&#x27;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">9</span>;i++)&#123;<br><span class="hljs-keyword">for</span>( j=<span class="hljs-number">1</span>; j&lt;=i; j++ )&#123;<br>elem.<span class="hljs-property">innerHTML</span> +=  i +<span class="hljs-string">&#x27;*&#x27;</span>+ j +<span class="hljs-string">&#x27;=&#x27;</span> + i*j + <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br>elem.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>内循环中的<code>j &lt;= i</code>着实巧妙，让代码呈梯形打印，如果让变量<code>j</code>小于9的话，那么输出会打印两遍</p><hr><h3 id="V字排列"><a href="#V字排列" class="headerlink" title="V字排列"></a>V字排列</h3><p>就是对每一个div绝对定位，分别定义他们的<code>top</code>和<code>left</code>,从而呈V字排列</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;lis.<span class="hljs-property">length</span>;i++)&#123;<br>lis[i].<span class="hljs-property">style</span>.<span class="hljs-property">left</span> = i * <span class="hljs-number">50</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br><span class="hljs-keyword">if</span>( i &gt; <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(lis.<span class="hljs-property">length</span>/<span class="hljs-number">2</span>) )&#123;<br>lis[i].<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = (lis.<span class="hljs-property">length</span> - i - <span class="hljs-number">1</span>) * <span class="hljs-number">50</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>lis[i].<span class="hljs-property">style</span>.<span class="hljs-property">top</span> = i * <span class="hljs-number">50</span> + <span class="hljs-string">&#x27;px&#x27;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意一下关于字符串拼接的时候引号和+号的使用技巧</strong></p><hr><h3 id="求第七位的斐波那契数列"><a href="#求第七位的斐波那契数列" class="headerlink" title="求第七位的斐波那契数列"></a>求第七位的斐波那契数列</h3><p>这里只使用循环来实现，递归方法后面会提到并实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> number = <span class="hljs-number">8</span>;<br><span class="hljs-keyword">var</span> result = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">var</span> one = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">var</span> two = <span class="hljs-number">1</span>;   <br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">2</span>;i&lt;number;i++)&#123;<br>result = one + two;<br>one = two; <br>two = result;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( result );<br></code></pre></td></tr></table></figure><p>因为前两项我们定义了为<code>one = 1</code>和<code>two = 1</code>，所以循环从2开始。</p><hr><h3 id="题目太长……"><a href="#题目太长……" class="headerlink" title="题目太长……"></a>题目太长……</h3><p>假设某人有 100,000  现金。 每经过一次路口需要进行一次交费。 交费规则为当他现金大于50,000  时每次需要交 5% ，如果现金小于等于 50,000  时每次交 5,000 。 请写一程序计算此人可以经过多少次这个路口？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> all = <span class="hljs-number">100000</span>;<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>( all &gt;= <span class="hljs-number">5000</span> )&#123;<br><span class="hljs-keyword">if</span>( all &gt; <span class="hljs-number">50000</span> )&#123;<br>  all -= all * <span class="hljs-number">0.05</span>;<br>  count++;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>all -= <span class="hljs-number">5000</span>;<br>count++;<br>&#125;<br>&#125;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( count );   <span class="hljs-comment">//23</span><br></code></pre></td></tr></table></figure><p>没啥好说的……挺经典的一道题，各种语言的版本都有</p><hr><h3 id="找出虽有三位数中的水仙花数"><a href="#找出虽有三位数中的水仙花数" class="headerlink" title="找出虽有三位数中的水仙花数"></a>找出虽有三位数中的水仙花数</h3><p>找出所有三位数中的水仙花数，即a³ + b³ + c³ = abc  ，例如 153就是一组水仙花数，1³ + 5³ + 3³ = 153</p><p>首先需要分离这个三位数，假设三位数为123，可以看成 1 * 100 + 2 * 10  + 3,那就好办了，只需要如下操作，三位数就被分离出来了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//老师的办法</span><br><span class="hljs-keyword">var</span> ge = number%<span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> shi = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(number%<span class="hljs-number">100</span>/<span class="hljs-number">10</span>);<br><span class="hljs-keyword">var</span> bai = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>(number/<span class="hljs-number">100</span>);<br><span class="hljs-comment">//我的办法</span><br><span class="hljs-keyword">var</span> ge = i % <span class="hljs-number">10</span>;<br><span class="hljs-keyword">var</span> shi = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>( i / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>);<br><span class="hljs-keyword">var</span> bai = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>( i / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>);<br><span class="hljs-comment">//大同小异，喜欢哪个用哪个</span><br></code></pre></td></tr></table></figure><p>然后套到循环里，进行判断就好</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span>( <span class="hljs-keyword">var</span> i = <span class="hljs-number">100</span>;i &lt; <span class="hljs-number">1000</span>; ++i )&#123;<br>   <span class="hljs-keyword">var</span> a = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>( i / <span class="hljs-number">100</span> % <span class="hljs-number">10</span>);<br>   <span class="hljs-keyword">var</span> b = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">floor</span>( i / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>);<br>   <span class="hljs-keyword">var</span> c = i % <span class="hljs-number">10</span>;<br>   <span class="hljs-keyword">if</span>( i == <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(a,<span class="hljs-number">3</span>) + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(b,<span class="hljs-number">3</span>) + <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(c,<span class="hljs-number">3</span>) )&#123;<br>   <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>( i + <span class="hljs-string">&#x27;&amp;nbsp;&#x27;</span>);<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="8月7日"><a href="#8月7日" class="headerlink" title="8月7日"></a>8月7日</h2><p>（此日答案均为摸鱼王自己做的，可能不够简单明了，等以后更新优化）</p><h3 id="1-阶乘、四则运算计算器"><a href="#1-阶乘、四则运算计算器" class="headerlink" title="1.阶乘、四则运算计算器"></a>1.阶乘、四则运算计算器</h3><p>自己的解法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//阶乘</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">jc</span>(<span class="hljs-params"> m </span>)&#123;<br><span class="hljs-keyword">var</span> result = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span>;i &lt;= m ; ++i)&#123;<br>result *= i;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( result );<br>&#125;<br><span class="hljs-title function_">jc</span>(<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//四则运算计算器</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">calc</span>(<span class="hljs-params"> a, b, f</span>)&#123;<br><span class="hljs-keyword">var</span> result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">switch</span>(f)&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>result = a + b;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>result = a - b;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>result = a * b;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>result = a / b;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( result );<br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="2-实现反选全选功能"><a href="#2-实现反选全选功能" class="headerlink" title="2. 实现反选全选功能"></a>2. 实现反选全选功能</h3><p>自己无聊把全选、全不选、反选和联动全选都写出来了</p><p>页面部分</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;allChoose&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;allChoose&quot;</span>&gt;</span>全选<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;noChoose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;全不选&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;otherChoose&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;反选&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;choose&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;choose&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;choose&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;choose&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js部分</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> qx = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;allChoose&#x27;</span>);<br><span class="hljs-keyword">var</span> cbs = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;choose&#x27;</span>);<br><span class="hljs-keyword">var</span> qbx = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;noChoose&#x27;</span>);<br><span class="hljs-keyword">var</span> fx = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;otherChoose&#x27;</span>);<br><span class="hljs-comment">//全选</span><br>qx.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">checked</span> == <span class="hljs-literal">true</span>) &#123;<span class="hljs-comment">//用了一下this，比较方便</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;cbs.<span class="hljs-property">length</span>;i++) &#123;<br>cbs[i].<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;cbs.<span class="hljs-property">length</span>;i++) &#123;<br>cbs[i].<span class="hljs-property">checked</span> = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//全不选</span><br>qbx.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cbs.<span class="hljs-property">length</span>; ++i)&#123;<br>cbs[i].<span class="hljs-property">checked</span> = <span class="hljs-literal">false</span>;<br>&#125;<br>qx.<span class="hljs-property">checked</span> = <span class="hljs-literal">false</span>;<br>&#125;<br><span class="hljs-comment">//反选</span><br>fx.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cbs.<span class="hljs-property">length</span>;++i)&#123;<br><span class="hljs-keyword">if</span>(!cbs[i].<span class="hljs-property">checked</span>)&#123;<br>cbs[i].<span class="hljs-property">checked</span> = <span class="hljs-number">1</span>;<br>n++<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>cbs[i].<span class="hljs-property">checked</span> = <span class="hljs-number">0</span>;<br>qx.<span class="hljs-property">checked</span> = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(n == cbs.<span class="hljs-property">length</span>)&#123;<br>qx.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//联动全选</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;cbs.<span class="hljs-property">length</span>;i++) &#123;<br>cbs[i].<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)<br>&#123;<br><span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>;           <br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; cbs.<span class="hljs-property">length</span>; ++i) &#123;<br><span class="hljs-keyword">if</span> (cbs[i].<span class="hljs-property">checked</span> == <span class="hljs-literal">true</span>) &#123;<br>n++;<br>&#125;<br>&#125;               <br><span class="hljs-keyword">if</span> (n == cbs.<span class="hljs-property">length</span>) &#123;<br>qx.<span class="hljs-property">checked</span> = <span class="hljs-literal">true</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><br>qx.<span class="hljs-property">checked</span> = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>逻辑其实很简单，即全选时让<code>checkbox</code>的<code>checked</code>属性为真，全不选的时候为假，注意如果使用<code>checkbox</code>制作全选，那只要不是全选，它的状态都是假，只要所有<code>checkbox</code>的<code>checked</code>属性为真，那它就是真，联动全选就是判断一下你勾选的<code>checkbox</code>数量和获取时候的集合长度是否一致，一致则勾选全选，反之不勾选。</p><hr><h3 id="3-猜数字小游戏"><a href="#3-猜数字小游戏" class="headerlink" title="3. 猜数字小游戏"></a>3. 猜数字小游戏</h3><p>毕竟立志摸鱼，所以就直接使用<code>prompt()</code>内置函数写了一个，看看周围都是用<code>input</code>写的额，我好像是有点……emmmm</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">var</span> a=<span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">99</span>+<span class="hljs-number">1</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-keyword">var</span> b;<br>outer : <span class="hljs-keyword">for</span>( i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; ++i)&#123;<br>b=<span class="hljs-title class_">Number</span>(<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请输入一个数字&quot;</span>));<br><span class="hljs-comment">//点击确定返回输出值，点击取消返回null值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">prompt</span>() ); <br><span class="hljs-keyword">if</span>(b == <span class="hljs-string">&#x27;&#x27;</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;输入不能为空&#x27;</span>);<br>b=<span class="hljs-title class_">Number</span>(<span class="hljs-title function_">prompt</span>(<span class="hljs-string">&quot;请重新输入一个数字&quot;</span>));<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b &gt; a)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;猜大了,猜了：&quot;</span>+ i +<span class="hljs-string">&quot;次&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b &lt; a)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;猜小了,猜了：&quot;</span>+ i +<span class="hljs-string">&quot;次&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(b == a)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;恭喜猜中了,你一共猜了&quot;</span>+ i +<span class="hljs-string">&quot;次,中奖数字为：&quot;</span>+ a);<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">10</span>)&#123;<br><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请重新开始游戏！&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意的是，经过<code>console.log()</code>证明这里的<code>prompt()</code>的确定取消按钮的返回值均为输入框的内容。</p><h3 id="4-切换列表项-往返-列表随机背景颜色"><a href="#4-切换列表项-往返-列表随机背景颜色" class="headerlink" title="4. 切换列表项(往返) + 列表随机背景颜色"></a>4. 切换列表项(往返) + 列表随机背景颜色</h3><p>这里暂时提供自己的写法，我的想法是当<code>count == lis.length - 1</code>即切换到最后一个<code>li</code> 的时候，设置一个<code>flag</code>，并将它置一个新状态代表向上，并让<code>count--</code>，当向上状态下<code>count == 0</code>的时候再将<code>flag</code>置原状态即向下切换，实现的时候有些麻烦，还在寻求简便操作，至于随机颜色就很简单了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> btn = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;button&#x27;</span>)[<span class="hljs-number">0</span>];<br><span class="hljs-keyword">var</span> lis = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(<span class="hljs-string">&#x27;li&#x27;</span>);<br><span class="hljs-keyword">var</span> count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">var</span> flag = <span class="hljs-number">1</span>;<br>btn.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;i &lt; lis.<span class="hljs-property">length</span>;++i)&#123;<br>lis[i].<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br><br>&#125;<br>lis[count].<span class="hljs-property">style</span>.<span class="hljs-property">background</span> = <span class="hljs-string">&#x27;rgb(&#x27;</span>+ <span class="hljs-title function_">getRandom</span>() +<span class="hljs-string">&#x27;,&#x27;</span>+ <span class="hljs-title function_">getRandom</span>() + <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-title function_">getRandom</span>() + <span class="hljs-string">&#x27;)&#x27;</span>;<br><span class="hljs-keyword">if</span>(count &lt; lis.<span class="hljs-property">length</span> - <span class="hljs-number">1</span> &amp;&amp; flag == <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//向下切换li</span><br>count++;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(count == lis.<span class="hljs-property">length</span> -<span class="hljs-number">1</span> &amp;&amp; flag == <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//切换到最后一个li，更改切换方向</span><br>flag = <span class="hljs-number">0</span>;<br>count--;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span> &amp;&amp; count &lt; lis.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//方向是向上的时候</span><br>flag = <span class="hljs-number">0</span>;<br>count--; <br><span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>)&#123;<span class="hljs-comment">//如果到了第一个li，变更flag的状态</span><br>flag = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-comment">//随机颜色</span><br><span class="hljs-keyword">var</span> getRandom = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> a = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()*<span class="hljs-number">255</span>);<br><span class="hljs-keyword">return</span> a;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><h3 id="5-微信聊天"><a href="#5-微信聊天" class="headerlink" title="5. 微信聊天"></a>5. 微信聊天</h3><p>就是实现一个聊天框<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1565255508820&di=f075d7b5c32f4948e388d106509d89d4&imgtype=jpg&src=http://img3.imgtn.bdimg.com/it/u=1344723893,43652449&fm=214&gp=0.jpg"><br>头像可以点击，切换用户<br>难点不是很多，给每个用户即每个头像一个类，用以区分聊天者，图片用一个数组存起来，当<code>onclick</code>事件发生的时候，切换数组元素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs css">*&#123;<span class="hljs-attribute">margin</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">padding</span>:<span class="hljs-number">0</span>&#125;<br><span class="hljs-selector-tag">li</span>&#123;<span class="hljs-attribute">list-style</span>: none;&#125;<br><span class="hljs-selector-class">.container</span>&#123; <br><span class="hljs-attribute">width</span>:<span class="hljs-number">256px</span>; <br><span class="hljs-attribute">height</span>:<span class="hljs-number">540px</span>; <br><span class="hljs-attribute">margin</span>:<span class="hljs-number">20px</span> auto <span class="hljs-number">0</span>; <br><span class="hljs-attribute">background-image</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">&#x27;../../iPhone.png&#x27;</span>);<br><span class="hljs-attribute">background-size</span>: cover; <br><span class="hljs-attribute">position</span>:relative;<br>&#125;<br><span class="hljs-selector-id">#name</span>&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">24px</span>; <br><span class="hljs-attribute">height</span>:<span class="hljs-number">28px</span>;<br><span class="hljs-attribute">border</span>:<span class="hljs-number">1px</span> solid darkgrey; <br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">8px</span>; <br><span class="hljs-attribute">padding</span>:<span class="hljs-number">1px</span>; <br><span class="hljs-attribute">cursor</span>:pointer;<br><span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">bottom</span>:<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-selector-class">.main</span>&#123;<br><span class="hljs-attribute">bottom</span>:<span class="hljs-number">81px</span>; <br><span class="hljs-attribute">left</span>:<span class="hljs-number">22px</span>; <br><span class="hljs-attribute">border-top</span>:<span class="hljs-number">1px</span> solid darkgrey; <br><span class="hljs-attribute">position</span>:absolute;<br><span class="hljs-attribute">padding</span>:<span class="hljs-number">6px</span> <span class="hljs-number">4px</span> <span class="hljs-number">4px</span> <span class="hljs-number">7px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">206px</span>;<br>&#125;<br><span class="hljs-selector-id">#import</span>&#123;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>; <br><span class="hljs-attribute">height</span>:<span class="hljs-number">18px</span>; <br><span class="hljs-attribute">line-height</span>:<span class="hljs-number">18px</span>; <br><span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#b8b8b8</span>; <br><span class="hljs-attribute">outline</span>:<span class="hljs-number">0</span>;<br><span class="hljs-attribute">padding</span>:<span class="hljs-number">5px</span> <span class="hljs-number">0</span>; <br><span class="hljs-attribute">bottom</span>:<span class="hljs-number">5px</span>; <br><span class="hljs-attribute">position</span>:relative; <br><span class="hljs-attribute">bottom</span>:-<span class="hljs-number">2px</span>;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">30px</span>;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">128px</span>;<br>&#125;<br><span class="hljs-selector-id">#enter</span>&#123;<br><span class="hljs-attribute">font</span>: <span class="hljs-number">18px</span> <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>;<br><span class="hljs-attribute">bottom</span>: -<span class="hljs-number">5px</span>;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">29px</span>;  <br><span class="hljs-attribute">position</span>: relative; <br><span class="hljs-attribute">cursor</span>:pointer;<br><span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span>&#123;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">206px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">336px</span>;<br><span class="hljs-attribute">top</span>: <span class="hljs-number">84px</span>; <br><span class="hljs-attribute">position</span>: relative;<br><span class="hljs-attribute">overflow</span>: auto;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">28px</span>;<br>&#125;<br><span class="hljs-selector-class">.content</span> <span class="hljs-selector-tag">li</span>&#123; <br><span class="hljs-attribute">line-height</span>:<span class="hljs-number">28px</span>;<br><span class="hljs-attribute">margin-bottom</span>: <span class="hljs-number">15px</span>;<br><span class="hljs-attribute">overflow</span>: hidden;<br><span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-id">#inHtml</span> <span class="hljs-selector-tag">img</span>&#123;<br><span class="hljs-attribute">width</span>:<span class="hljs-number">25px</span>; <br><span class="hljs-attribute">height</span>:<span class="hljs-number">25px</span>;<br><span class="hljs-attribute">position</span>: relative;<br>&#125;<br><span class="hljs-selector-class">.th</span>&#123;<br><span class="hljs-attribute">text-align</span>: right;<br>&#125;<br><span class="hljs-selector-class">.th</span> <span class="hljs-selector-tag">img</span>&#123;<br><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>; <br><span class="hljs-attribute">margin-left</span>:<span class="hljs-number">15px</span>;<br>&#125;<br><span class="hljs-selector-class">.ds</span> <span class="hljs-selector-tag">img</span>&#123;    <br><span class="hljs-attribute">width</span>: <span class="hljs-number">25px</span>;<br><span class="hljs-attribute">height</span>: <span class="hljs-number">25px</span>;<br><span class="hljs-attribute">position</span>: relative;<br><span class="hljs-attribute">float</span>: left;<br><span class="hljs-attribute">margin-right</span>: <span class="hljs-number">15px</span>;<br>&#125;<br><span class="hljs-selector-class">.th</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">background</span>: forestgreen; <br><span class="hljs-attribute">text-align</span>: left;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">5px</span>;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">color</span>: white; <br><span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:right</span>;<br><span class="hljs-attribute">max-width</span>: <span class="hljs-number">182px</span>;<br><span class="hljs-attribute">font</span>:<span class="hljs-number">14px</span> <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>; <br>&#125;<br><span class="hljs-selector-class">.ds</span> <span class="hljs-selector-tag">p</span>&#123;<br><span class="hljs-attribute">background</span>: dimgrey;<br><span class="hljs-attribute">float</span>: left;<br><span class="hljs-attribute">text-align</span>: left;<br><span class="hljs-attribute">padding</span>: <span class="hljs-number">3px</span> <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">border-radius</span>: <span class="hljs-number">4px</span>;<br><span class="hljs-attribute">color</span>: white;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">32px</span>;<br><span class="hljs-attribute">max-width</span>: <span class="hljs-number">190px</span>; <br><span class="hljs-attribute">font</span>:<span class="hljs-number">14px</span> <span class="hljs-string">&#x27;Microsoft YaHei&#x27;</span>;<br>&#125;<br><span class="hljs-selector-class">.ds</span>&#123; <br><span class="hljs-attribute">text-align</span>: left;<br>&#125;<br><span class="hljs-selector-class">.sent1</span>&#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">border</span>:solid <span class="hljs-number">8px</span>; <span class="hljs-attribute">border-color</span>: white white white forestgreen; <span class="hljs-attribute">position</span>: absolute;<span class="hljs-attribute">right</span>: <span class="hljs-number">24px</span>;<span class="hljs-attribute">top</span>: <span class="hljs-number">4px</span>;&#125;<br><span class="hljs-selector-class">.sent2</span>&#123;<span class="hljs-attribute">width</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">height</span>:<span class="hljs-number">0</span>; <span class="hljs-attribute">border</span>:solid <span class="hljs-number">8px</span>; <span class="hljs-attribute">border-color</span>: white dimgrey white white ; <span class="hljs-attribute">position</span>: absolute;<span class="hljs-attribute">left</span>: <span class="hljs-number">24px</span>;<span class="hljs-attribute">top</span>: <span class="hljs-number">4px</span>;&#125;<br></code></pre></td></tr></table></figure><p>聊天框的三角可以用边框实现，具体不说了，百度一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;inHtml&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;name&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../../qq1.gif&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;import&#x27;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;enter&quot;</span>&gt;</span>发送<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不设置<code>li</code>，通过js动态生成<code>li</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//给两个图片定义为一个数组</span><br><span class="hljs-keyword">var</span> arr = [<span class="hljs-string">&#x27;../../qq1.gif&#x27;</span>,<span class="hljs-string">&#x27;../../qq2.gif&#x27;</span>];<br><span class="hljs-comment">//得到名称的图标</span><br><span class="hljs-keyword">var</span> oName = $(<span class="hljs-string">&#x27;name&#x27;</span>);<br><span class="hljs-comment">//得到输入内容</span><br><span class="hljs-keyword">var</span> oGet = $(<span class="hljs-string">&#x27;import&#x27;</span>);<br><span class="hljs-comment">//显示输入内容</span><br><span class="hljs-keyword">var</span> oWrite = $(<span class="hljs-string">&#x27;inHtml&#x27;</span>);<br><span class="hljs-comment">//默认显示土豪</span><br><span class="hljs-keyword">var</span> onOff = <span class="hljs-literal">true</span>;<br>oName.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">if</span>(onOff)&#123;<br>oName.<span class="hljs-property">src</span> = arr[<span class="hljs-number">1</span>];<br>onOff = <span class="hljs-literal">false</span>;<br>oGet.<span class="hljs-title function_">focus</span>();<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>oName.<span class="hljs-property">src</span> = arr[<span class="hljs-number">0</span>];<br>onOff = <span class="hljs-literal">true</span>;<br>oGet.<span class="hljs-title function_">focus</span>();<br>&#125;<br>&#125;<br><span class="hljs-comment">//发送事件</span><br><span class="hljs-keyword">var</span> oSet = $(<span class="hljs-string">&#x27;enter&#x27;</span>);<br>oSet.<span class="hljs-property">onclick</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">if</span>(onOff)&#123;<br>oWrite.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;&lt;li class=&quot;th&quot;&gt;&#x27;</span> + <span class="hljs-string">&#x27;&lt;img src=&#x27;</span>+arr[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot; /&gt;&lt;p&gt;&quot;</span> + oGet.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;&lt;span class=&quot;sent1&quot;&gt;&lt;/span&gt;&#x27;</span> +<span class="hljs-string">&quot;&lt;/p&gt;&lt;/li&gt;&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span>&#123;<br>oWrite.<span class="hljs-property">innerHTML</span> += <span class="hljs-string">&#x27;&lt;li class=&quot;ds&quot;&gt;&#x27;</span> + <span class="hljs-string">&#x27;&lt;img src=&#x27;</span>+arr[<span class="hljs-number">1</span>] + <span class="hljs-string">&quot; /&gt;&lt;p&gt;&quot;</span> + oGet.<span class="hljs-property">value</span> + <span class="hljs-string">&#x27;&lt;span class=&quot;sent2&quot;&gt;&lt;/span&gt;&#x27;</span> + <span class="hljs-string">&quot;&lt;/p&gt;&lt;/li&gt;&quot;</span>;<br>&#125;<br>oGet.<span class="hljs-property">value</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>oGet.<span class="hljs-title function_">focus</span>();<br>&#125;<br><br><br><span class="hljs-comment">//调用ID通配符</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">$</span>(<span class="hljs-params">id</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);<br>&#125;<br><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JS函数</title>
    <link href="/2019/08/07/2019-08-07-JS%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2019/08/07/2019-08-07-JS%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="JS函数的定义"><a href="#JS函数的定义" class="headerlink" title="JS函数的定义"></a>JS函数的定义</h2><h3 id="函数的定义："><a href="#函数的定义：" class="headerlink" title="函数的定义："></a>函数的定义：</h3><p>函数是计算机编程中非常重要的一个语法结构。那么什么是函数呢？函数指一组可以随时随地运行的代码集合，当他被调用时可重复的去执行这些代码集合。<br>类比数学中的函数：<br>数学中的函数指给定一个数集A,对A施加对应法则f,记作f（A）,得到另一数集B,也就是B=f（A）.那么这个关系式就叫函数关系式,简称函数。</p><hr><h2 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>JS中创建函数有三种方式：</p><ol><li>函数声明</li><li>函数表达式</li><li>函数对象</li></ol><h4 id="1-函数声明"><a href="#1-函数声明" class="headerlink" title="1.函数声明"></a>1.函数声明</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<span class="hljs-comment">//调用函数</span><br></code></pre></td></tr></table></figure><h4 id="2-函数表达式"><a href="#2-函数表达式" class="headerlink" title="2.函数表达式"></a>2.函数表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br>&#125;<br><br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><h4 id="3-函数对象（了解）"><a href="#3-函数对象（了解）" class="headerlink" title="3.函数对象（了解）"></a>3.函数对象（了解）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>();<br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><h3 id="关于函数声明及解析"><a href="#关于函数声明及解析" class="headerlink" title="关于函数声明及解析"></a>关于函数声明及解析</h3><h4 id="1-函数声明会预解析（仅在当前所在的script块内）"><a href="#1-函数声明会预解析（仅在当前所在的script块内）" class="headerlink" title="1.函数声明会预解析（仅在当前所在的script块内）"></a>1.函数声明会预解析（仅在当前所在的script块内）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">foo</span>();<span class="hljs-comment">//控制台打印123</span><br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-函数表达式不具备预解析功能"><a href="#2-函数表达式不具备预解析功能" class="headerlink" title="2.函数表达式不具备预解析功能"></a>2.函数表达式不具备预解析功能</h4><h4 id="3-变量解析要高于函数的预解析"><a href="#3-变量解析要高于函数的预解析" class="headerlink" title="3.变量解析要高于函数的预解析"></a>3.变量解析要高于函数的预解析</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a );<span class="hljs-comment">//控制台打印 f a ( )&#123; &#125;</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">a</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;<br><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;   <span class="hljs-comment">// 变量预解析要高于函数的预解析</span><br></code></pre></td></tr></table></figure><h4 id="4-函数表达式可直接调用执行"><a href="#4-函数表达式可直接调用执行" class="headerlink" title="4.函数表达式可直接调用执行"></a>4.函数表达式可直接调用执行</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;  <span class="hljs-comment">//函数表达式可直接调用执行</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">456</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">789</span>);<br>&#125;();<br></code></pre></td></tr></table></figure><p>但函数声明是不能直接调用的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;   <span class="hljs-comment">//函数声明是不能直接调用的</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">456</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">789</span>);<br>&#125;();<br></code></pre></td></tr></table></figure><h3 id="关于函数变量的区域性"><a href="#关于函数变量的区域性" class="headerlink" title="关于函数变量的区域性"></a>关于函数变量的区域性</h3><p>程序寻找参数的时候只能够寻找和它同级或外层的变量，无法向内层找变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( b ); <br>&#125;<br><span class="hljs-title function_">foo</span>();<br><span class="hljs-title function_">baz</span>();<span class="hljs-comment">// =&gt;报错，找不到b </span><br><br><span class="hljs-keyword">var</span> b;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> b = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">baz</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( b ); <br>&#125;<br><span class="hljs-title function_">foo</span>();<span class="hljs-comment">// =&gt;b重新赋值 b = 20;</span><br><span class="hljs-title function_">baz</span>();<span class="hljs-comment">// =&gt;打印 20</span><br></code></pre></td></tr></table></figure><hr><h2 id="变量提升问题"><a href="#变量提升问题" class="headerlink" title="变量提升问题"></a>变量提升问题</h2><p>先甩一道经典变量提升题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// ??</span><br>    <span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>;<br>&#125;<br><span class="hljs-title function_">foo</span>();<br></code></pre></td></tr></table></figure><p>问控制台打印的结果是多少？</p><p>思考</p><p>答案   ：   <code>undefined</code><br>使用<code>var</code>关键字声明的变量在JavaScript中会被提升，并在内存中分配<code>undefined</code>，但初始化却发生在你给变量赋值的地方，另外<code>var</code>声明的变量是<code>函数作用域的</code>，所以上述代码块解析可以看做以下过程</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">10</span>; <span class="hljs-comment">// 全局使用域</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-comment">// var a 的声明将被提升到到函数的顶部。</span><br><span class="hljs-comment">// 比如:var a</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// 打印 undefined</span><br><br><span class="hljs-comment">// 实际初始化值20只发生在这里</span><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-number">20</span>; <span class="hljs-comment">// local scope</span><br>&#125;<br></code></pre></td></tr></table></figure><p>上边的代码块理解了下边的代码块理解起来就很方便了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">18</span>;<br><span class="hljs-title function_">f1</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">var</span> b=<span class="hljs-number">9</span>;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>   <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>答案 ： <code>undefined</code>        ,    <code>9</code><br>解析过程直接以代码形式呈现，看起来比较容易理解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//第一步：预解析</span><br><span class="hljs-keyword">var</span> a;<br><span class="hljs-comment">//第三步：当执行函数时，再次进行预解析(局部作用域)</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">f1</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-keyword">var</span> b;<br><span class="hljs-keyword">var</span> a;<br><span class="hljs-comment">//第四步：一行一行执行代码</span><br>b=<span class="hljs-number">9</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b);<br>a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>&#125;<br><span class="hljs-comment">//第二步：一行一行执行代码</span><br>a = <span class="hljs-number">18</span>;<br><span class="hljs-title function_">f1</span>();<br></code></pre></td></tr></table></figure><hr><h2 id="JS函数参数"><a href="#JS函数参数" class="headerlink" title="JS函数参数"></a>JS函数参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">n</span>)&#123;  <span class="hljs-comment">//形式参数：形参   var n = 123</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n);<br>&#125;<br><br><span class="hljs-title function_">foo</span>(<span class="hljs-number">123</span>);  <span class="hljs-comment">//实际参数：实参 */</span><br></code></pre></td></tr></table></figure><p>实参的个数和形参的个数不一定要一样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params">n1,n2,n3</span>)&#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(n3);<br>&#125;<br><br><span class="hljs-title function_">foo</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>);<br></code></pre></td></tr></table></figure><p><code>arguments</code>对象：表示实参的集合  </p><p><code>arguments.length</code>  : 获取集合长度  </p><p>通过    <code>[]</code>    获取集合数组的下标</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">arguments</span>[<span class="hljs-number">0</span>]); <br><span class="hljs-keyword">var</span> result = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-variable language_">arguments</span>.<span class="hljs-property">length</span>;i++)&#123;<br> result += <span class="hljs-variable language_">arguments</span>[i];    <br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( result );<br>&#125;<br><br><span class="hljs-title function_">foo</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><h2 id="关于JS中函数的参数"><a href="#关于JS中函数的参数" class="headerlink" title="关于JS中函数的参数"></a>关于JS中函数的参数</h2><p><a href="https://www.cnblogs.com/lcq1467/p/7101519.html">得益于此文的启发</a>  </p><p>函数的参数属于函数的内部变量，外部无法访问到，即使和外部变量同名，它们也是两个不同的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a</span>)&#123;<br>a++;　　　　　　<span class="hljs-comment">//a(形参)是局部变量</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">test</span>(a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//结果是 101 100;</span><br></code></pre></td></tr></table></figure><p>类似于：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"> </span>)&#123;<br><span class="hljs-keyword">var</span> a=<span class="hljs-number">100</span>;   <span class="hljs-comment">//a是局部变量</span><br>a++;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">test</span>( );<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">//结果 101 100;</span><br></code></pre></td></tr></table></figure><p>当函数没有定义参数或者内部没有<code>var</code>变量，内部的变量默认为全局变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a =<span class="hljs-number">100</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span> ()&#123;<br>a++;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<br>&#125;<br><span class="hljs-title function_">test</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a);<span class="hljs-comment">//控制台打印 101101，因为a是全局变量</span><br></code></pre></td></tr></table></figure><p>当函数定义了参数，但没有传实参的时候，形参默认为undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a</span>)&#123;<br>a++;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a );<br>&#125;<br><span class="hljs-title function_">test</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a );<span class="hljs-comment">//第一个返回undefined第二个返回100</span><br></code></pre></td></tr></table></figure><p>但是如果通过对象传递参数，函数内部对象属性值发生改变，外部被传递对象的属性值也会改变</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> a = &#123;x : <span class="hljs-number">100</span>&#125;;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">a</span>)&#123;<br>a.<span class="hljs-property">x</span>++;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a.<span class="hljs-property">x</span> );<br>&#125;<br><span class="hljs-title function_">test</span>(a);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( a.<span class="hljs-property">x</span> );<span class="hljs-comment">//第一个返回101，第二个返回101</span><br></code></pre></td></tr></table></figure><p><strong>总结：</strong><br><code>通过值传递参数</code>：    在函数中调用的参数是函数参数（属于局部变量范畴），如果函数修改参数值，将不会改变外部被引用的实参值<br><code>通过对象传递参数</code>：对象属性的变量是相当于指针，因此函数修改对象的属性值时，外部的对象属性也会改变。<br>这也涉及到基本类型和引用类型的值，基本数据类型（undefined、null、boolean、Number）是按值访问的，所以局部变量与全局变量即使名字一样，也是两个不同的变量<br><code>总而言之</code><br>1.函数参数是被当做变量对待的<br>2.参数是按值传递的<br>3.传递参数的时候要确定传递的数据类型</p><p>对象属于引用类型，当变量是一个对象时，将这个变量赋给另一个变量时，相当于另一个变量也变为了指针；两个变量都指向同一对象；所以在引用数据类型照片中，变量相当于一个指针^[注：JavaScript高级程序设计第四章 变量、作用域和内存 有详细介绍]</p><hr><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><p>返回值<code>return</code> ： 表示函数执行完的返回值，当函数没有写<code>return</code>的时候，函数调用完就会变成<code>undefined</code>然后<code>return</code>;<br><strong><code>return</code> 类似于跳出操作，所以return后的代码是不执行的</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">foo</span>(<span class="hljs-params"></span>)&#123;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">123</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">456</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">789</span>);<span class="hljs-comment">//return后面的代码不执行</span><br>&#125;   <br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title function_">foo</span>() );<span class="hljs-comment">// 控制台打印 123 456</span><br><br></code></pre></td></tr></table></figure><hr><p><strong>函数作用域和作用域链会单写一篇</strong></p><hr><h2 id="函数与事件"><a href="#函数与事件" class="headerlink" title="函数与事件"></a>函数与事件</h2><h3 id="JS事件"><a href="#JS事件" class="headerlink" title="JS事件"></a>JS事件</h3><p>鼠标、键盘触发的一些功能（一些功能就是自己定义的函数，跟事件关联的函数叫做事件函数）</p><h3 id="事件函数"><a href="#事件函数" class="headerlink" title="事件函数"></a>事件函数</h3><p><code>onclick</code> : 点击（不只是鼠标，键盘也可以）<br><code>ondbclick</code> : 双击<br><code>onmousedown</code> ：鼠标按下<br><code>onmouseup</code>：鼠标抬起<br><code>onmouseover</code>：鼠标移入<br><code>onmouseout</code>：鼠标移出<br><code>onmousemove</code>：鼠标移动（连续触发）  </p><hr><h2 id="代码简化"><a href="#代码简化" class="headerlink" title="代码简化"></a>代码简化</h2><p>举个栗子，以前我们获取元素的时候，需要下边这么多的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> elem1 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;elem1&#x27;</span>);<br><span class="hljs-keyword">var</span> elem2 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;elem2&#x27;</span>);<br><span class="hljs-keyword">var</span> elem3 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;elem3&#x27;</span>);<br><span class="hljs-keyword">var</span> elem4 = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;elem4&#x27;</span>);<br></code></pre></td></tr></table></figure><p>而如果我们把它封装到一个函数里，每次取元素的时候调用，不是方便多了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> elem1 = $(<span class="hljs-string">&#x27;elem1&#x27;</span>);<br><span class="hljs-keyword">var</span> elem2 = $(<span class="hljs-string">&#x27;elem2&#x27;</span>);<br><span class="hljs-keyword">var</span> elem3 = $(<span class="hljs-string">&#x27;elem3&#x27;</span>);<br><span class="hljs-keyword">var</span> elem4 = $(<span class="hljs-string">&#x27;elem4&#x27;</span>);<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">$</span>(<span class="hljs-params">id</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="常用内置函数"><a href="#常用内置函数" class="headerlink" title="常用内置函数"></a>常用内置函数</h2><h3 id="alert"><a href="#alert" class="headerlink" title="alert()"></a>alert()</h3><p>提示框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure><p><img src="/images/alert.png" alt="alert"></p><h3 id="confirm"><a href="#confirm" class="headerlink" title="confirm()"></a>confirm()</h3><p>确定对话框</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;你好&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="/images/confirm.png" alt="confirm"></p><h3 id="prompt"><a href="#prompt" class="headerlink" title="prompt();"></a>prompt();</h3><p>输入对话框，返回值就是输入的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> result = <span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;我叫什么&#x27;</span> , <span class="hljs-string">&#x27;请输入名字&#x27;</span>);<br><span class="hljs-keyword">if</span>(result == <span class="hljs-string">&#x27;xiaoming&#x27;</span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;添加好友&#x27;</span>);<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;拒绝添加&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/prompt.png" alt="enter description here"></p><h3 id="转换数字"><a href="#转换数字" class="headerlink" title="转换数字"></a>转换数字</h3><p>这里简述两种方法<code>parseInt()</code>，<code>parseFloat()</code></p><h4 id="parseInt"><a href="#parseInt" class="headerlink" title="parseInt()"></a>parseInt()</h4><p>将字符串转换成整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;123px&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-built_in">parseInt</span>(str) );<span class="hljs-comment">//控制台打印  123</span><br></code></pre></td></tr></table></figure><p><code>parseInt()</code>会从左至右挨个转换直到不能转换为止</p><h4 id="parseFloat"><a href="#parseFloat" class="headerlink" title="parseFloat()"></a>parseFloat()</h4><p>将字符串转换成浮点数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> str = <span class="hljs-string">&#x27;123.45&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-built_in">parseFloat</span>(str) );<br></code></pre></td></tr></table></figure><h3 id="isNaN"><a href="#isNaN" class="headerlink" title="isNaN()"></a>isNaN()</h3><p>判断是否是NaN，是返回<code>true</code>，不是返回<code>false</code><br>但是因为JS历史原因……还是有BUG的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) );<span class="hljs-comment">//控制台打印 true </span><br></code></pre></td></tr></table></figure><p>很显然 hello 类型是字符串，不是NaN，但是为什么会返回true呢<br>看一眼    w3cschool对isNaN返回值的定义：  </p><blockquote><p>如果 x 是特殊的非数字值 NaN（或者能被转换为这样的值），返回的值就是 true。如果 x 是其他值,则返回 false。</p></blockquote><p>也就是说程序内部会首先把hello转换成Number类型，自然就变成了NaN，然后再进行isNaN的判定。<br>ES6提供了一种更为严谨的判断是否是NaN的方法：<code>Number.isNaN()</code></p><p>现在用这个新方法来判断一下hello是不是NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(<span class="hljs-string">&#x27;hello&#x27;</span>) );<span class="hljs-comment">//输出false</span><br></code></pre></td></tr></table></figure><h3 id="isFinite"><a href="#isFinite" class="headerlink" title="isFinite()"></a>isFinite()</h3><p>判断是否是无限数字，如果是有限数字返回<code>true</code>，如果不是则返回<code>false</code></p><p>Infinity：无限大</p><p>-Infinity：无限小</p><hr><h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p><code>Math.min()</code>：取最小值<br><code>Math.max()</code>：取最大值<br><code>Math.cell()</code>：向上取整<br><code>Math.floor()</code>：向下取整<br><code>Math.pow()</code>：平方<br><code>Math.sqrt()</code>：开平方<br><code>Math.abs()</code>：取绝对值<br><code>Math.PI</code>：π值<br><code>Math.random()</code>：随机一个    [0,1)     区间的数<br><code>Math.round()</code>：四舍五入</p><blockquote><p>如果我想要开三次方或者多次方怎么办</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&gt;<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">pow</span>(<span class="hljs-number">8</span>,<span class="hljs-number">1</span>/<span class="hljs-number">3</span>);<span class="hljs-comment">//开8的三次方</span><br></code></pre></td></tr></table></figure><p>举一反三</p></blockquote><h2 id="初探this关键字"><a href="#初探this关键字" class="headerlink" title="初探this关键字"></a>初探this关键字</h2><p>这里只介绍this最简单的指向，即<code>this</code>会指向当前事件所操作的元素</p><hr>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初入JS（三）</title>
    <link href="/2019/08/06/2019-08-06-%E5%88%9D%E5%85%A5js%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <url>/2019/08/06/2019-08-06-%E5%88%9D%E5%85%A5js%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="逻辑运算符扩展"><a href="#逻辑运算符扩展" class="headerlink" title="逻辑运算符扩展"></a>逻辑运算符扩展</h2><p><strong>&amp;&amp; : 如果左边返回真，那么就返回右边的值，如果左边返回假，就返回左边的值  (短路运算)</strong> </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">console</span>.log( <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-number">2</span> );<br><span class="hljs-attribute">console</span>.log( <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">5</span>&gt;<span class="hljs-number">4</span> );   <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span> -&gt; true  公式整体得到 <span class="hljs-number">5</span>&gt;<span class="hljs-number">4</span> -&gt; true<br><span class="hljs-attribute">console</span>.log( <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">5</span>&gt;<span class="hljs-number">4</span> );    <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span> -&gt; false 公式整体得到  <span class="hljs-number">1</span>&gt;<span class="hljs-number">2</span> -&gt; false<br></code></pre></td></tr></table></figure><p><strong>|| : 如果左边返回真，那么就返回左边的值，如果左边返回假，就返回右边的值  (短路运算)</strong> </p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-regexp">//console.log( 0 || 2 );</span><br><span class="hljs-regexp"></span><br><span class="hljs-regexp">//</span>console.log( <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span> || <span class="hljs-number">5</span>&lt;<span class="hljs-number">4</span> );   <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span> -&gt; <span class="hljs-literal">true</span>  公式整体得到    <span class="hljs-number">1</span>&lt;<span class="hljs-number">2</span>  -&gt;  <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>&amp; | 位运算 ，跟正常的&amp;&amp; || 功能类似 ，只不过是针对二进制的</strong></p><h2 id="JS控制流程"><a href="#JS控制流程" class="headerlink" title="JS控制流程"></a>JS控制流程</h2><h3 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h3><p>&emsp;&emsp;顺序结构就是程序从上到下、从左到右一句一句的去执行，没啥好说的。  </p><h3 id="选择结构"><a href="#选择结构" class="headerlink" title="选择结构"></a>选择结构</h3><h4 id="emsp-1-if判断"><a href="#emsp-1-if判断" class="headerlink" title="&emsp; 1.if判断"></a>&emsp; 1.if判断</h4><ol><li>单向选择 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arcade">   <span class="hljs-keyword">if</span>( <span class="hljs-number">5</span> &gt; <span class="hljs-number">3</span> )&#123;    <span class="hljs-comment">// 单向选择</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;if执行&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure></li><li>双向选择 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">if</span>( <span class="hljs-number">5</span> &lt; <span class="hljs-number">3</span> )&#123;    <span class="hljs-comment">//双向选择</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;if执行&#x27;</span>);<br>  &#125;   <br>  <span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;else执行&#x27;</span>);<br>  &#125;<br></code></pre></td></tr></table></figure></li><li>多向选择 <figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">day</span> = <span class="hljs-string">&#x27;星期日&#x27;</span>;<br><br>  <span class="hljs-keyword">if</span>( <span class="hljs-built_in">day</span> == <span class="hljs-string">&#x27;星期一&#x27;</span> )&#123;     <span class="hljs-comment">//多向选择</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;上课&#x27;</span>);<br>  &#125;   <br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( <span class="hljs-built_in">day</span> == <span class="hljs-string">&#x27;星期四&#x27;</span>)&#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;上自习&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>( <span class="hljs-built_in">day</span> == <span class="hljs-string">&#x27;星期日&#x27;</span>)&#123;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;休息&#x27;</span>);<br>  &#125;<br>  <span class="hljs-keyword">else</span>&#123;<br><br>  &#125;<br></code></pre></td></tr></table></figure><h5 id="if判断中的真假值"><a href="#if判断中的真假值" class="headerlink" title="if判断中的真假值"></a><strong>if判断中的真假值</strong></h5>false、0、‘’、undefined、null、NaN 六个值在if判断中为假值，其余未声明的均为真值  <figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-regexp">//</span>真假值(<span class="hljs-literal">false</span> <span class="hljs-number">0</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-literal">undefined</span> <span class="hljs-literal">null</span> <span class="hljs-literal">NaN</span>)<br><span class="hljs-regexp">//</span>一个值也可以做判断，<span class="hljs-literal">false</span> <span class="hljs-number">0</span> <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-literal">undefined</span> <span class="hljs-literal">null</span> <span class="hljs-literal">NaN</span> 这<span class="hljs-number">6</span>个值返回假，其他值都返回真<br>   <span class="hljs-keyword">if</span>( [] == <span class="hljs-literal">true</span> )&#123;   [] -&gt; <span class="hljs-number">0</span>    <span class="hljs-literal">true</span> -&gt; <span class="hljs-number">1</span>   <span class="hljs-number">0</span> == <span class="hljs-number">1</span>  <span class="hljs-literal">false</span><br>       console.log(<span class="hljs-string">&#x27;if执行&#x27;</span>);<br>   &#125;<br>   <span class="hljs-keyword">if</span>( [] )&#123;    [] -&gt; 不在<span class="hljs-number">6</span>个假值内  -&gt;  <span class="hljs-literal">true</span><br>       console.log(<span class="hljs-string">&#x27;if执行&#x27;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="emsp-2-switch判断"><a href="#emsp-2-switch判断" class="headerlink" title="&emsp;2.switch判断"></a>&emsp;2.switch判断</h4>语法格式：<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">day</span> = <span class="hljs-string">&#x27;星期日&#x27;</span>;<br><br>   switch( <span class="hljs-built_in">day</span> )&#123;<br>       case <span class="hljs-string">&#x27;星期日&#x27;</span>:<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;执行1&#x27;</span>);<br>           <span class="hljs-keyword">break</span>;<br>       case <span class="hljs-string">&#x27;星期一&#x27;</span>:<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;执行2&#x27;</span>);<br>           <span class="hljs-keyword">break</span>;<br>       default:<br>           <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(<span class="hljs-string">&#x27;执行3&#x27;</span>);<br>   &#125;<br></code></pre></td></tr></table></figure></li></ol><p><strong>注意：switch语句中的判断是严格判断，即运用 <code>===</code>进行判断</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">switch</span><span class="hljs-params">(<span class="hljs-number">1</span>)</span></span>&#123;<br>        case <span class="hljs-string">&#x27;1&#x27;</span>:<br>            cccc  <span class="hljs-comment">//不执行</span><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><p>循环结构的目的就是为了节省重复代码的操作</p><h4 id="emsp-while循环"><a href="#emsp-while循环" class="headerlink" title="&emsp;while循环"></a>&emsp;while循环</h4><p>四个步骤：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 定义变量  <br><span class="hljs-bullet">2.</span> 条件判断(条件不满足的时候，循环结束)  <br><span class="hljs-bullet">3.</span> 3.执行语句  <br><span class="hljs-bullet">4.</span> 4.自增或自减<br></code></pre></td></tr></table></figure><p>代码结构：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> <span class="hljs-built_in">count</span> = <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>( <span class="hljs-built_in">count</span> &lt; <span class="hljs-number">5</span> )&#123;<br><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">123</span> );<br><br><span class="hljs-built_in">count</span>++;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>不要写出死循环，要写循环结束的条件逻辑</strong></p><h4 id="emsp-for循环"><a href="#emsp-for循环" class="headerlink" title="&emsp;for循环"></a>&emsp;for循环</h4><p>四个执行步骤 ( while和for可以互相转换的，等价的 )</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 定义变量   <br><span class="hljs-bullet">2.</span> 条件判断(条件不满足的时候，循环结束)  <br><span class="hljs-bullet">3.</span> 执行语句  <br>4.自增或自减<br></code></pre></td></tr></table></figure><p>代码结构：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(var i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;i&lt;5;i++)&#123;</span><br>       console.log(i)<span class="hljs-comment">;</span><br>   &#125;<br></code></pre></td></tr></table></figure><p>for循环可以进行嵌套</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">for</span>(var i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br><span class="hljs-built_in">for</span>(var j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br>console<span class="hljs-selector-class">.log</span>(i , j);<br>&#125;<br>   &#125;<br></code></pre></td></tr></table></figure><h5 id="emsp-关于for循环的循环跳出"><a href="#emsp-关于for循环的循环跳出" class="headerlink" title="&emsp;关于for循环的循环跳出"></a>&emsp;关于for循环的循环跳出</h5><p>循环跳出可以使用两个语句，break和continue，下面简单讲一下两者的不同。</p><h6 id="emsp-emsp-break语句"><a href="#emsp-emsp-break语句" class="headerlink" title="&emsp;&emsp;break语句"></a>&emsp;&emsp;break语句</h6><p>break语句使用后程序会跳出整个循环</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(var i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;i&lt;5;i++)&#123;</span><br>        console.log(i)<span class="hljs-comment">;</span><br>        if(i <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">2</span>)&#123;<br>            break<span class="hljs-comment">;</span><br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/break%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF.png" alt="i = 2时跳出循环，故只打印 0 1 2 "><br>如果把if和console.log换一下位置</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(var i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;i&lt;5;i++)&#123;</span><br>            if(i <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">2</span>)&#123;<br>                            break<span class="hljs-comment">;</span><br>                        &#125;<br>            console.log(i)<span class="hljs-comment">;</span><br>        &#125;<br></code></pre></td></tr></table></figure><p><img src="/images/break%E8%B7%B3%E5%87%BA%E5%BE%AA%E7%8E%AF_2.png"></p><h6 id="emsp-emsp-continue语句"><a href="#emsp-emsp-continue语句" class="headerlink" title="&emsp;&emsp;continue语句"></a>&emsp;&emsp;continue语句</h6><p>continue语句使用后只会跳出当前循环</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(var i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;i&lt;5;i++)&#123;</span><br>if(i <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">2</span>)&#123;<br>continue<span class="hljs-comment">;</span><br>&#125;<br>console.log(i)<span class="hljs-comment">;</span><br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="/images/continue%E8%B7%B3%E5%87%BA.png" alt="i = 2时跳出当前循环，循环继续，故打印 0 1 3 4"></p><p><strong>注意：嵌套循环的break默认跳出当前的循环，而不会跳出最外层循环</strong></p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">for(var i<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;i&lt;5;i++)&#123;</span><br>for(var j<span class="hljs-operator">=</span><span class="hljs-number">0</span><span class="hljs-comment">;j&lt;3;j++)&#123;</span><br>if( j <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">1</span>)&#123;<br>console.log(j)<span class="hljs-comment">;</span><br>break<span class="hljs-comment">;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/images/break%E8%B7%B3%E5%87%BA%E5%B5%8C%E5%A5%97%E5%BE%AA%E7%8E%AF.png" alt="内层循环跳出，只执行外层循环"><br>那么如果想要退出最外层循环，那应该怎么办呢</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs scss">outer : <span class="hljs-built_in">for</span>(var i=<span class="hljs-number">0</span>;<span class="hljs-selector-tag">i</span>&lt;<span class="hljs-number">5</span>;<span class="hljs-selector-tag">i</span>++)&#123;   <span class="hljs-comment">//跳出到指定的某一层</span><br><span class="hljs-built_in">for</span>(var j=<span class="hljs-number">0</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br><span class="hljs-built_in">if</span>( j == <span class="hljs-number">1</span>)&#123;<br>console<span class="hljs-selector-class">.log</span>(j);<br>break outer;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="emsp-do-while循环"><a href="#emsp-do-while循环" class="headerlink" title="&emsp;do-while循环"></a>&emsp;do-while循环</h4><p>和while不同之处:执行循环之前必定执行一次。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(i);<br>        i++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">5</span>);<br></code></pre></td></tr></table></figure><hr><hr>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM</title>
    <link href="/2019/08/06/2019-08-06-DOM/"/>
    <url>/2019/08/06/2019-08-06-DOM/</url>
    
    <content type="html"><![CDATA[<h1 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h1><ul><li><a href="#dom">DOM</a><ul><li><a href="#%E4%BB%80%E4%B9%88%E6%98%AFdom">什么是DOM</a></li><li><a href="#window%E5%AF%B9%E8%B1%A1%E5%92%8Cdocument%E5%AF%B9%E8%B1%A1">window对象和document对象</a></li><li><a href="#%E8%8E%B7%E5%8F%96html%E5%85%83%E7%B4%A0">获取HTML元素</a><ul><li><a href="#1-getelementbyid">1. getElementById()</a></li><li><a href="#2-getelementsbytagname">2. getElementsByTagName()</a></li><li><a href="#3-getelementsbyclassname">3. getElementsByClassName()</a></li><li><a href="#4-queryselector">4. querySelector()</a></li><li><a href="#5-queryselectorall">5. querySelectorAll()</a></li></ul></li><li><a href="#%E6%93%8D%E4%BD%9Chtml%E5%85%83%E7%B4%A0%E7%9A%84%E5%B1%9E%E6%80%A7">操作HTML元素的属性</a></li><li><a href="#%E6%93%8D%E4%BD%9Chtml%E5%85%83%E7%B4%A0%E7%9A%84style">操作HTML元素的style</a></li><li><a href="#%E4%BF%AE%E6%94%B9dom%E4%B8%AD%E7%9A%84%E5%86%85%E5%AE%B9">修改DOM中的内容</a><ul><li><a href="#innerhtml%E8%8E%B7%E5%8F%96%E5%85%83%E7%B4%A0%E9%87%8C%E7%9A%84%E5%86%85%E5%AE%B9">innerHTML：获取元素里的内容</a></li><li><a href="#innertext">innerText</a></li><li><a href="#documentwrite">document.write</a></li></ul></li></ul></li></ul><h2 id="什么是DOM"><a href="#什么是DOM" class="headerlink" title="什么是DOM"></a>什么是DOM</h2><p>JavaScript分为三个部分，分别为ECMAScript、DOM、BOM。<br>其中    DOM 是 文档对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型。</p><h2 id="window对象和document对象"><a href="#window对象和document对象" class="headerlink" title="window对象和document对象"></a>window对象和document对象</h2><p>window对象是包含document对象的。window对象是JS的最外层对象而document对象是DOM的最外层对象。</p><h2 id="获取HTML元素"><a href="#获取HTML元素" class="headerlink" title="获取HTML元素"></a>获取HTML元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">document</span>.<span class="hljs-property">doctype</span> );   <span class="hljs-comment">//    &lt;!DOCTYPE html&gt;</span><br>   <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">document</span>.<span class="hljs-property">documentElement</span> );    <span class="hljs-comment">//  &lt;html&gt;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">document</span>.<span class="hljs-property">head</span> );     <span class="hljs-comment">// &lt;head&gt;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span> );     <span class="hljs-comment">// &lt;body&gt;</span><br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( <span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> );     <span class="hljs-comment">// &lt;title&gt;中的内容 -&gt; Document</span><br><br><span class="hljs-variable language_">document</span>.<span class="hljs-property">title</span> = <span class="hljs-string">&#x27;nihao&#x27;</span>;     <span class="hljs-comment">// 还可以设置</span><br><br> <span class="hljs-comment">//注：.的含义，就是谁谁谁下的，下一级的意思。</span><br><br></code></pre></td></tr></table></figure><p><strong>注意：document.title获取到的不是title标签而是标签中的内容！</strong>  </p><p><strong>获取HTML元素通常有以下几种方法</strong></p><p><strong>获取元素操作的时候，尽量放在下边，让HTML元素加载完，要不然会获取不到</strong></p><h3 id="1-getElementById"><a href="#1-getElementById" class="headerlink" title="1. getElementById()"></a>1. getElementById()</h3><p>通过id获取元素</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> elem = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;elem&#x27;</span>); <br></code></pre></td></tr></table></figure><h3 id="2-getElementsByTagName"><a href="#2-getElementsByTagName" class="headerlink" title="2. getElementsByTagName()"></a>2. getElementsByTagName()</h3><p><strong>注意Elements有s！且获取到的为一个集合</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&#x27;li&#x27;</span>);<br></code></pre></td></tr></table></figure><h3 id="3-getElementsByClassName"><a href="#3-getElementsByClassName" class="headerlink" title="3. getElementsByClassName()"></a>3. getElementsByClassName()</h3><p><strong>注意Elements有s！且获取到的为一个集合</strong></p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> boxs = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&#x27;box&#x27;</span>);  <br></code></pre></td></tr></table></figure><p><strong>getElementById的前边只可以是document，而getElementsByTagName和getElementsByClassName不一定</strong></p><h3 id="4-querySelector"><a href="#4-querySelector" class="headerlink" title="4. querySelector()"></a>4. querySelector()</h3><p>仿照CSS选择器而诞生的，写法和CSS选择器类似</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> elem = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelector</span>(<span class="hljs-string">&#x27;#elem&#x27;</span>)<br></code></pre></td></tr></table></figure><h3 id="5-querySelectorAll"><a href="#5-querySelectorAll" class="headerlink" title="5. querySelectorAll()"></a>5. querySelectorAll()</h3><p>仿照CSS选择器而诞生的，写法和CSS选择器类似，返回的是一个集合。</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> boxs = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&#x27;.box&#x27;</span>); <br><span class="hljs-keyword">var</span> lis = <span class="hljs-built_in">document</span>.<span class="hljs-built_in">querySelectorAll</span>(<span class="hljs-string">&#x27;ul li&#x27;</span>);  <br></code></pre></td></tr></table></figure><h2 id="操作HTML元素的属性"><a href="#操作HTML元素的属性" class="headerlink" title="操作HTML元素的属性"></a>操作HTML元素的属性</h2><p><strong>注：class关键字被JS中的面向对象中的类所占用了，用className来获取class样式属性，同样的，for被JS中的循环占用了，所以HTML中的for属性需要写成htmlFor</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( elem.id );<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( elem.title );<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( elem.zidingyi );   <span class="hljs-comment">// .的方式获取不到自定义属性</span><br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( elem.className ); <br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( lab.htmlFor );<br></code></pre></td></tr></table></figure><h2 id="操作HTML元素的style"><a href="#操作HTML元素的style" class="headerlink" title="操作HTML元素的style"></a>操作HTML元素的style</h2><p>JS种不能出现短线- , 短线去掉转驼峰写法;</p><p>例如CSS中的<code>font-size:16px</code></p><p>在JS中就应该写成<code>fontSize:16px</code></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> <span class="hljs-built_in">elem</span> = document.getElementById(&#x27;<span class="hljs-built_in">elem</span>&#x27;);     <br><span class="hljs-built_in">elem</span>.<span class="hljs-built_in">style</span>.<span class="hljs-built_in">background</span> = &#x27;red&#x27;;<br><span class="hljs-built_in">elem</span>.<span class="hljs-built_in">style</span>.<span class="hljs-built_in">color</span> = &#x27;white&#x27;;<br><span class="hljs-built_in">elem</span>.<span class="hljs-built_in">style</span>.<span class="hljs-built_in">width</span> = &#x27;100px&#x27;; <br>//cssText可以简化样式的设置操作 , 注意会把<span class="hljs-built_in">style</span>样式进行整体覆盖掉<br><span class="hljs-built_in">elem</span>.<span class="hljs-built_in">style</span>.cssText = &#x27;<span class="hljs-built_in">width</span>:100px;<span class="hljs-built_in">background</span>:red;<span class="hljs-built_in">color</span>:white&#x27;;<br></code></pre></td></tr></table></figure><p>这种方法只能改变元素的内联样式，如果写的内部样式或者外部样式，应该怎么办呢？<br>这里提供一种方法<code>getComputedStyle()</code>  它获取的是元素的最终样式，即不管你是哪里的CSS，我只抓住最后呈现在页面上的样式！（挺霸道的……我感觉）</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> <span class="hljs-built_in">elem</span> = document.getElementById(&#x27;<span class="hljs-built_in">elem</span>&#x27;);<br>console.<span class="hljs-built_in">log</span>( getComputedStyle(<span class="hljs-built_in">elem</span>).<span class="hljs-built_in">color</span> );<br>console.<span class="hljs-built_in">log</span>( getComputedStyle(<span class="hljs-built_in">elem</span>).fontSize );<br></code></pre></td></tr></table></figure><p>在一些老浏览器里不支持这么霸道的它，那怎么兼容啊</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-built_in">var</span> <span class="hljs-built_in">elem</span> = document.getElementById(&#x27;<span class="hljs-built_in">elem</span>&#x27;);<br>console.<span class="hljs-built_in">log</span>( <span class="hljs-built_in">elem</span>.currentStyle.fontSize );<br></code></pre></td></tr></table></figure><p>这个方法老版本适用新版本不适用……挺气人的</p><h2 id="修改DOM中的内容"><a href="#修改DOM中的内容" class="headerlink" title="修改DOM中的内容"></a>修改DOM中的内容</h2><h3 id="innerHTML：获取元素里的内容"><a href="#innerHTML：获取元素里的内容" class="headerlink" title="innerHTML：获取元素里的内容"></a>innerHTML：获取元素里的内容</h3><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( elem.innerHTML );   <span class="hljs-comment">// &#x27;&lt;h2&gt;hello&lt;/h2&gt;&#x27;</span><br>elem.innerHTML = <span class="hljs-string">&#x27;&lt;p&gt;这是一个段落&lt;/p&gt;&#x27;</span>; <br></code></pre></td></tr></table></figure><p><img src="/images/inner%E6%8E%A7%E5%88%B6%E5%8F%B0_1.png" alt="enter description here"><br><strong>输出了id为elem的div里全部内容</strong><br><img src="D:\GitHub\moewang0321.github.io\images\inner页面变化.png"><br><strong>innerHTML识别标签，自动将字符串转化为p标签</strong></p><h3 id="innerText"><a href="#innerText" class="headerlink" title="innerText"></a>innerText</h3><p>跟innerHTML用法相似但是不会获取标签，只会获取文本内容<br>上部代码如果将<code>innerHTML</code>变成 <code>innerText</code> 那页面上输出的将会是<code>&lt;p&gt;这是一个段落&lt;/p&gt;</code></p><h3 id="document-write"><a href="#document-write" class="headerlink" title="document.write"></a>document.write</h3><p>不常用，直接将文本内容输出到页面body中，了解即可</p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初入JS（二）</title>
    <link href="/2019/08/05/2019-08-06-%E5%88%9D%E5%85%A5JS%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2019/08/05/2019-08-06-%E5%88%9D%E5%85%A5JS%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="判断类型"><a href="#判断类型" class="headerlink" title="判断类型"></a>判断类型</h2><p>&emsp;&emsp;typeof以及返回类型（都是字符串）</p><h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p>&emsp;&emsp;&emsp;&emsp;如何判断类型?<br>&emsp;&emsp;&emsp;&emsp;1.typeof<br>&emsp;&emsp;&emsp;&emsp;2.instanceof<br>&emsp;&emsp;&emsp;&emsp;3.Object.prototype.toString.call()  </p><p>&emsp;&emsp;&emsp;&emsp;NaN的类型是number</p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a><em>注意</em></h4><p>&emsp;&emsp;如下定义并赋值a,那么typeof一下a，返回的是什么类型？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-keyword">var</span> a = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;;<br><span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-built_in">typeof</span> a);<br></code></pre></td></tr></table></figure><p><img src="../images/function.png" alt="结果"><br>&emsp;&emsp;事实证明返回的是function</p><p>&emsp;&emsp;整理一下各个类型的typeof</p><figure class="highlight qml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs qml"><span class="hljs-comment">// Numbers</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-number">37</span> === <span class="hljs-string">&#x27;number&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-number">3.14</span> === <span class="hljs-string">&#x27;number&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Math</span>.LN2 === <span class="hljs-string">&#x27;number&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">Infinity</span> === <span class="hljs-string">&#x27;number&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">NaN</span> === <span class="hljs-string">&#x27;number&#x27;</span>; <span class="hljs-comment">// 尽管NaN是&quot;Not-A-Number&quot;的缩写</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">1</span>) === <span class="hljs-string">&#x27;number&#x27;</span>; <span class="hljs-comment">// 但不要使用这种形式!</span><br><br><span class="hljs-comment">// Strings</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;&quot;</span> === <span class="hljs-string">&#x27;string&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-string">&quot;bla&quot;</span> === <span class="hljs-string">&#x27;string&#x27;</span>;<br><span class="hljs-keyword">typeof</span> (<span class="hljs-keyword">typeof</span> <span class="hljs-number">1</span>) === <span class="hljs-string">&#x27;string&#x27;</span>; <span class="hljs-comment">// typeof总是返回一个字符串</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>) === <span class="hljs-string">&#x27;string&#x27;</span>; <span class="hljs-comment">// 但不要使用这种形式!</span><br><br><span class="hljs-comment">// Booleans</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">true</span> === <span class="hljs-string">&#x27;boolean&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">false</span> === <span class="hljs-string">&#x27;boolean&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">true</span>) === <span class="hljs-string">&#x27;boolean&#x27;</span>; <span class="hljs-comment">// 但不要使用这种形式!</span><br><br><span class="hljs-comment">// Symbols</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>() === <span class="hljs-string">&#x27;symbol&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>) === <span class="hljs-string">&#x27;symbol&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Symbol</span>.iterator === <span class="hljs-string">&#x27;symbol&#x27;</span>;<br><br><span class="hljs-comment">// Undefined</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-literal">undefined</span> === <span class="hljs-string">&#x27;undefined&#x27;</span>;<br><span class="hljs-keyword">typeof</span> declaredButUndefinedVariable === <span class="hljs-string">&#x27;undefined&#x27;</span>;<br><span class="hljs-keyword">typeof</span> undeclaredVariable === <span class="hljs-string">&#x27;undefined&#x27;</span>; <br><br><span class="hljs-comment">// Objects</span><br><span class="hljs-title">typeof</span> &#123;<span class="hljs-attribute">a</span>:<span class="hljs-number">1</span>&#125; === <span class="hljs-string">&#x27;object&#x27;</span>;<br><br><span class="hljs-comment">// 使用Array.isArray 或者 Object.prototype.toString.call</span><br><span class="hljs-comment">// 区分数组,普通对象</span><br><span class="hljs-keyword">typeof</span> [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>] === <span class="hljs-string">&#x27;object&#x27;</span>;<br><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() === <span class="hljs-string">&#x27;object&#x27;</span>;<br><br><span class="hljs-comment">// 下面的容易令人迷惑，不要使用！</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Boolean</span>(<span class="hljs-literal">true</span>) === <span class="hljs-string">&#x27;object&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Number</span>(<span class="hljs-number">1</span>) === <span class="hljs-string">&#x27;object&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">String</span>(<span class="hljs-string">&quot;abc&quot;</span>) === <span class="hljs-string">&#x27;object&#x27;</span>;<br><br><span class="hljs-comment">// 函数</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>&#123;&#125; === <span class="hljs-string">&#x27;function&#x27;</span>;<br><span class="hljs-keyword">typeof</span> class <span class="hljs-title">C</span>&#123;&#125; === <span class="hljs-string">&#x27;function&#x27;</span><br><span class="hljs-keyword">typeof</span> <span class="hljs-built_in">Math</span>.sin === <span class="hljs-string">&#x27;function&#x27;</span>;<br><span class="hljs-keyword">typeof</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>() === <span class="hljs-string">&#x27;function&#x27;</span>;<br></code></pre></td></tr></table></figure><hr><h3 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h3><h4 id="1-显式类型转换"><a href="#1-显式类型转换" class="headerlink" title="1.显式类型转换"></a>1.显式类型转换</h4><p>&emsp;&emsp;调用转换方法，主动转换<br>&emsp;&emsp;a.Number()<br>&emsp;&emsp;b.String()<br>&emsp;&emsp;c.Boolean()</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//显式类型转换</span><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-built_in">typeof</span> <span class="hljs-built_in">Number</span>(a) );<br><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;hello&#x27;</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-built_in">typeof</span> <span class="hljs-built_in">Number</span>(a) );   <span class="hljs-comment">//NaN</span><br><br>  <span class="hljs-keyword">var</span> a = <span class="hljs-literal">true</span>;<br>  <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-built_in">Number</span>(a) );  <span class="hljs-comment">// true -&gt; 1  , false -&gt; 0</span><br><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-number">123</span>;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-built_in">typeof</span> String(a) );   <span class="hljs-comment">// &#x27;123&#x27;</span><br><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-literal">true</span>;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( String(a) );   <span class="hljs-comment">// &#x27;true&#x27;</span><br><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;&#x27;</span>;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-built_in">Boolean</span>(a) );   <span class="hljs-comment">//只要字符串有内容就转成true，空字符串转成false</span><br><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-number">0</span>;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-built_in">Boolean</span>(a) );   <span class="hljs-comment">//只要数字不为0，就转成true，0会转成false</span><br></code></pre></td></tr></table></figure><h4 id="2-隐式类型转换"><a href="#2-隐式类型转换" class="headerlink" title="2.隐式类型转换"></a>2.隐式类型转换</h4><p>&emsp;&emsp;被动转换，由JS程序自动进行转换。<br><strong>&emsp;&emsp;+ - * / == 隐式类型转换</strong><br><strong>&emsp;&emsp;+ 数值 - 负数值</strong></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//隐式类型转换</span><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;1&#x27;</span>;<br>   <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( a + b );  <span class="hljs-comment">//隐式类型转换  b -&gt; 2 -&gt; &#x27;2&#x27; ，然后在连接a变量</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( a - b );  <span class="hljs-comment">//隐式类型转换  a -&gt; &#x27;1&#x27; -&gt; 1 , 然后在相加b变量</span><br></code></pre></td></tr></table></figure><hr><h3 id="比较类型"><a href="#比较类型" class="headerlink" title="比较类型"></a>比较类型</h3><p>挑一些重点来说了，就不把知识点一一罗列了，具体可以查看w3cSchool  </p><h4 id="和-之间的区别"><a href="#和-之间的区别" class="headerlink" title="== 和 = 之间的区别"></a>== 和 = 之间的区别</h4><p>&emsp;&emsp; ==进行比较，而=进行赋值操作</p><h4 id="比较时候的几种情况"><a href="#比较时候的几种情况" class="headerlink" title="比较时候的几种情况"></a>比较时候的几种情况</h4><p><strong>1.当两边都是字符串的情况下</strong><br>&emsp;&emsp;按位进行比较，字符的unicode编码进行比较</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//两边都是字符串的情况 : 按位进行比较，字符的unicode编码进行比较</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;a&#x27;</span> &gt;= <span class="hljs-string">&#x27;b&#x27;</span> );<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;a&#x27;</span>.charCodeAt() );  <span class="hljs-comment">//查看字符对应的unicode编码</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-string">&#x27;5&#x27;</span> &gt;= <span class="hljs-string">&#x27;12&#x27;</span> );   <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p><strong>2.当两边不都是字符串的情况下</strong><br>&emsp;&emsp;直接看如下代码吧</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//两边不都是字符串的情况 : 把其他类型转成数字类型后，再比较</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">5</span> &gt;= <span class="hljs-string">&#x27;12&#x27;</span> );  <span class="hljs-comment">//  5 &gt;= 12   // false</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">true</span> == <span class="hljs-number">1</span> );   <span class="hljs-comment">// true -&gt; 1  -&gt; 1==1   // true</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">true</span> == <span class="hljs-number">2</span> );   <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>查看字符对应的unicode编码方法：charCodeAt（）<br><strong>3.特殊类型的比较</strong><br>&emsp;&emsp;null、undefined、NaN的比较<br>&emsp;&emsp;老规矩直接上代码，清晰明了</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//特殊类型的比较 </span><br>     <span class="hljs-literal">null</span>与<span class="hljs-literal">undefined</span>比较的时候，返回<span class="hljs-literal">true</span>。除了下面三种情况，跟其他任何值比较都是<span class="hljs-literal">false</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">null</span> == <span class="hljs-literal">null</span> );<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">undefined</span> == <span class="hljs-literal">undefined</span> );<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span> );<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">null</span> == <span class="hljs-literal">false</span> );<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">null</span> == <span class="hljs-literal">true</span> );<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">undefined</span> == <span class="hljs-literal">false</span> );<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">undefined</span> == <span class="hljs-literal">true</span> );<br><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">NaN</span> == <span class="hljs-literal">NaN</span> );  <span class="hljs-comment">//false</span><br>     <span class="hljs-comment">//ES6 :  Object.is() : 修正一些判断的</span><br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( Object.is(<span class="hljs-literal">NaN</span> , <span class="hljs-literal">NaN</span>) );<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( +<span class="hljs-number">0</span> == <span class="hljs-number">-0</span> );<br>     <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( Object.is(+<span class="hljs-number">0</span> , <span class="hljs-number">-0</span>) );<br></code></pre></td></tr></table></figure><p><em>其中 <code>Object.is（）</code>是ES6中为了修正历史遗留问题而推出的。</em></p><hr><h3 id="JS运算符（五大类）"><a href="#JS运算符（五大类）" class="headerlink" title="JS运算符（五大类）"></a>JS运算符（五大类）</h3><p>因为运算符基本上不需要语言赘述，故直接扔上图和代码</p><h4 id="1-算术运算符（10种）"><a href="#1-算术运算符（10种）" class="headerlink" title="1.算术运算符（10种）"></a>1.算术运算符（10种）</h4><p><img src="../images/3%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="算术运算符"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//算术运算符(10种)</span><br>   <span class="hljs-comment">// + - / * %</span><br>   <span class="hljs-comment">// ++  --</span><br>   <span class="hljs-comment">// +   -</span><br>   <span class="hljs-comment">// **</span><br><br>   <span class="hljs-comment">//4%7 -&gt; 4  当被除数小于除数的时候，余数就是被除数自身</span><br><br>   <span class="hljs-comment">//123秒</span><br>   <span class="hljs-comment">//123%60  , 转换后剩余的秒数</span><br><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>   a++;<br>   ++a;<br><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( a++ );   <span class="hljs-comment">// 先返回a，再对a+1操作</span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( ++a );    <span class="hljs-comment">// 先对a+1操作，然后再返回a</span><br><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>   a++;<br>   ++a;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a)<br>   <span class="hljs-comment">//+ 数值  -负数值</span><br><br>   <span class="hljs-keyword">var</span> a = <span class="hljs-string">&#x27;123&#x27;</span>;<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-built_in">typeof</span> +a );<br><br>   <span class="hljs-comment">//指数运算符 , 从右向左计算  (ES6)  </span><br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">2</span> ** <span class="hljs-number">2</span> ** <span class="hljs-number">3</span> );<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">2</span> * <span class="hljs-number">2</span> * <span class="hljs-number">2</span> );<br>   <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( Math.<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>) );<br></code></pre></td></tr></table></figure><h4 id="2-赋值运算符（简单、复合）"><a href="#2-赋值运算符（简单、复合）" class="headerlink" title="2.赋值运算符（简单、复合）"></a>2.赋值运算符（简单、复合）</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//赋值运算符(简单与复合)</span><br><br>      <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>      a = a + <span class="hljs-number">2</span>;   <span class="hljs-comment">//简单的赋值运算符</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br><br>      <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>      a += <span class="hljs-number">2</span>;   <span class="hljs-comment">//复合的赋值运算符</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br><br>      <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">var</span> b = <span class="hljs-number">2</span>;<br>      a = b + <span class="hljs-number">3</span>;<br><br>      a++;<br>      a += <span class="hljs-number">1</span>;<br><br>      <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br><br>      a = (a/=<span class="hljs-number">2</span>) + a;<br><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>(a);<br><br>      <span class="hljs-comment">//(1 + 2) * 3</span><br></code></pre></td></tr></table></figure><h4 id="3-比较运算符（8种）"><a href="#3-比较运算符（8种）" class="headerlink" title="3.比较运算符（8种）"></a>3.比较运算符（8种）</h4><p><img src="../images/4%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97%E7%AC%A6.png" alt="比较运算符"></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//比较运算符(8种)</span><br><br>      <span class="hljs-comment">//== === !=  !==</span><br><br>      <span class="hljs-comment">//===表示严格相等，值和类型都要相等，才相等</span><br><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">2</span> === <span class="hljs-string">&#x27;2&#x27;</span> );<br><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">2</span> != <span class="hljs-number">3</span> );<br><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">2</span> !== <span class="hljs-string">&#x27;2&#x27;</span> );<br></code></pre></td></tr></table></figure><h4 id="4-逻辑运算符"><a href="#4-逻辑运算符" class="headerlink" title="4.逻辑运算符"></a>4.逻辑运算符</h4><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//逻辑运算符 : &amp;&amp;(与) ||(或) !(非)</span><br><br>      <span class="hljs-comment">//&amp;&amp; : 逻辑两边都为真，结果才为真，逻辑两边有一边不为真，结果就为假。</span><br><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">1</span> &lt; <span class="hljs-number">2</span> &amp;&amp; <span class="hljs-number">5</span> &gt; <span class="hljs-number">4</span> );<br><br>      <span class="hljs-comment">//|| : 逻辑两边有一边为真，结果就为真，逻辑两边都为假，结果才为假。</span><br><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span> || <span class="hljs-number">5</span> &lt; <span class="hljs-number">4</span> );<br><br>      <span class="hljs-comment">//! : 逻辑的取反，真的就是变成假的，假的就会变成真的</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( !(<span class="hljs-number">1</span> &gt; <span class="hljs-number">2</span>) );<br><br>      <span class="hljs-keyword">var</span> 艺术生 = <span class="hljs-string">&#x27;小明&#x27;</span>;<br>      <span class="hljs-keyword">var</span> 高考成绩 = <span class="hljs-number">300</span>;<br>      <span class="hljs-keyword">var</span> 艺考成绩 = <span class="hljs-number">200</span>;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( 艺术生 , 高考成绩&gt;<span class="hljs-number">200</span> &amp;&amp; 艺考成绩&gt;<span class="hljs-number">100</span> );<br><br>      <span class="hljs-keyword">var</span> <span class="hljs-built_in">number</span> = <span class="hljs-number">70</span>;<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">3</span> &lt; <span class="hljs-built_in">number</span> &lt; <span class="hljs-number">10</span> );  <span class="hljs-comment">//✖</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-number">3</span> &lt; <span class="hljs-built_in">number</span> &amp;&amp; <span class="hljs-built_in">number</span> &lt; <span class="hljs-number">10</span> );  <span class="hljs-comment">//✔</span><br></code></pre></td></tr></table></figure><h4 id="5-条件运算符"><a href="#5-条件运算符" class="headerlink" title="5.条件运算符"></a>5.条件运算符</h4><p>三目运算符：<code>条件？输出1：输出2</code></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arcade"><span class="hljs-comment">//三元运算，三目运算  ? :</span><br>      <span class="hljs-comment">//当条件为真，就返回问号后面的内容，当条件为假，就返回冒号后面的内容</span><br>      <span class="hljs-comment">//执行顺序从右向左</span><br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">false</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span> );<br>      <span class="hljs-built_in">console</span>.<span class="hljs-built_in">log</span>( <span class="hljs-literal">false</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">2</span> ? <span class="hljs-number">3</span> : <span class="hljs-number">4</span> );<br><br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初入JS（一）</title>
    <link href="/2019/08/05/2019-08-05-%E5%88%9D%E5%85%A5JS%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2019/08/05/2019-08-05-%E5%88%9D%E5%85%A5JS%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一、JS引入方式"><a href="#一、JS引入方式" class="headerlink" title="一、JS引入方式"></a>一、JS引入方式</h2><p>和CSS引入方式相对比</p><h3 id="CSS引入方式："><a href="#CSS引入方式：" class="headerlink" title="CSS引入方式："></a>CSS引入方式：</h3><p>1.行间<br><code>&lt;div style=&quot;&quot;&gt;&lt;/div&gt;</code></p><p>2.内部</p><p> 3.外部</p><h3 id="JS引入方式"><a href="#JS引入方式" class="headerlink" title="JS引入方式 :"></a>JS引入方式 :</h3><p>1.行间<br><code>&lt;div onclick=&quot;alert(123)&quot;&gt;aaa&lt;/div&gt;</code></p><p>2.内部</p><p>3.外部<br><code>&lt;script src=&quot;base.js&quot;&gt;&lt;/script&gt;</code></p><hr><h2 id="JS变量"><a href="#JS变量" class="headerlink" title="JS变量"></a>JS变量</h2><p>&emsp;变量名：规范-&gt;不能用关键字和保留字</p><p><em>&emsp;关键字：已有的语法（类似 &nbsp; var &nbsp;等）</em></p><p>&emsp;执行顺序(从上到下，从左到右)以及赋值时的执行顺序(从右向左)</p><p>&emsp;三元和指数都是从右向左执行的</p><hr><h2 id="JS数据类型"><a href="#JS数据类型" class="headerlink" title="JS数据类型"></a>JS数据类型</h2><p>什么是数据类型？<br>&emsp;&emsp;数据类型在数据结构中的定义是一组性质相同的值的集合以及定义在这个值集合上的一组操作的总称。</p><h3 id="emsp-六种划分"><a href="#emsp-六种划分" class="headerlink" title="&emsp;六种划分"></a>&emsp;六种划分</h3><p>&emsp;&emsp;字符串、数字、布尔值、对象、null、undefined<br>&emsp;&emsp;&emsp;&emsp;基本类型：字符串、数字、布尔值<br>&emsp;&emsp;&emsp;&emsp;复合类型：对象<br>&emsp;&emsp;&emsp;&emsp;特殊类型：null、undefined</p><h3 id="emsp-八种划分"><a href="#emsp-八种划分" class="headerlink" title="&emsp;八种划分"></a>&emsp;八种划分</h3><p>&emsp;&emsp;字符串、数字、布尔值、<strong>对象（狭隘的对象、数组、函数）</strong>、null、undefined</p><p>&emsp;&emsp;<em>Symbol 是ES6中的第七种类型</em></p><h3 id="emsp-emsp-扩展"><a href="#emsp-emsp-扩展" class="headerlink" title="&emsp;&emsp;扩展"></a>&emsp;&emsp;扩展</h3><p>&emsp;&emsp;单引号还是双引号？<br>&emsp;&emsp;&emsp;在JS中均可，保证是英文状态下的引号即可，推荐用单引号：和HTML属性区分  </p><h4 id="emsp-emsp-转义的用处"><a href="#emsp-emsp-转义的用处" class="headerlink" title="&emsp;&emsp;转义的用处"></a>&emsp;&emsp;转义的用处</h4><p>&emsp;&emsp; 可以输出一些特殊的字符串  </p><h4 id="emsp-emsp-加号的两种意义？"><a href="#emsp-emsp-加号的两种意义？" class="headerlink" title="&emsp;&emsp; 加号的两种意义？"></a>&emsp;&emsp; 加号的两种意义？</h4><p>&emsp;&emsp; 1.连接：字符串操作的时候<br>&emsp;&emsp; 2.相加: 数字操作的时候</p><h4 id="emsp-emsp-嵌套引号的时候的注意事项"><a href="#emsp-emsp-嵌套引号的时候的注意事项" class="headerlink" title="&emsp;&emsp; 嵌套引号的时候的注意事项"></a>&emsp;&emsp; <strong>嵌套引号的时候的注意事项</strong></h4><p>&emsp;&emsp; 单引号套双引号……即互相嵌套，不可单引号套单引号，双引号也是</p><hr><h2 id="undefined和null的区别？"><a href="#undefined和null的区别？" class="headerlink" title="undefined和null的区别？"></a>undefined和null的区别？</h2><p>&emsp;&emsp;1.null计算的时候，会转成0；而undefined不会转。<br>&emsp;&emsp;2.null是一个主动设计成的空值，undefined是一个被动的设计成未定义。<br>&emsp;&emsp;3.null是先有的类型，而undefined是后有的类型，是对null的完善补充。</p><hr><h2 id="字符串拆行问题"><a href="#字符串拆行问题" class="headerlink" title="字符串拆行问题"></a>字符串拆行问题</h2><p>&emsp;&emsp; 1.用+进行连接  </p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&#x27;&lt;ul&gt;&#x27;</span> +         <span class="hljs-comment">//解决折行问题</span><br>          <span class="hljs-string">&#x27;&lt;li&gt;1&lt;/li&gt;&#x27;</span> +<br>          <span class="hljs-string">&#x27;&lt;li&gt;2&lt;/li&gt;&#x27;</span> +<br>          <span class="hljs-string">&#x27;&lt;/ul&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;2.用\进行连接  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">var str = &#x27;<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>\<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\<br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\<br>               <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>&#x27;;<br></code></pre></td></tr></table></figure><p>&emsp;&emsp;&emsp;&emsp;<strong>注意</strong>：&nbsp; \ &nbsp; 符号后不能有任何字符，包括空格。<br>&emsp;&emsp;3.ES6 新特性 用``进行连接</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">var str = `<span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>        <br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>`;<br></code></pre></td></tr></table></figure><hr>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
